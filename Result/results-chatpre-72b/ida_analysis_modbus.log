2025-03-13 17:14:18,991 - my_text.py:231  - Waiting for initial analysis to complete...
2025-03-13 17:14:18,991 - my_text.py:233  - Initial analysis completed.
2025-03-13 17:14:18,992 - my_text.py:239  - Received argument1: modbus
2025-03-13 17:14:18,992 - my_text.py:240  - Received argument2: 1
2025-03-13 17:14:18,992 - my_text.py:245  - Starting analysis...
2025-03-13 17:14:18,992 - my_text.py:86  - Total global variables: 230
2025-03-13 17:14:18,992 - my_text.py:89  - Global Variables:
2025-03-13 17:14:18,992 - my_text.py:110  -   Address: 0x4002A8, Name: aLib64LdLinuxX8, Type: Unknown
2025-03-13 17:14:18,992 - my_text.py:110  -   Address: 0x4002D0, Name: aGnu, Type: Unknown
2025-03-13 17:14:18,992 - my_text.py:110  -   Address: 0x4002F4, Name: aGnu_0, Type: Unknown
2025-03-13 17:14:18,993 - my_text.py:110  -   Address: 0x400308, Name: elf_gnu_hash_nbuckets, Type: Unknown
2025-03-13 17:14:18,993 - my_text.py:110  -   Address: 0x40030C, Name: elf_gnu_hash_symbias, Type: Unknown
2025-03-13 17:14:18,993 - my_text.py:110  -   Address: 0x400310, Name: elf_gnu_hash_bitmask_nwords, Type: Unknown
2025-03-13 17:14:18,993 - my_text.py:110  -   Address: 0x400314, Name: elf_gnu_hash_shift, Type: Unknown
2025-03-13 17:14:18,993 - my_text.py:110  -   Address: 0x400318, Name: elf_gnu_hash_indexes, Type: Unknown
2025-03-13 17:14:18,993 - my_text.py:110  -   Address: 0x400320, Name: elf_gnu_hash_bucket, Type: Unknown
2025-03-13 17:14:18,993 - my_text.py:110  -   Address: 0x400328, Name: elf_gnu_hash_chain, Type: Unknown
2025-03-13 17:14:18,993 - my_text.py:110  -   Address: 0x4005D1, Name: aLibpthreadSo0, Type: Unknown
2025-03-13 17:14:18,993 - my_text.py:110  -   Address: 0x4005E1, Name: aErrnoLocation, Type: Unknown
2025-03-13 17:14:18,993 - my_text.py:110  -   Address: 0x4005F2, Name: aSend, Type: Unknown
2025-03-13 17:14:18,993 - my_text.py:110  -   Address: 0x4005F7, Name: aClose, Type: Unknown
2025-03-13 17:14:18,993 - my_text.py:110  -   Address: 0x4005FD, Name: aAccept, Type: Unknown
2025-03-13 17:14:18,993 - my_text.py:110  -   Address: 0x400604, Name: aPthreadCreate, Type: Unknown
2025-03-13 17:14:18,993 - my_text.py:110  -   Address: 0x400613, Name: aPthreadMutexLo, Type: Unknown
2025-03-13 17:14:18,993 - my_text.py:110  -   Address: 0x400626, Name: aPthreadMutexUn, Type: Unknown
2025-03-13 17:14:18,994 - my_text.py:110  -   Address: 0x40063B, Name: aRecv, Type: Unknown
2025-03-13 17:14:18,994 - my_text.py:110  -   Address: 0x400640, Name: aLibcSo6, Type: Unknown
2025-03-13 17:14:18,994 - my_text.py:110  -   Address: 0x40064A, Name: aSocket, Type: Unknown
2025-03-13 17:14:18,994 - my_text.py:110  -   Address: 0x400651, Name: aHtonl, Type: Unknown
2025-03-13 17:14:18,994 - my_text.py:110  -   Address: 0x400657, Name: aHtons, Type: Unknown
2025-03-13 17:14:18,994 - my_text.py:110  -   Address: 0x40065D, Name: aPuts, Type: Unknown
2025-03-13 17:14:18,994 - my_text.py:110  -   Address: 0x400662, Name: aStackChkFail, Type: Unknown
2025-03-13 17:14:18,994 - my_text.py:110  -   Address: 0x400673, Name: aListen, Type: Unknown
2025-03-13 17:14:18,994 - my_text.py:110  -   Address: 0x40067A, Name: aSelect, Type: Unknown
2025-03-13 17:14:18,994 - my_text.py:110  -   Address: 0x400681, Name: aAssertFail, Type: Unknown
2025-03-13 17:14:18,994 - my_text.py:110  -   Address: 0x40068F, Name: aMemset, Type: Unknown
2025-03-13 17:14:18,994 - my_text.py:110  -   Address: 0x400696, Name: aGetchar, Type: Unknown
2025-03-13 17:14:18,994 - my_text.py:110  -   Address: 0x40069E, Name: aBind, Type: Unknown
2025-03-13 17:14:18,994 - my_text.py:110  -   Address: 0x4006A3, Name: aMemcpy, Type: Unknown
2025-03-13 17:14:18,994 - my_text.py:110  -   Address: 0x4006AA, Name: aStderr, Type: Unknown
2025-03-13 17:14:18,994 - my_text.py:110  -   Address: 0x4006B1, Name: aUsleep, Type: Unknown
2025-03-13 17:14:18,994 - my_text.py:110  -   Address: 0x4006B8, Name: aFwrite, Type: Unknown
2025-03-13 17:14:18,994 - my_text.py:110  -   Address: 0x4006BF, Name: aFprintf, Type: Unknown
2025-03-13 17:14:18,995 - my_text.py:110  -   Address: 0x4006C7, Name: aLibcStartMain, Type: Unknown
2025-03-13 17:14:18,995 - my_text.py:110  -   Address: 0x4006D9, Name: aGlibc214, Type: Unknown
2025-03-13 17:14:18,995 - my_text.py:110  -   Address: 0x4006E4, Name: aGlibc24, Type: Unknown
2025-03-13 17:14:18,995 - my_text.py:110  -   Address: 0x4006EE, Name: aGlibc225, Type: Unknown
2025-03-13 17:14:18,995 - my_text.py:110  -   Address: 0x4006FA, Name: aGmonStart, Type: Unknown
2025-03-13 17:14:18,995 - my_text.py:110  -   Address: 0x401000, Name: .init_proc, Type: Unknown
2025-03-13 17:14:18,995 - my_text.py:110  -   Address: 0x401030, Name: .recv, Type: None
2025-03-13 17:14:18,995 - my_text.py:110  -   Address: 0x401040, Name: .pthread_create, Type: None
2025-03-13 17:14:18,995 - my_text.py:110  -   Address: 0x401050, Name: .__errno_location, Type: None
2025-03-13 17:14:18,995 - my_text.py:110  -   Address: 0x401060, Name: .puts, Type: None
2025-03-13 17:14:18,995 - my_text.py:110  -   Address: 0x401070, Name: .__stack_chk_fail, Type: Unknown
2025-03-13 17:14:18,995 - my_text.py:110  -   Address: 0x401080, Name: .htons, Type: None
2025-03-13 17:14:18,995 - my_text.py:110  -   Address: 0x401090, Name: .send, Type: None
2025-03-13 17:14:18,995 - my_text.py:110  -   Address: 0x4010A0, Name: .printf, Type: None
2025-03-13 17:14:18,995 - my_text.py:110  -   Address: 0x4010B0, Name: .__assert_fail, Type: None
2025-03-13 17:14:18,995 - my_text.py:110  -   Address: 0x4010C0, Name: .htonl, Type: None
2025-03-13 17:14:18,995 - my_text.py:110  -   Address: 0x4010D0, Name: .memset, Type: None
2025-03-13 17:14:18,996 - my_text.py:110  -   Address: 0x4010E0, Name: .close, Type: None
2025-03-13 17:14:18,996 - my_text.py:110  -   Address: 0x4010F0, Name: .getchar, Type: None
2025-03-13 17:14:18,996 - my_text.py:110  -   Address: 0x401100, Name: .fprintf, Type: None
2025-03-13 17:14:18,996 - my_text.py:110  -   Address: 0x401110, Name: .memcpy, Type: None
2025-03-13 17:14:18,996 - my_text.py:110  -   Address: 0x401120, Name: .select, Type: None
2025-03-13 17:14:18,996 - my_text.py:110  -   Address: 0x401130, Name: .pthread_mutex_unlock, Type: None
2025-03-13 17:14:18,996 - my_text.py:110  -   Address: 0x401140, Name: .listen, Type: None
2025-03-13 17:14:18,996 - my_text.py:110  -   Address: 0x401150, Name: .bind, Type: None
2025-03-13 17:14:18,996 - my_text.py:110  -   Address: 0x401160, Name: .accept, Type: None
2025-03-13 17:14:18,996 - my_text.py:110  -   Address: 0x401170, Name: .fwrite, Type: None
2025-03-13 17:14:18,996 - my_text.py:110  -   Address: 0x401180, Name: .pthread_mutex_lock, Type: None
2025-03-13 17:14:18,997 - my_text.py:110  -   Address: 0x401190, Name: .usleep, Type: None
2025-03-13 17:14:18,997 - my_text.py:110  -   Address: 0x4011A0, Name: .socket, Type: None
2025-03-13 17:14:18,997 - my_text.py:110  -   Address: 0x4011B0, Name: _start, Type: Unknown
2025-03-13 17:14:18,997 - my_text.py:110  -   Address: 0x4011E0, Name: _dl_relocate_static_pie, Type: Unknown
2025-03-13 17:14:18,997 - my_text.py:110  -   Address: 0x4011F0, Name: deregister_tm_clones, Type: Unknown
2025-03-13 17:14:18,997 - my_text.py:110  -   Address: 0x401230, Name: register_tm_clones, Type: Unknown
2025-03-13 17:14:18,997 - my_text.py:110  -   Address: 0x401270, Name: __do_global_dtors_aux, Type: Unknown
2025-03-13 17:14:18,997 - my_text.py:110  -   Address: 0x401290, Name: frame_dummy, Type: Unknown
2025-03-13 17:14:18,997 - my_text.py:110  -   Address: 0x4012B6, Name: main, Type: None
2025-03-13 17:14:18,997 - my_text.py:110  -   Address: 0x40140C, Name: def_401346, Type: Unknown
2025-03-13 17:14:18,997 - my_text.py:110  -   Address: 0x401458, Name: bCreatePollingThread, Type: None
2025-03-13 17:14:18,997 - my_text.py:110  -   Address: 0x4014C1, Name: pvPollingThread, Type: None
2025-03-13 17:14:18,997 - my_text.py:110  -   Address: 0x40150C, Name: eGetPollingThreadState, Type: None
2025-03-13 17:14:18,997 - my_text.py:110  -   Address: 0x401536, Name: eSetPollingThreadState, Type: None
2025-03-13 17:14:18,997 - my_text.py:110  -   Address: 0x401561, Name: eMBRegInputCB, Type: None
2025-03-13 17:14:18,998 - my_text.py:110  -   Address: 0x40160C, Name: eMBRegHoldingCB, Type: None
2025-03-13 17:14:18,998 - my_text.py:110  -   Address: 0x40173F, Name: eMBRegCoilsCB, Type: None
2025-03-13 17:14:18,998 - my_text.py:110  -   Address: 0x40175B, Name: eMBRegDiscreteCB, Type: None
2025-03-13 17:14:18,998 - my_text.py:110  -   Address: 0x401776, Name: prvMBTCPPortAddressToString, Type: None
2025-03-13 17:14:18,998 - my_text.py:110  -   Address: 0x40178E, Name: prvMBTCPPortFrameToString, Type: None
2025-03-13 17:14:18,998 - my_text.py:110  -   Address: 0x4017A3, Name: WsaError2String, Type: None
2025-03-13 17:14:18,998 - my_text.py:110  -   Address: 0x4017B1, Name: vMBPortLog, Type: None
2025-03-13 17:14:18,998 - my_text.py:110  -   Address: 0x4018B5, Name: xMBPortEventInit, Type: None
2025-03-13 17:14:18,998 - my_text.py:110  -   Address: 0x4018C7, Name: xMBPortEventPost, Type: None
2025-03-13 17:14:18,998 - my_text.py:110  -   Address: 0x4018E5, Name: xMBPortEventGet, Type: None
2025-03-13 17:14:18,998 - my_text.py:110  -   Address: 0x401924, Name: xMBTCPPortInit, Type: None
2025-03-13 17:14:18,998 - my_text.py:110  -   Address: 0x401AEA, Name: vMBTCPPortClose, Type: None
2025-03-13 17:14:18,998 - my_text.py:110  -   Address: 0x401B19, Name: vMBTCPPortDisable, Type: None
2025-03-13 17:14:18,998 - my_text.py:110  -   Address: 0x401B30, Name: xMBPortTCPPool, Type: None
2025-03-13 17:14:18,998 - my_text.py:110  -   Address: 0x401E4B, Name: xMBTCPPortGetRequest, Type: None
2025-03-13 17:14:18,998 - my_text.py:110  -   Address: 0x401E89, Name: xMBTCPPortSendResponse, Type: None
2025-03-13 17:14:18,999 - my_text.py:110  -   Address: 0x401F3C, Name: prvvMBPortReleaseClient, Type: None
2025-03-13 17:14:18,999 - my_text.py:110  -   Address: 0x401F76, Name: prvbMBPortAcceptClient, Type: None
2025-03-13 17:14:18,999 - my_text.py:110  -   Address: 0x401FF8, Name: eMBInit, Type: None
2025-03-13 17:14:18,999 - my_text.py:110  -   Address: 0x402077, Name: eMBTCPInit, Type: None
2025-03-13 17:14:18,999 - my_text.py:110  -   Address: 0x402115, Name: eMBRegisterCB, Type: None
2025-03-13 17:14:18,999 - my_text.py:110  -   Address: 0x402234, Name: eMBClose, Type: None
2025-03-13 17:14:18,999 - my_text.py:110  -   Address: 0x402271, Name: eMBEnable, Type: None
2025-03-13 17:14:18,999 - my_text.py:110  -   Address: 0x4022AC, Name: eMBDisable, Type: None
2025-03-13 17:14:18,999 - my_text.py:110  -   Address: 0x4022FA, Name: eMBPoll, Type: None
2025-03-13 17:14:18,999 - my_text.py:110  -   Address: 0x402500, Name: eMBTCPDoInit, Type: None
2025-03-13 17:14:18,999 - my_text.py:110  -   Address: 0x402530, Name: eMBTCPStart, Type: None
2025-03-13 17:14:18,999 - my_text.py:110  -   Address: 0x402537, Name: eMBTCPStop, Type: None
2025-03-13 17:14:18,999 - my_text.py:110  -   Address: 0x402543, Name: eMBTCPReceive, Type: None
2025-03-13 17:14:18,999 - my_text.py:110  -   Address: 0x4025FF, Name: eMBTCPSend, Type: None
2025-03-13 17:14:18,999 - my_text.py:110  -   Address: 0x40267B, Name: eMBFuncReadCoils, Type: None
2025-03-13 17:14:18,999 - my_text.py:110  -   Address: 0x4027E9, Name: eMBFuncWriteCoil, Type: None
2025-03-13 17:14:18,999 - my_text.py:110  -   Address: 0x4028F7, Name: eMBFuncWriteMultipleCoils, Type: None
2025-03-13 17:14:18,999 - my_text.py:110  -   Address: 0x402A15, Name: eMBFuncWriteHoldingRegister, Type: None
2025-03-13 17:14:19,000 - my_text.py:110  -   Address: 0x402AAC, Name: eMBFuncWriteMultipleHoldingRegister, Type: None
2025-03-13 17:14:19,000 - my_text.py:110  -   Address: 0x402BA5, Name: eMBFuncReadHoldingRegister, Type: None
2025-03-13 17:14:19,000 - my_text.py:110  -   Address: 0x402CF0, Name: eMBFuncReadWriteMultipleHoldingRegister, Type: None
2025-03-13 17:14:19,000 - my_text.py:110  -   Address: 0x402EEC, Name: eMBFuncReadInputRegister, Type: None
2025-03-13 17:14:19,000 - my_text.py:110  -   Address: 0x403034, Name: eMBSetSlaveID, Type: None
2025-03-13 17:14:19,000 - my_text.py:110  -   Address: 0x40310B, Name: eMBFuncReportSlaveID, Type: None
2025-03-13 17:14:19,000 - my_text.py:110  -   Address: 0x403155, Name: eMBFuncReadDiscreteInputs, Type: None
2025-03-13 17:14:19,000 - my_text.py:110  -   Address: 0x4032C0, Name: xMBUtilSetBits, Type: None
2025-03-13 17:14:19,000 - my_text.py:110  -   Address: 0x4033E1, Name: xMBUtilGetBits, Type: None
2025-03-13 17:14:19,000 - my_text.py:110  -   Address: 0x403484, Name: prveMBError2Exception, Type: None
2025-03-13 17:14:19,000 - my_text.py:110  -   Address: 0x4034D0, Name: __libc_csu_init, Type: None
2025-03-13 17:14:19,000 - my_text.py:110  -   Address: 0x403540, Name: __libc_csu_fini, Type: None
2025-03-13 17:14:19,000 - my_text.py:110  -   Address: 0x403548, Name: .term_proc, Type: Unknown
2025-03-13 17:14:19,000 - my_text.py:110  -   Address: 0x404000, Name: _IO_stdin_used, Type: Unknown
2025-03-13 17:14:19,001 - my_text.py:110  -   Address: 0x404008, Name: aFreemodbus, Type: Unknown
2025-03-13 17:14:19,001 - my_text.py:110  -   Address: 0x404018, Name: format, Type: None
2025-03-13 17:14:19,001 - my_text.py:110  -   Address: 0x404040, Name: s, Type: None
2025-03-13 17:14:19,001 - my_text.py:110  -   Address: 0x404068, Name: aCanTStartProto, Type: None
2025-03-13 17:14:19,001 - my_text.py:110  -   Address: 0x404096, Name: aProtocolStackI, Type: None
2025-03-13 17:14:19,001 - my_text.py:110  -   Address: 0x4040B2, Name: aProtocolStackI_0, Type: None
2025-03-13 17:14:19,001 - my_text.py:110  -   Address: 0x4040D0, Name: aProtocolStackI_1, Type: None
2025-03-13 17:14:19,001 - my_text.py:110  -   Address: 0x4040F8, Name: aFreemodbusDemo, Type: None
2025-03-13 17:14:19,001 - my_text.py:110  -   Address: 0x404120, Name: aDDisableProtoc, Type: None
2025-03-13 17:14:19,001 - my_text.py:110  -   Address: 0x404148, Name: aEEnabledThePro, Type: None
2025-03-13 17:14:19,001 - my_text.py:110  -   Address: 0x404170, Name: aSShowCurrentSt, Type: None
2025-03-13 17:14:19,002 - my_text.py:110  -   Address: 0x40418F, Name: aQQuitApplicati, Type: None
2025-03-13 17:14:19,002 - my_text.py:110  -   Address: 0x4041AC, Name: aHThisInformati, Type: None
2025-03-13 17:14:19,002 - my_text.py:110  -   Address: 0x4041D0, Name: aCopyright2007S, Type: None
2025-03-13 17:14:19,002 - my_text.py:110  -   Address: 0x4041FE, Name: aIllegalCommand, Type: None
2025-03-13 17:14:19,002 - my_text.py:110  -   Address: 0x404218, Name: jpt_401346, Type: Unknown
2025-03-13 17:14:19,002 - my_text.py:110  -   Address: 0x404298, Name: aSS, Type: None
2025-03-13 17:14:19,002 - my_text.py:110  -   Address: 0x4042A1, Name: aDebug, Type: Unknown
2025-03-13 17:14:19,002 - my_text.py:110  -   Address: 0x4042A7, Name: aInfo, Type: Unknown
2025-03-13 17:14:19,002 - my_text.py:110  -   Address: 0x4042AC, Name: aWarn, Type: Unknown
2025-03-13 17:14:19,002 - my_text.py:110  -   Address: 0x4042B1, Name: aError, Type: Unknown
2025-03-13 17:14:19,002 - my_text.py:110  -   Address: 0x4042B8, Name: aCreateSocketFa, Type: Unknown
2025-03-13 17:14:19,002 - my_text.py:110  -   Address: 0x4042D0, Name: aBindSocketFail, Type: Unknown
2025-03-13 17:14:19,002 - my_text.py:110  -   Address: 0x4042E6, Name: aListenSocketFa, Type: Unknown
2025-03-13 17:14:19,002 - my_text.py:110  -   Address: 0x404300, Name: aCanTAcceptNewC, Type: Unknown
2025-03-13 17:14:19,002 - my_text.py:110  -   Address: 0x404338, Name: file, Type: None
2025-03-13 17:14:19,002 - my_text.py:110  -   Address: 0x404359, Name: assertion, Type: None
2025-03-13 17:14:19,002 - my_text.py:110  -   Address: 0x404368, Name: __PRETTY_FUNCTION__.2785, Type: None
2025-03-13 17:14:19,002 - my_text.py:110  -   Address: 0x404378, Name: __GNU_EH_FRAME_HDR, Type: Unknown
2025-03-13 17:14:19,003 - my_text.py:110  -   Address: 0x404C44, Name: __FRAME_END__, Type: Unknown
2025-03-13 17:14:19,003 - my_text.py:110  -   Address: 0x405DF8, Name: __frame_dummy_init_array_entry, Type: Unknown
2025-03-13 17:14:19,003 - my_text.py:110  -   Address: 0x405E00, Name: __do_global_dtors_aux_fini_array_entry, Type: Unknown
2025-03-13 17:14:19,003 - my_text.py:110  -   Address: 0x405E08, Name: __JCR_LIST__, Type: Unknown
2025-03-13 17:14:19,003 - my_text.py:110  -   Address: 0x405E10, Name: _DYNAMIC, Type: Unknown
2025-03-13 17:14:19,003 - my_text.py:110  -   Address: 0x405FF0, Name: __libc_start_main_ptr, Type: Unknown
2025-03-13 17:14:19,003 - my_text.py:110  -   Address: 0x405FF8, Name: __gmon_start___ptr, Type: Unknown
2025-03-13 17:14:19,003 - my_text.py:110  -   Address: 0x406000, Name: _GLOBAL_OFFSET_TABLE_, Type: Unknown
2025-03-13 17:14:19,003 - my_text.py:110  -   Address: 0x4060E0, Name: __data_start, Type: Unknown
2025-03-13 17:14:19,003 - my_text.py:110  -   Address: 0x4060E8, Name: __dso_handle, Type: Unknown
2025-03-13 17:14:19,003 - my_text.py:110  -   Address: 0x4060F0, Name: usRegInputStart, Type: USHORT
2025-03-13 17:14:19,003 - my_text.py:110  -   Address: 0x4060F2, Name: usRegHoldingStart, Type: USHORT
2025-03-13 17:14:19,003 - my_text.py:110  -   Address: 0x406100, Name: arszLevel2Str.2935, Type: None
2025-03-13 17:14:19,003 - my_text.py:110  -   Address: 0x406120, Name: xClientSocket, Type: SOCKET
2025-03-13 17:14:19,003 - my_text.py:110  -   Address: 0x406140, Name: eMBState, Type: None
2025-03-13 17:14:19,003 - my_text.py:110  -   Address: 0x406160, Name: xFuncHandlers, Type: None
2025-03-13 17:14:19,003 - my_text.py:110  -   Address: 0x406260, Name: __bss_start, Type: None
2025-03-13 17:14:19,003 - my_text.py:110  -   Address: 0x406268, Name: completed.7594, Type: Unknown
2025-03-13 17:14:19,004 - my_text.py:110  -   Address: 0x406280, Name: usRegInputBuf, Type: None
2025-03-13 17:14:19,004 - my_text.py:110  -   Address: 0x4062A0, Name: usRegHoldingBuf, Type: None
2025-03-13 17:14:19,004 - my_text.py:110  -   Address: 0x4063C0, Name: xLock, Type: pthread_mutex_t
2025-03-13 17:14:19,004 - my_text.py:110  -   Address: 0x4063E8, Name: ePollThreadState, Type: ThreadState
2025-03-13 17:14:19,004 - my_text.py:110  -   Address: 0x4063EC, Name: eQueuedEvent, Type: eMBEventType
2025-03-13 17:14:19,004 - my_text.py:110  -   Address: 0x4063F0, Name: xEventInQueue, Type: None
2025-03-13 17:14:19,004 - my_text.py:110  -   Address: 0x406400, Name: allset, Type: fd_set
2025-03-13 17:14:19,004 - my_text.py:110  -   Address: 0x406480, Name: aucTCPBuf, Type: None
2025-03-13 17:14:19,004 - my_text.py:110  -   Address: 0x406588, Name: usTCPBufPos, Type: USHORT
2025-03-13 17:14:19,004 - my_text.py:110  -   Address: 0x40658A, Name: usTCPFrameBytesLeft, Type: USHORT
2025-03-13 17:14:19,004 - my_text.py:110  -   Address: 0x406590, Name: ucMBAddress, Type: UCHAR
2025-03-13 17:14:19,004 - my_text.py:110  -   Address: 0x406594, Name: eMBCurrentMode, Type: eMBMode
2025-03-13 17:14:19,004 - my_text.py:110  -   Address: 0x406598, Name: peMBFrameSendCur, Type: peMBFrameSend
2025-03-13 17:14:19,004 - my_text.py:110  -   Address: 0x4065A0, Name: pvMBFrameStartCur, Type: pvMBFrameStart
2025-03-13 17:14:19,004 - my_text.py:110  -   Address: 0x4065A8, Name: pvMBFrameStopCur, Type: pvMBFrameStop
2025-03-13 17:14:19,004 - my_text.py:110  -   Address: 0x4065B0, Name: peMBFrameReceiveCur, Type: peMBFrameReceive
2025-03-13 17:14:19,004 - my_text.py:110  -   Address: 0x4065B8, Name: pvMBFrameCloseCur, Type: pvMBFrameClose
2025-03-13 17:14:19,005 - my_text.py:110  -   Address: 0x4065C0, Name: ucRcvAddress.2896, Type: UCHAR
2025-03-13 17:14:19,005 - my_text.py:110  -   Address: 0x4065C8, Name: ucMBFrame.2895, Type: None
2025-03-13 17:14:19,005 - my_text.py:110  -   Address: 0x4065D0, Name: usLength.2898, Type: USHORT
2025-03-13 17:14:19,005 - my_text.py:110  -   Address: 0x4065D2, Name: ucFunctionCode.2897, Type: UCHAR
2025-03-13 17:14:19,005 - my_text.py:110  -   Address: 0x4065D4, Name: eException.2899, Type: eMBException
2025-03-13 17:14:19,005 - my_text.py:110  -   Address: 0x4065E0, Name: ucMBSlaveID, Type: None
2025-03-13 17:14:19,005 - my_text.py:110  -   Address: 0x406600, Name: usMBSlaveIDLen, Type: USHORT
2025-03-13 17:14:19,005 - my_text.py:110  -   Address: 0x406604, Name: xListenSocket, Type: SOCKET
2025-03-13 17:14:19,005 - my_text.py:110  -   Address: 0x406608, Name: pxMBFrameCBByteReceived, Type: None
2025-03-13 17:14:19,005 - my_text.py:110  -   Address: 0x406610, Name: pxMBFrameCBReceiveFSMCur, Type: None
2025-03-13 17:14:19,005 - my_text.py:110  -   Address: 0x406618, Name: pxMBFrameCBTransmitterEmpty, Type: None
2025-03-13 17:14:19,005 - my_text.py:110  -   Address: 0x406620, Name: pxMBFrameCBTransmitFSMCur, Type: None
2025-03-13 17:14:19,005 - my_text.py:110  -   Address: 0x406628, Name: pxMBPortCBTimerExpired, Type: None
2025-03-13 17:14:19,005 - my_text.py:110  -   Address: 0x406630, Name: _end, Type: Unknown
2025-03-13 17:14:19,005 - my_text.py:110  -   Address: 0x406638, Name: recv, Type: None
2025-03-13 17:14:19,005 - my_text.py:110  -   Address: 0x406640, Name: pthread_create, Type: None
2025-03-13 17:14:19,005 - my_text.py:110  -   Address: 0x406648, Name: __errno_location, Type: None
2025-03-13 17:14:19,005 - my_text.py:110  -   Address: 0x406650, Name: puts, Type: None
2025-03-13 17:14:19,006 - my_text.py:110  -   Address: 0x406658, Name: __stack_chk_fail, Type: Unknown
2025-03-13 17:14:19,006 - my_text.py:110  -   Address: 0x406660, Name: htons, Type: None
2025-03-13 17:14:19,006 - my_text.py:110  -   Address: 0x406668, Name: send, Type: None
2025-03-13 17:14:19,006 - my_text.py:110  -   Address: 0x406670, Name: printf, Type: None
2025-03-13 17:14:19,006 - my_text.py:110  -   Address: 0x406678, Name: __assert_fail, Type: None
2025-03-13 17:14:19,006 - my_text.py:110  -   Address: 0x406680, Name: htonl, Type: None
2025-03-13 17:14:19,006 - my_text.py:110  -   Address: 0x406688, Name: memset, Type: None
2025-03-13 17:14:19,006 - my_text.py:110  -   Address: 0x406690, Name: close, Type: None
2025-03-13 17:14:19,006 - my_text.py:110  -   Address: 0x406698, Name: __libc_start_main, Type: None
2025-03-13 17:14:19,006 - my_text.py:110  -   Address: 0x4066A0, Name: getchar, Type: None
2025-03-13 17:14:19,006 - my_text.py:110  -   Address: 0x4066A8, Name: fprintf, Type: None
2025-03-13 17:14:19,006 - my_text.py:110  -   Address: 0x4066B0, Name: memcpy, Type: None
2025-03-13 17:14:19,006 - my_text.py:110  -   Address: 0x4066B8, Name: select, Type: None
2025-03-13 17:14:19,006 - my_text.py:110  -   Address: 0x4066C0, Name: pthread_mutex_unlock, Type: None
2025-03-13 17:14:19,006 - my_text.py:110  -   Address: 0x4066C8, Name: listen, Type: None
2025-03-13 17:14:19,006 - my_text.py:110  -   Address: 0x4066D0, Name: bind, Type: None
2025-03-13 17:14:19,006 - my_text.py:110  -   Address: 0x4066D8, Name: accept, Type: None
2025-03-13 17:14:19,007 - my_text.py:110  -   Address: 0x4066E0, Name: fwrite, Type: None
2025-03-13 17:14:19,007 - my_text.py:110  -   Address: 0x4066E8, Name: pthread_mutex_lock, Type: None
2025-03-13 17:14:19,007 - my_text.py:110  -   Address: 0x4066F0, Name: usleep, Type: None
2025-03-13 17:14:19,007 - my_text.py:110  -   Address: 0x4066F8, Name: socket, Type: None
2025-03-13 17:14:19,019 - my_text.py:271  - The offset address of the function main is: 0x4012b6
2025-03-13 17:14:19,019 - my_text.py:274  - The base address of the function main is: 0x4012b6
2025-03-13 17:14:19,086 - my_text.py:313  - Extracted information: {'0:25cc00000006ff0400300028': {'1': {4: {'0x401da4': '0x406484 0x0', '0x401dab': '0x406484 0x0', '0x401dae': '0x0', '0x401db1': '0x406484 0x0', '0x401dc2': '0x0', '0x401dd3': '0x406484 0x6', '0x401dda': '0x6', '0x401ddd': '0xc;0xc', '0x401de8': '0x406484 0x6', '0x401def': '0x6;0x7', '0x401df1': '0x406484 0xffffffff', '0x401df3': '0xffffffff', '0x401df6': '0x406484 0x5', '0x401cfd': '0x406484 0x5', '0x401d04': '0x406484 0x5', '0x401d7d': '0x406484 0x5', '0x401d8a': '0x5;0x5', '0x401d8c': '0x406484 0x0', '0x401e0c': '0x406484 0x6', '0x401e13': '0x6', '0x401e16': '0xc;0xc'}, 5: {'0x401db8': '0x406485 0x6', '0x401dbf': '0x406485 0x6', '0x401dc2': '0x0', '0x401dd3': '0x406484 0x6', '0x401dda': '0x6', '0x401ddd': '0xc;0xc', '0x401de8': '0x406484 0x6', '0x401def': '0x6;0x7', '0x401df1': '0x406484 0xffffffff', '0x401df3': '0xffffffff', '0x401df6': '0x406484 0x5', '0x401cfd': '0x406484 0x5', '0x401d04': '0x406484 0x5', '0x401d7d': '0x406484 0x5', '0x401d8a': '0x5;0x5', '0x401d8c': '0x406484 0x0', '0x401e0c': '0x406484 0x6', '0x401e13': '0x6', '0x401e16': '0xc;0xc'}, 2: {'0x40258c': '0x406482 0x0', '0x40258f': '0x406482 0x0', '0x402592': '0x0', '0x402595': '0x406482 0x0', '0x4025a7': '0x0', '0x4025ab': '0x0'}, 3: {'0x4025a1': '0x406483 0x0', '0x4025a4': '0x406483 0x0', '0x4025a7': '0x0', '0x4025ab': '0x0'}, 7: {'0x4023ba': '0x406487 0x4', '0x4023bd': '0x406487 0x4', '0x4023fe': '0x406487 0x4', '0x402405': '0x4;0x4', '0x402481': '0x406487 0x4', '0x402488': '0x4', '0x40248b': '0x406487 0x84'}, 8: {'0x402f1c': '0x406488 0x0', '0x402f1f': '0x406488 0x0', '0x402f22': '0x0', '0x402f25': '0x406488 0x0', '0x402f37': '0x0', '0x402f3b': '0x406488 0x30', '0x402f3f': '0x30', '0x402f42': '0x406488 0x31', '0x402fdd': '0x406488 0x31', '0x402fe5': '0x406488 0x31', '0x401569': '0x406488 0x31', '0x40156d': '0x406488 0x31', '0x40157c': '0x31'}, 9: {'0x402f31': '0x406489 0x30', '0x402f34': '0x406489 0x30', '0x402f37': '0x0', '0x402f3b': '0x406488 0x30', '0x402f3f': '0x30', '0x402f42': '0x406488 0x31', '0x402fdd': '0x406488 0x31', '0x402fe5': '0x406488 0x31', '0x401569': '0x406488 0x31', '0x40156d': '0x406488 0x31', '0x40157c': '0x31'}, 10: {'0x402f4e': '0x40648a 0x0', '0x402f51': '0x40648a 0x0', '0x402f54': '0x0', '0x402f57': '0x40648a 0x0', '0x402f69': '0x0', '0x402f6d': '0x28', '0x402f78': '0x28', '0x402fc0': '0x40648a 0x28', '0x402fc4': '0x28;0x28', '0x402fd9': '0x40648a 0x28', '0x40156b': '0x40648a 0x28', '0x401571': '0x40648a 0x28'}, 11: {'0x402f63': '0x40648b 0x28', '0x402f66': '0x40648b 0x28', '0x402f69': '0x0', '0x402f6d': '0x28', '0x402f78': '0x28', '0x402fc0': '0x40648a 0x28', '0x402fc4': '0x28;0x28', '0x402fc6': '0x40648b 0x50', '0x402fd9': '0x40648a 0x28', '0x40156b': '0x40648a 0x28', '0x401571': '0x40648a 0x28'}}}, '1:011100000006ff0300020008': {'1': {4: {'0x401da4': '0x406484 0x0', '0x401dab': '0x406484 0x0', '0x401dae': '0x0', '0x401db1': '0x406484 0x0', '0x401dc2': '0x0', '0x401dd3': '0x406484 0x6', '0x401dda': '0x6', '0x401ddd': '0xc;0xc', '0x401de8': '0x406484 0x6', '0x401def': '0x6;0x7', '0x401df1': '0x406484 0xffffffff', '0x401df3': '0xffffffff', '0x401df6': '0x406484 0x5', '0x401cfd': '0x406484 0x5', '0x401d04': '0x406484 0x5', '0x401d7d': '0x406484 0x5', '0x401d8a': '0x5;0x5', '0x401d8c': '0x406484 0x0', '0x401e0c': '0x406484 0x6', '0x401e13': '0x6', '0x401e16': '0xc;0xc'}, 5: {'0x401db8': '0x406485 0x6', '0x401dbf': '0x406485 0x6', '0x401dc2': '0x0', '0x401dd3': '0x406484 0x6', '0x401dda': '0x6', '0x401ddd': '0xc;0xc', '0x401de8': '0x406484 0x6', '0x401def': '0x6;0x7', '0x401df1': '0x406484 0xffffffff', '0x401df3': '0xffffffff', '0x401df6': '0x406484 0x5', '0x401cfd': '0x406484 0x5', '0x401d04': '0x406484 0x5', '0x401d7d': '0x406484 0x5', '0x401d8a': '0x5;0x5', '0x401d8c': '0x406484 0x0', '0x401e0c': '0x406484 0x6', '0x401e13': '0x6', '0x401e16': '0xc;0xc'}, 2: {'0x40258c': '0x406482 0x0', '0x40258f': '0x406482 0x0', '0x402592': '0x0', '0x402595': '0x406482 0x0', '0x4025a7': '0x0', '0x4025ab': '0x0'}, 3: {'0x4025a1': '0x406483 0x0', '0x4025a4': '0x406483 0x0', '0x4025a7': '0x0', '0x4025ab': '0x0'}, 7: {'0x4023ba': '0x406487 0x3', '0x4023bd': '0x406487 0x3', '0x4023fe': '0x406487 0x3', '0x402405': '0x3;0x3', '0x402481': '0x406487 0x3', '0x402488': '0x3', '0x40248b': '0x406487 0x83'}, 8: {'0x402bd5': '0x406488 0x0', '0x402bd8': '0x406488 0x0', '0x402bdb': '0x0', '0x402bde': '0x406488 0x0', '0x402bf0': '0x0', '0x402bf4': '0x406488 0x2', '0x402bf8': '0x2', '0x402bfb': '0x406488 0x3', '0x402c96': '0x406488 0x3', '0x401619': '0x406488 0x3', '0x401628': '0x3'}, 9: {'0x402bea': '0x406489 0x2', '0x402bed': '0x406489 0x2', '0x402bf0': '0x0', '0x402bf4': '0x406488 0x2', '0x402bf8': '0x2', '0x402bfb': '0x406488 0x3', '0x402c96': '0x406488 0x3', '0x401619': '0x406488 0x3', '0x401628': '0x3'}, 10: {'0x402c07': '0x40648a 0x0', '0x402c0a': '0x40648a 0x0', '0x402c0d': '0x0', '0x402c10': '0x40648a 0x0', '0x402c22': '0x0', '0x402c26': '0x8', '0x402c31': '0x8', '0x402c79': '0x40648a 0x8', '0x402c7d': '0x8;0x8', '0x402c92': '0x40648a 0x8', '0x401614': '0x40648a 0x8', '0x40161d': '0x40648a 0x8'}, 11: {'0x402c1c': '0x40648b 0x8', '0x402c1f': '0x40648b 0x8', '0x402c22': '0x0', '0x402c26': '0x8', '0x402c31': '0x8', '0x402c79': '0x40648a 0x8', '0x402c7d': '0x8;0x8', '0x402c7f': '0x40648b 0x10', '0x402c92': '0x40648a 0x8', '0x401614': '0x40648a 0x8', '0x40161d': '0x40648a 0x8'}}}, '2:000100000009ff100001000102000a': {'1': {4: {'0x401da4': '0x406484 0x0', '0x401dab': '0x406484 0x0', '0x401dae': '0x0', '0x401db1': '0x406484 0x0', '0x401dc2': '0x0', '0x401dd3': '0x406484 0x9', '0x401dda': '0x9', '0x401ddd': '0xf;0xf', '0x401de8': '0x406484 0x9', '0x401def': '0x9;0x7', '0x401df1': '0x406484 0x2', '0x401df3': '0x2', '0x401df6': '0x406484 0x8', '0x401cfd': '0x406484 0x8', '0x401d04': '0x406484 0x8', '0x401d7d': '0x406484 0x8', '0x401d8a': '0x8;0x8', '0x401d8c': '0x406484 0x0', '0x401e0c': '0x406484 0x9', '0x401e13': '0x9', '0x401e16': '0xf;0xf'}, 5: {'0x401db8': '0x406485 0x9', '0x401dbf': '0x406485 0x9', '0x401dc2': '0x0', '0x401dd3': '0x406484 0x9', '0x401dda': '0x9', '0x401ddd': '0xf;0xf', '0x401de8': '0x406484 0x9', '0x401def': '0x9;0x7', '0x401df1': '0x406484 0x2', '0x401df3': '0x2', '0x401df6': '0x406484 0x8', '0x401cfd': '0x406484 0x8', '0x401d04': '0x406484 0x8', '0x401d7d': '0x406484 0x8', '0x401d8a': '0x8;0x8', '0x401d8c': '0x406484 0x0', '0x401e0c': '0x406484 0x9', '0x401e13': '0x9', '0x401e16': '0xf;0xf'}, 2: {'0x40258c': '0x406482 0x0', '0x40258f': '0x406482 0x0', '0x402592': '0x0', '0x402595': '0x406482 0x0', '0x4025a7': '0x0', '0x4025ab': '0x0'}, 3: {'0x4025a1': '0x406483 0x0', '0x4025a4': '0x406483 0x0', '0x4025a7': '0x0', '0x4025ab': '0x0'}, 7: {'0x4023ba': '0x406487 0x10', '0x4023bd': '0x406487 0x10', '0x4023fe': '0x406487 0x10', '0x402405': '0x10;0x10', '0x402481': '0x406487 0x10', '0x402488': '0x10', '0x40248b': '0x406487 0x90'}, 8: {'0x402adc': '0x406488 0x0', '0x402adf': '0x406488 0x0', '0x402ae2': '0x0', '0x402ae5': '0x406488 0x0', '0x402af7': '0x0', '0x402afb': '0x406488 0x1', '0x402aff': '0x1', '0x402b02': '0x406488 0x2', '0x402b55': '0x406488 0x2', '0x402b66': '0x406488 0x2', '0x401619': '0x406488 0x2', '0x401628': '0x2'}, 9: {'0x402af1': '0x406489 0x1', '0x402af4': '0x406489 0x1', '0x402af7': '0x0', '0x402afb': '0x406488 0x1', '0x402aff': '0x1', '0x402b02': '0x406488 0x2', '0x402b55': '0x406488 0x2', '0x402b66': '0x406488 0x2', '0x401619': '0x406488 0x2', '0x401628': '0x2'}, 10: {'0x402b0e': '0x40648a 0x0', '0x402b11': '0x40648a 0x0', '0x402b14': '0x0', '0x402b17': '0x40648a 0x0', '0x402b29': '0x0', '0x402b38': '0x1', '0x402b3f': '0x1', '0x402b46': '0x40648a 0x1', '0x402b4a': '0x1;0x1', '0x402b51': '0x40648a 0x1', '0x401614': '0x40648a 0x1', '0x40161d': '0x40648a 0x1'}, 11: {'0x402b23': '0x40648b 0x1', '0x402b26': '0x40648b 0x1', '0x402b29': '0x0', '0x402b38': '0x1', '0x402b3f': '0x1', '0x402b46': '0x40648a 0x1', '0x402b4a': '0x1;0x1', '0x402b4c': '0x2;0x2', '0x402b51': '0x40648a 0x1', '0x401614': '0x40648a 0x1', '0x40161d': '0x40648a 0x1'}, 12: {'0x402b31': '0x40648c 0x2', '0x402b35': '0x40648c 0x2', '0x402b4c': '0x2;0x2'}}}, '3:000100000006ff050000ff00': {'1': {4: {'0x401da4': '0x406484 0x0', '0x401dab': '0x406484 0x0', '0x401dae': '0x0', '0x401db1': '0x406484 0x0', '0x401dc2': '0x0', '0x401dd3': '0x406484 0x6', '0x401dda': '0x6', '0x401ddd': '0xc;0xc', '0x401de8': '0x406484 0x6', '0x401def': '0x6;0x7', '0x401df1': '0x406484 0xffffffff', '0x401df3': '0xffffffff', '0x401df6': '0x406484 0x5', '0x401cfd': '0x406484 0x5', '0x401d04': '0x406484 0x5', '0x401d7d': '0x406484 0x5', '0x401d8a': '0x5;0x5', '0x401d8c': '0x406484 0x0', '0x401e0c': '0x406484 0x6', '0x401e13': '0x6', '0x401e16': '0xc;0xc'}, 5: {'0x401db8': '0x406485 0x6', '0x401dbf': '0x406485 0x6', '0x401dc2': '0x0', '0x401dd3': '0x406484 0x6', '0x401dda': '0x6', '0x401ddd': '0xc;0xc', '0x401de8': '0x406484 0x6', '0x401def': '0x6;0x7', '0x401df1': '0x406484 0xffffffff', '0x401df3': '0xffffffff', '0x401df6': '0x406484 0x5', '0x401cfd': '0x406484 0x5', '0x401d04': '0x406484 0x5', '0x401d7d': '0x406484 0x5', '0x401d8a': '0x5;0x5', '0x401d8c': '0x406484 0x0', '0x401e0c': '0x406484 0x6', '0x401e13': '0x6', '0x401e16': '0xc;0xc'}, 2: {'0x40258c': '0x406482 0x0', '0x40258f': '0x406482 0x0', '0x402592': '0x0', '0x402595': '0x406482 0x0', '0x4025a7': '0x0', '0x4025ab': '0x0'}, 3: {'0x4025a1': '0x406483 0x0', '0x4025a4': '0x406483 0x0', '0x4025a7': '0x0', '0x4025ab': '0x0'}, 7: {'0x4023ba': '0x406487 0x5', '0x4023bd': '0x406487 0x5', '0x4023fe': '0x406487 0x5', '0x402405': '0x5;0x5', '0x402481': '0x406487 0x5', '0x402488': '0x5', '0x40248b': '0x406487 0x85'}, 8: {'0x402828': '0x406488 0x0', '0x40282b': '0x406488 0x0', '0x40282e': '0x0', '0x402831': '0x406488 0x0', '0x402843': '0x0', '0x402847': '0x406488 0x0', '0x40284b': '0x0', '0x40284e': '0x406488 0x1', '0x40289c': '0x406488 0x1', '0x40174c': '0x406488 0x1'}, 9: {'0x40283d': '0x406489 0x0', '0x402840': '0x406489 0x0', '0x402843': '0x0', '0x402847': '0x406488 0x0', '0x40284b': '0x0', '0x40284e': '0x406488 0x1', '0x40289c': '0x406488 0x1', '0x40174c': '0x406488 0x1'}, 11: {'0x40285a': '0x40648b 0x0', '0x40285d': '0x0;0x0'}, 10: {'0x402869': '0x40648a 0xff', '0x40286c': '0xff', '0x40288b': '0x40648a 0xff', '0x40288e': '0xff'}}}, '4:000100000008ff0f000100010101': {'1': {4: {'0x401da4': '0x406484 0x0', '0x401dab': '0x406484 0x0', '0x401dae': '0x0', '0x401db1': '0x406484 0x0', '0x401dc2': '0x0', '0x401dd3': '0x406484 0x8', '0x401dda': '0x8', '0x401ddd': '0xe;0xe', '0x401de8': '0x406484 0x8', '0x401def': '0x8;0x7', '0x401df1': '0x406484 0x1', '0x401df3': '0x1', '0x401df6': '0x406484 0x7', '0x401cfd': '0x406484 0x7', '0x401d04': '0x406484 0x7', '0x401d7d': '0x406484 0x7', '0x401d8a': '0x7;0x7', '0x401d8c': '0x406484 0x0', '0x401e0c': '0x406484 0x8', '0x401e13': '0x8', '0x401e16': '0xe;0xe'}, 5: {'0x401db8': '0x406485 0x8', '0x401dbf': '0x406485 0x8', '0x401dc2': '0x0', '0x401dd3': '0x406484 0x8', '0x401dda': '0x8', '0x401ddd': '0xe;0xe', '0x401de8': '0x406484 0x8', '0x401def': '0x8;0x7', '0x401df1': '0x406484 0x1', '0x401df3': '0x1', '0x401df6': '0x406484 0x7', '0x401cfd': '0x406484 0x7', '0x401d04': '0x406484 0x7', '0x401d7d': '0x406484 0x7', '0x401d8a': '0x7;0x7', '0x401d8c': '0x406484 0x0', '0x401e0c': '0x406484 0x8', '0x401e13': '0x8', '0x401e16': '0xe;0xe'}, 2: {'0x40258c': '0x406482 0x0', '0x40258f': '0x406482 0x0', '0x402592': '0x0', '0x402595': '0x406482 0x0', '0x4025a7': '0x0', '0x4025ab': '0x0'}, 3: {'0x4025a1': '0x406483 0x0', '0x4025a4': '0x406483 0x0', '0x4025a7': '0x0', '0x4025ab': '0x0'}, 7: {'0x4023ba': '0x406487 0xf', '0x4023bd': '0x406487 0xf', '0x4023fe': '0x406487 0xf', '0x402405': '0xf;0xf', '0x402481': '0x406487 0xf', '0x402488': '0xf', '0x40248b': '0x406487 0x8f'}, 8: {'0x402927': '0x406488 0x0', '0x40292a': '0x406488 0x0', '0x40292d': '0x0', '0x402930': '0x406488 0x0', '0x402942': '0x0', '0x402946': '0x406488 0x1', '0x40294a': '0x1', '0x40294d': '0x406488 0x2', '0x4029c5': '0x406488 0x2', '0x4029d6': '0x406488 0x2', '0x40174c': '0x406488 0x2'}, 9: {'0x40293c': '0x406489 0x1', '0x40293f': '0x406489 0x1', '0x402942': '0x0', '0x402946': '0x406488 0x1', '0x40294a': '0x1', '0x40294d': '0x406488 0x2', '0x4029c5': '0x406488 0x2', '0x4029d6': '0x406488 0x2', '0x40174c': '0x406488 0x2'}, 10: {'0x402959': '0x40648a 0x0', '0x40295c': '0x40648a 0x0', '0x40295f': '0x0', '0x402962': '0x40648a 0x0', '0x402974': '0x0', '0x402983': '0x40648a 0x1', '0x402987': '0x1', '0x40298a': '0x1;0x1', '0x40298e': '0x40648a 0x1', '0x402992': '0x1', '0x402996': '0x0', '0x4029a9': '0x1', '0x4029b0': '0x1', '0x4029c1': '0x40648a 0x1', '0x401747': '0x40648a 0x1', '0x401750': '0x40648a 0x1'}, 11: {'0x40296e': '0x40648b 0x1', '0x402971': '0x40648b 0x1', '0x402974': '0x0', '0x402983': '0x40648a 0x1', '0x402987': '0x1', '0x40298a': '0x1;0x1', '0x40298e': '0x40648a 0x1', '0x402992': '0x1', '0x402996': '0x0', '0x402999': '0x40648b 0x1', '0x4029a9': '0x1', '0x4029b0': '0x1', '0x4029b8': '0x40648b 0x1', '0x4029bc': '0x1;0x1', '0x4029c1': '0x40648a 0x1', '0x401747': '0x40648a 0x1', '0x401750': '0x40648a 0x1'}, 12: {'0x40297c': '0x40648c 0x1', '0x402980': '0x40648c 0x1', '0x4029bc': '0x1;0x1'}}}, '5:320600000006ff0100000006': {'1': {4: {'0x401da4': '0x406484 0x0', '0x401dab': '0x406484 0x0', '0x401dae': '0x0', '0x401db1': '0x406484 0x0', '0x401dc2': '0x0', '0x401dd3': '0x406484 0x6', '0x401dda': '0x6', '0x401ddd': '0xc;0xc', '0x401de8': '0x406484 0x6', '0x401def': '0x6;0x7', '0x401df1': '0x406484 0xffffffff', '0x401df3': '0xffffffff', '0x401df6': '0x406484 0x5', '0x401cfd': '0x406484 0x5', '0x401d04': '0x406484 0x5', '0x401d7d': '0x406484 0x5', '0x401d8a': '0x5;0x5', '0x401d8c': '0x406484 0x0', '0x401e0c': '0x406484 0x6', '0x401e13': '0x6', '0x401e16': '0xc;0xc'}, 5: {'0x401db8': '0x406485 0x6', '0x401dbf': '0x406485 0x6', '0x401dc2': '0x0', '0x401dd3': '0x406484 0x6', '0x401dda': '0x6', '0x401ddd': '0xc;0xc', '0x401de8': '0x406484 0x6', '0x401def': '0x6;0x7', '0x401df1': '0x406484 0xffffffff', '0x401df3': '0xffffffff', '0x401df6': '0x406484 0x5', '0x401cfd': '0x406484 0x5', '0x401d04': '0x406484 0x5', '0x401d7d': '0x406484 0x5', '0x401d8a': '0x5;0x5', '0x401d8c': '0x406484 0x0', '0x401e0c': '0x406484 0x6', '0x401e13': '0x6', '0x401e16': '0xc;0xc'}, 2: {'0x40258c': '0x406482 0x0', '0x40258f': '0x406482 0x0', '0x402592': '0x0', '0x402595': '0x406482 0x0', '0x4025a7': '0x0', '0x4025ab': '0x0'}, 3: {'0x4025a1': '0x406483 0x0', '0x4025a4': '0x406483 0x0', '0x4025a7': '0x0', '0x4025ab': '0x0'}, 7: {'0x4023ba': '0x406487 0x1', '0x4023bd': '0x406487 0x1', '0x4023fe': '0x406487 0x1', '0x402405': '0x1;0x1', '0x402481': '0x406487 0x1', '0x402488': '0x1', '0x40248b': '0x406487 0x81'}, 8: {'0x4026ab': '0x406488 0x0', '0x4026ae': '0x406488 0x0', '0x4026b1': '0x0', '0x4026b4': '0x406488 0x0', '0x4026c6': '0x0', '0x4026ca': '0x406488 0x0', '0x4026ce': '0x0', '0x4026d1': '0x406488 0x1', '0x402791': '0x406488 0x1', '0x40174c': '0x406488 0x1'}, 9: {'0x4026c0': '0x406489 0x0', '0x4026c3': '0x406489 0x0', '0x4026c6': '0x0', '0x4026ca': '0x406488 0x0', '0x4026ce': '0x0', '0x4026d1': '0x406488 0x1', '0x402791': '0x406488 0x1', '0x40174c': '0x406488 0x1'}, 10: {'0x4026dd': '0x40648a 0x0', '0x4026e0': '0x40648a 0x0', '0x4026e3': '0x0', '0x4026e6': '0x40648a 0x0', '0x4026f8': '0x0', '0x4026fc': '0x6', '0x402707': '0x6', '0x402744': '0x40648a 0x6', '0x402748': '0x6', '0x40274b': '0x6;0x6', '0x40274f': '0x40648a 0x6', '0x402753': '0x6', '0x402757': '0x0', '0x40278d': '0x40648a 0x6', '0x401747': '0x40648a 0x6', '0x401750': '0x40648a 0x6'}, 11: {'0x4026f2': '0x40648b 0x6', '0x4026f5': '0x40648b 0x6', '0x4026f8': '0x0', '0x4026fc': '0x6', '0x402707': '0x6', '0x402744': '0x40648a 0x6', '0x402748': '0x6', '0x40274b': '0x6;0x6', '0x40274f': '0x40648a 0x6', '0x402753': '0x6', '0x402757': '0x0', '0x40275a': '0x40648b 0x1', '0x402776': '0x40648b 0x1', '0x40277a': '0x40648b 0x1', '0x40278d': '0x40648a 0x6', '0x401747': '0x40648a 0x6', '0x401750': '0x40648a 0x6'}}}, '6:320800000006ff020000000a': {'1': {4: {'0x401da4': '0x406484 0x0', '0x401dab': '0x406484 0x0', '0x401dae': '0x0', '0x401db1': '0x406484 0x0', '0x401dc2': '0x0', '0x401dd3': '0x406484 0x6', '0x401dda': '0x6', '0x401ddd': '0xc;0xc', '0x401de8': '0x406484 0x6', '0x401def': '0x6;0x7', '0x401df1': '0x406484 0xffffffff', '0x401df3': '0xffffffff', '0x401df6': '0x406484 0x5', '0x401cfd': '0x406484 0x5', '0x401d04': '0x406484 0x5', '0x401d7d': '0x406484 0x5', '0x401d8a': '0x5;0x5', '0x401d8c': '0x406484 0x0', '0x401e0c': '0x406484 0x6', '0x401e13': '0x6', '0x401e16': '0xc;0xc'}, 5: {'0x401db8': '0x406485 0x6', '0x401dbf': '0x406485 0x6', '0x401dc2': '0x0', '0x401dd3': '0x406484 0x6', '0x401dda': '0x6', '0x401ddd': '0xc;0xc', '0x401de8': '0x406484 0x6', '0x401def': '0x6;0x7', '0x401df1': '0x406484 0xffffffff', '0x401df3': '0xffffffff', '0x401df6': '0x406484 0x5', '0x401cfd': '0x406484 0x5', '0x401d04': '0x406484 0x5', '0x401d7d': '0x406484 0x5', '0x401d8a': '0x5;0x5', '0x401d8c': '0x406484 0x0', '0x401e0c': '0x406484 0x6', '0x401e13': '0x6', '0x401e16': '0xc;0xc'}, 2: {'0x40258c': '0x406482 0x0', '0x40258f': '0x406482 0x0', '0x402592': '0x0', '0x402595': '0x406482 0x0', '0x4025a7': '0x0', '0x4025ab': '0x0'}, 3: {'0x4025a1': '0x406483 0x0', '0x4025a4': '0x406483 0x0', '0x4025a7': '0x0', '0x4025ab': '0x0'}, 7: {'0x4023ba': '0x406487 0x2', '0x4023bd': '0x406487 0x2', '0x4023fe': '0x406487 0x2', '0x402405': '0x2;0x2', '0x402481': '0x406487 0x2', '0x402488': '0x2', '0x40248b': '0x406487 0x82'}, 8: {'0x403185': '0x406488 0x0', '0x403188': '0x406488 0x0', '0x40318b': '0x0', '0x40318e': '0x406488 0x0', '0x4031a0': '0x0', '0x4031a4': '0x406488 0x0', '0x4031a8': '0x0', '0x4031ab': '0x406488 0x1', '0x40326b': '0x406488 0x1', '0x403273': '0x406488 0x1', '0x401763': '0x406488 0x1', '0x401767': '0x406488 0x1'}, 9: {'0x40319a': '0x406489 0x0', '0x40319d': '0x406489 0x0', '0x4031a0': '0x0', '0x4031a4': '0x406488 0x0', '0x4031a8': '0x0', '0x4031ab': '0x406488 0x1', '0x40326b': '0x406488 0x1', '0x403273': '0x406488 0x1', '0x401763': '0x406488 0x1', '0x401767': '0x406488 0x1'}, 10: {'0x4031b7': '0x40648a 0x0', '0x4031ba': '0x40648a 0x0', '0x4031bd': '0x0', '0x4031c0': '0x40648a 0x0', '0x4031d2': '0x0', '0x4031d6': '0xa', '0x4031e1': '0xa', '0x40321e': '0x40648a 0xa', '0x403222': '0xa', '0x403225': '0x2;0x2', '0x403229': '0x40648a 0xa', '0x40322d': '0xa', '0x403231': '0x1', '0x403267': '0x40648a 0xa', '0x401765': '0x40648a 0xa', '0x40176b': '0x40648a 0xa'}, 11: {'0x4031cc': '0x40648b 0xa', '0x4031cf': '0x40648b 0xa', '0x4031d2': '0x0', '0x4031d6': '0xa', '0x4031e1': '0xa', '0x40321e': '0x40648a 0xa', '0x403222': '0xa', '0x403225': '0x2;0x2', '0x403229': '0x40648a 0xa', '0x40322d': '0xa', '0x403231': '0x1', '0x403234': '0x40648b 0x2', '0x403250': '0x40648b 0x2', '0x403254': '0x40648b 0x2', '0x403267': '0x40648a 0xa', '0x401765': '0x40648a 0xa', '0x40176b': '0x40648a 0xa'}}}}
2025-03-13 17:14:19,089 - my_text.py:355  - Local variables for xMBPortTCPPool: {'usLength': {'start': 14, 'end': 15}, 'n': {'start': 16, 'end': 19}, '__d0': {'start': 20, 'end': 23}, '__d1': {'start': 24, 'end': 27}, 'ret': {'start': 28, 'end': 31}, 'tval': {'start': 32, 'end': 47}, 'fread': {'start': 48, 'end': 175}, 'var_8': {'start': 184, 'end': 191}, ' s': {'start': 192, 'end': 199}, ' r': {'start': 200, 'end': 207}}
2025-03-13 17:14:19,090 - my_text.py:153  - Pseudocode line:       while ( usTCPBufPos <= 6u );
2025-03-13 17:14:19,090 - my_text.py:153  - Pseudocode line:       while ( usTCPBufPos <= 6u );
2025-03-13 17:14:19,091 - my_text.py:153  - Pseudocode line:       while ( usTCPBufPos <= 6u );
2025-03-13 17:14:19,091 - my_text.py:153  - Pseudocode line:       usLength = _byteswap_ushort(*(unsigned __int16 *)&aucTCPBuf[4]);
2025-03-13 17:14:19,091 - my_text.py:153  - Pseudocode line:       usLength = _byteswap_ushort(*(unsigned __int16 *)&aucTCPBuf[4]);
2025-03-13 17:14:19,091 - my_text.py:153  - Pseudocode line:       if ( usTCPBufPos >= usLength + 6 )
2025-03-13 17:14:19,091 - my_text.py:153  - Pseudocode line:       if ( usTCPBufPos >= usLength + 6 )
2025-03-13 17:14:19,091 - my_text.py:153  - Pseudocode line:         break;
2025-03-13 17:14:19,092 - my_text.py:153  - Pseudocode line:         break;
2025-03-13 17:14:19,092 - my_text.py:153  - Pseudocode line:       usTCPFrameBytesLeft = usLength - usTCPBufPos + 6;
2025-03-13 17:14:19,092 - my_text.py:153  - Pseudocode line:       usTCPFrameBytesLeft = usLength - usTCPBufPos + 6;
2025-03-13 17:14:19,092 - my_text.py:153  - Pseudocode line:       usTCPFrameBytesLeft = usLength - usTCPBufPos + 6;
2025-03-13 17:14:19,092 - my_text.py:153  - Pseudocode line:       usTCPFrameBytesLeft = usLength - usTCPBufPos + 6;
2025-03-13 17:14:19,093 - my_text.py:153  - Pseudocode line:         while ( (fread.__fds_bits[xClientSocket / 64] & (1LL << (xClientSocket % 64))) == 0 );
2025-03-13 17:14:19,093 - my_text.py:153  - Pseudocode line:         ret = recv(xClientSocket, &aucTCPBuf[usTCPBufPos], usTCPFrameBytesLeft, 0);
2025-03-13 17:14:19,093 - my_text.py:153  - Pseudocode line:         usTCPBufPos += ret;
2025-03-13 17:14:19,093 - my_text.py:153  - Pseudocode line:         usTCPFrameBytesLeft -= ret;
2025-03-13 17:14:19,093 - my_text.py:153  - Pseudocode line:         usTCPFrameBytesLeft -= ret;
2025-03-13 17:14:19,094 - my_text.py:153  - Pseudocode line:   while ( usTCPBufPos != usLength + 6 );
2025-03-13 17:14:19,094 - my_text.py:153  - Pseudocode line:   while ( usTCPBufPos != usLength + 6 );
2025-03-13 17:14:19,094 - my_text.py:153  - Pseudocode line:   while ( usTCPBufPos != usLength + 6 );
2025-03-13 17:14:19,094 - my_text.py:153  - Pseudocode line:       usLength = _byteswap_ushort(*(unsigned __int16 *)&aucTCPBuf[4]);
2025-03-13 17:14:19,094 - my_text.py:153  - Pseudocode line:       usLength = _byteswap_ushort(*(unsigned __int16 *)&aucTCPBuf[4]);
2025-03-13 17:14:19,095 - my_text.py:355  - Local variables for eMBTCPReceive: {'pusLength': {'start': 8, 'end': 15}, 'ppucFrame': {'start': 16, 'end': 23}, 'pucRcvAddress': {'start': 24, 'end': 31}, 'usLength': {'start': 40, 'end': 41}, 'usPID': {'start': 42, 'end': 43}, 'eStatus': {'start': 44, 'end': 47}, 'pucMBTCPFrame': {'start': 48, 'end': 55}, 'var_8': {'start': 56, 'end': 63}, ' s': {'start': 64, 'end': 71}, ' r': {'start': 72, 'end': 79}}
2025-03-13 17:14:19,096 - my_text.py:153  - Pseudocode line:   usPID = pucMBTCPFrame[0][2] << 8;
2025-03-13 17:14:19,096 - my_text.py:153  - Pseudocode line:   usPID = pucMBTCPFrame[0][2] << 8;
2025-03-13 17:14:19,097 - my_text.py:153  - Pseudocode line:   usPID = pucMBTCPFrame[0][2] << 8;
2025-03-13 17:14:19,097 - my_text.py:153  - Pseudocode line:   usPID = pucMBTCPFrame[0][2] << 8;
2025-03-13 17:14:19,097 - my_text.py:153  - Pseudocode line:   usPID |= pucMBTCPFrame[0][3];
2025-03-13 17:14:19,097 - my_text.py:153  - Pseudocode line:   usPID |= pucMBTCPFrame[0][3];
2025-03-13 17:14:19,097 - my_text.py:153  - Pseudocode line:   usPID |= pucMBTCPFrame[0][3];
2025-03-13 17:14:19,097 - my_text.py:153  - Pseudocode line:   usPID |= pucMBTCPFrame[0][3];
2025-03-13 17:14:19,099 - my_text.py:355  - Local variables for eMBPoll: {'eEvent': {'start': 12, 'end': 15}, 'i': {'start': 16, 'end': 19}, 'eStatus': {'start': 20, 'end': 23}, 'var_8': {'start': 24, 'end': 31}, ' s': {'start': 32, 'end': 39}, ' r': {'start': 40, 'end': 47}}
2025-03-13 17:14:19,100 - my_text.py:153  - Pseudocode line:       ucFunctionCode_2897 = *ucMBFrame_2895;
2025-03-13 17:14:19,100 - my_text.py:153  - Pseudocode line:       ucFunctionCode_2897 = *ucMBFrame_2895;
2025-03-13 17:14:19,100 - my_text.py:153  - Pseudocode line:         if ( xFuncHandlers[i].ucFunctionCode == ucFunctionCode_2897 )
2025-03-13 17:14:19,101 - my_text.py:153  - Pseudocode line:         if ( xFuncHandlers[i].ucFunctionCode == ucFunctionCode_2897 )
2025-03-13 17:14:19,101 - my_text.py:153  - Pseudocode line:           *ucMBFrame_2895 = ucFunctionCode_2897 | 0x80;
2025-03-13 17:14:19,101 - my_text.py:153  - Pseudocode line:           *ucMBFrame_2895 = ucFunctionCode_2897 | 0x80;
2025-03-13 17:14:19,101 - my_text.py:153  - Pseudocode line:           *ucMBFrame_2895 = ucFunctionCode_2897 | 0x80;
2025-03-13 17:14:19,102 - my_text.py:355  - Local variables for eMBFuncReadInputRegister: {'usLen': {'start': 0, 'end': 7}, 'pucFrame': {'start': 8, 'end': 15}, 'usRegAddress': {'start': 28, 'end': 29}, 'usRegCount': {'start': 30, 'end': 31}, 'eStatus': {'start': 32, 'end': 35}, 'eRegStatus': {'start': 36, 'end': 39}, 'pucFrameCur': {'start': 40, 'end': 47}, ' s': {'start': 48, 'end': 55}, ' r': {'start': 56, 'end': 63}}
2025-03-13 17:14:19,103 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,103 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,103 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,103 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,104 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,104 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,104 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,104 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,104 - my_text.py:153  - Pseudocode line:   eRegStatus = eMBRegInputCB(pucFrame + 2, usRegAddress, usRegCount);
2025-03-13 17:14:19,104 - my_text.py:153  - Pseudocode line:   eRegStatus = eMBRegInputCB(pucFrame + 2, usRegAddress, usRegCount);
2025-03-13 17:14:19,105 - my_text.py:355  - Local variables for eMBRegInputCB: {'usNRegs': {'start': 0, 'end': 1}, 'usAddress': {'start': 4, 'end': 5}, 'pucRegBuffer': {'start': 8, 'end': 15}, 'eStatus': {'start': 24, 'end': 27}, 'iRegIndex': {'start': 28, 'end': 31}, ' s': {'start': 32, 'end': 39}, ' r': {'start': 40, 'end': 47}}
2025-03-13 17:14:19,105 - my_text.py:153  - Pseudocode line:   usNRegsa = usNRegs;
2025-03-13 17:14:19,105 - my_text.py:153  - Pseudocode line:   usNRegsa = usNRegs;
2025-03-13 17:14:19,106 - my_text.py:153  - Pseudocode line:   if ( usAddress <= 0x3E7u || usAddress + usNRegs > 1004 )
2025-03-13 17:14:19,106 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,106 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,106 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,106 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,106 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,106 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,106 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,107 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,107 - my_text.py:153  - Pseudocode line:   if ( !usRegCount || usRegCount > 0x7Cu )
2025-03-13 17:14:19,107 - my_text.py:153  - Pseudocode line:   pucFrame[1] = 2 * usRegCount;
2025-03-13 17:14:19,107 - my_text.py:153  - Pseudocode line:   pucFrame[1] = 2 * usRegCount;
2025-03-13 17:14:19,107 - my_text.py:153  - Pseudocode line:   eRegStatus = eMBRegInputCB(pucFrame + 2, usRegAddress, usRegCount);
2025-03-13 17:14:19,107 - my_text.py:153  - Pseudocode line:   usNRegsa = usNRegs;
2025-03-13 17:14:19,107 - my_text.py:153  - Pseudocode line:   usNRegsa = usNRegs;
2025-03-13 17:14:19,107 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,108 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,108 - my_text.py:153  - Pseudocode line:   pucFrame[1] = 2 * usRegCount;
2025-03-13 17:14:19,108 - my_text.py:367  - 0:25cc00000006ff0400300028 c_taint_asm_dict: {'1': {4: {'xMBPortTCPPool': {'add     edx, 6', 'mov     eax, edx', 'shl     eax, 8', 'movzx   eax, cs:aucTCPBuf+4', 'movzx   eax, al', 'movzx   edx, ax; n', 'sub     edx, eax', 'movzx   edx, [rbp+usLength]', 'add     eax, 6', 'mov     cs:usTCPFrameBytesLeft, ax', 'movzx   eax, cs:usTCPFrameBytesLeft', 'or      [rbp+usLength], ax', 'sub     eax, edx', 'cmp     eax, edx', 'mov     [rbp+usLength], ax'}}, 5: {'xMBPortTCPPool': {'add     edx, 6', 'mov     eax, edx', 'movzx   eax, al', 'movzx   eax, cs:aucTCPBuf+5', 'movzx   edx, ax; n', 'sub     edx, eax', 'movzx   edx, [rbp+usLength]', 'add     eax, 6', 'mov     cs:usTCPFrameBytesLeft, ax', 'movzx   eax, cs:usTCPFrameBytesLeft', 'or      [rbp+usLength], ax', 'sub     eax, edx', 'cmp     eax, edx'}}, 2: {'eMBTCPReceive': {'shl     eax, 8', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'mov     [rbp+usPID], ax', 'or      [rbp+usPID], ax', 'cmp     [rbp+usPID], 0'}}, 3: {'eMBTCPReceive': {'movzx   eax, byte ptr [rax]', 'cmp     [rbp+usPID], 0', 'or      [rbp+usPID], ax', 'movzx   eax, al'}}, 7: {'eMBPoll': {'cmp     dl, al', 'or      edx, 0FFFFFF80h', 'movzx   edx, cs:ucFunctionCode_2897', 'movzx   eax, cs:ucFunctionCode_2897', 'mov     [rax], dl', 'movzx   eax, byte ptr [rax]', 'mov     cs:ucFunctionCode_2897, al'}}, 8: {'eMBFuncReadInputRegister': {'movzx   ecx, [rbp+usRegAddress]', 'add     eax, 1', 'shl     eax, 8', 'movzx   eax, [rbp+usRegAddress]', 'mov     [rbp+usRegAddress], ax', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'or      [rbp+usRegAddress], ax', 'mov     esi, ecx; usAddress'}, 'eMBRegInputCB': {'cmp     [rbp+usAddress], 3E7h', 'mov     [rbp+usAddress], cx', 'mov     ecx, esi'}}, 9: {'eMBFuncReadInputRegister': {'movzx   ecx, [rbp+usRegAddress]', 'add     eax, 1', 'movzx   eax, [rbp+usRegAddress]', 'mov     [rbp+usRegAddress], ax', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'or      [rbp+usRegAddress], ax', 'mov     esi, ecx; usAddress'}, 'eMBRegInputCB': {'cmp     [rbp+usAddress], 3E7h', 'mov     [rbp+usAddress], cx', 'mov     ecx, esi'}}, 10: {'eMBFuncReadInputRegister': {'add     edx, edx', 'shl     eax, 8', 'movzx   edx, [rbp+usRegCount]; usNRegs', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'movzx   edx, [rbp+usRegCount]', 'cmp     [rbp+usRegCount], 0', "cmp     [rbp+usRegCount], 7Ch ; '|'", 'mov     [rbp+usRegCount], ax', 'or      [rbp+usRegCount], ax'}, 'eMBRegInputCB': {'mov     [rbp+usNRegs], ax', 'mov     eax, edx'}}, 11: {'eMBFuncReadInputRegister': {'add     edx, edx', 'movzx   edx, [rbp+usRegCount]; usNRegs', 'mov     [rax], dl', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'movzx   edx, [rbp+usRegCount]', 'cmp     [rbp+usRegCount], 0', "cmp     [rbp+usRegCount], 7Ch ; '|'", 'or      [rbp+usRegCount], ax'}, 'eMBRegInputCB': {'mov     [rbp+usNRegs], ax', 'mov     eax, edx'}}}}
2025-03-13 17:14:19,110 - my_text.py:355  - Local variables for eMBFuncReadHoldingRegister: {'usLen': {'start': 0, 'end': 7}, 'pucFrame': {'start': 8, 'end': 15}, 'usRegAddress': {'start': 28, 'end': 29}, 'usRegCount': {'start': 30, 'end': 31}, 'eStatus': {'start': 32, 'end': 35}, 'eRegStatus': {'start': 36, 'end': 39}, 'pucFrameCur': {'start': 40, 'end': 47}, ' s': {'start': 48, 'end': 55}, ' r': {'start': 56, 'end': 63}}
2025-03-13 17:14:19,111 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,111 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,111 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,111 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,111 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,111 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,111 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,111 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,112 - my_text.py:153  - Pseudocode line:   eRegStatus = eMBRegHoldingCB(pucFrame + 2, usRegAddress, usRegCount, MB_REG_READ);
2025-03-13 17:14:19,113 - my_text.py:355  - Local variables for eMBRegHoldingCB: {'eMode': {'start': 0, 'end': 3}, 'usNRegs': {'start': 4, 'end': 5}, 'usAddress': {'start': 8, 'end': 9}, 'pucRegBuffer': {'start': 12, 'end': 19}, 'eStatus': {'start': 28, 'end': 31}, 'iRegIndex': {'start': 32, 'end': 35}, ' s': {'start': 36, 'end': 43}, ' r': {'start': 44, 'end': 51}}
2025-03-13 17:14:19,113 - my_text.py:153  - Pseudocode line:   usNRegsa = usNRegs;
2025-03-13 17:14:19,114 - my_text.py:153  - Pseudocode line:   if ( usAddress <= 0x7CFu || usAddress + usNRegs > 2130 )
2025-03-13 17:14:19,114 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,114 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,114 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,114 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,114 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,114 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,115 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,115 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,115 - my_text.py:153  - Pseudocode line:   if ( !usRegCount || usRegCount > 0x7Du )
2025-03-13 17:14:19,115 - my_text.py:153  - Pseudocode line:   pucFrame[1] = 2 * usRegCount;
2025-03-13 17:14:19,115 - my_text.py:153  - Pseudocode line:   pucFrame[1] = 2 * usRegCount;
2025-03-13 17:14:19,115 - my_text.py:153  - Pseudocode line:   eRegStatus = eMBRegHoldingCB(pucFrame + 2, usRegAddress, usRegCount, MB_REG_READ);
2025-03-13 17:14:19,115 - my_text.py:153  - Pseudocode line:   usNRegsa = usNRegs;
2025-03-13 17:14:19,115 - my_text.py:153  - Pseudocode line:   usNRegsa = usNRegs;
2025-03-13 17:14:19,116 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,116 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,116 - my_text.py:153  - Pseudocode line:   pucFrame[1] = 2 * usRegCount;
2025-03-13 17:14:19,116 - my_text.py:367  - 1:011100000006ff0300020008 c_taint_asm_dict: {'1': {4: {'xMBPortTCPPool': {'add     edx, 6', 'mov     eax, edx', 'shl     eax, 8', 'movzx   eax, cs:aucTCPBuf+4', 'movzx   eax, al', 'movzx   edx, ax; n', 'sub     edx, eax', 'movzx   edx, [rbp+usLength]', 'add     eax, 6', 'mov     cs:usTCPFrameBytesLeft, ax', 'movzx   eax, cs:usTCPFrameBytesLeft', 'or      [rbp+usLength], ax', 'sub     eax, edx', 'cmp     eax, edx', 'mov     [rbp+usLength], ax'}}, 5: {'xMBPortTCPPool': {'add     edx, 6', 'mov     eax, edx', 'movzx   eax, al', 'movzx   eax, cs:aucTCPBuf+5', 'movzx   edx, ax; n', 'sub     edx, eax', 'movzx   edx, [rbp+usLength]', 'add     eax, 6', 'mov     cs:usTCPFrameBytesLeft, ax', 'movzx   eax, cs:usTCPFrameBytesLeft', 'or      [rbp+usLength], ax', 'sub     eax, edx', 'cmp     eax, edx'}}, 2: {'eMBTCPReceive': {'shl     eax, 8', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'mov     [rbp+usPID], ax', 'or      [rbp+usPID], ax', 'cmp     [rbp+usPID], 0'}}, 3: {'eMBTCPReceive': {'movzx   eax, byte ptr [rax]', 'cmp     [rbp+usPID], 0', 'or      [rbp+usPID], ax', 'movzx   eax, al'}}, 7: {'eMBPoll': {'cmp     dl, al', 'or      edx, 0FFFFFF80h', 'movzx   edx, cs:ucFunctionCode_2897', 'movzx   eax, cs:ucFunctionCode_2897', 'mov     [rax], dl', 'movzx   eax, byte ptr [rax]', 'mov     cs:ucFunctionCode_2897, al'}}, 8: {'eMBFuncReadHoldingRegister': {'movzx   esi, [rbp+usRegAddress]; usAddress', 'add     eax, 1', 'shl     eax, 8', 'movzx   eax, [rbp+usRegAddress]', 'mov     [rbp+usRegAddress], ax', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'or      [rbp+usRegAddress], ax'}, 'eMBRegHoldingCB': {'cmp     [rbp+usAddress], 7CFh', 'mov     [rbp+usAddress], si'}}, 9: {'eMBFuncReadHoldingRegister': {'movzx   esi, [rbp+usRegAddress]; usAddress', 'add     eax, 1', 'movzx   eax, [rbp+usRegAddress]', 'mov     [rbp+usRegAddress], ax', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'or      [rbp+usRegAddress], ax'}, 'eMBRegHoldingCB': {'cmp     [rbp+usAddress], 7CFh', 'mov     [rbp+usAddress], si'}}, 10: {'eMBFuncReadHoldingRegister': {'add     edx, edx', 'shl     eax, 8', 'movzx   edx, [rbp+usRegCount]; usNRegs', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'movzx   edx, [rbp+usRegCount]', 'cmp     [rbp+usRegCount], 0', "cmp     [rbp+usRegCount], 7Dh ; '}'", 'mov     [rbp+usRegCount], ax', 'or      [rbp+usRegCount], ax'}, 'eMBRegHoldingCB': {'mov     [rbp+usNRegs], ax', 'mov     eax, edx'}}, 11: {'eMBFuncReadHoldingRegister': {'add     edx, edx', 'movzx   edx, [rbp+usRegCount]; usNRegs', 'mov     [rax], dl', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'movzx   edx, [rbp+usRegCount]', 'cmp     [rbp+usRegCount], 0', "cmp     [rbp+usRegCount], 7Dh ; '}'", 'or      [rbp+usRegCount], ax'}, 'eMBRegHoldingCB': {'mov     [rbp+usNRegs], ax', 'mov     eax, edx'}}}}
2025-03-13 17:14:19,118 - my_text.py:355  - Local variables for eMBFuncWriteMultipleHoldingRegister: {'usLen': {'start': 0, 'end': 7}, 'pucFrame': {'start': 8, 'end': 15}, 'ucRegByteCount': {'start': 19, 'end': 19}, 'usRegAddress': {'start': 20, 'end': 21}, 'usRegCount': {'start': 22, 'end': 23}, 'eStatus': {'start': 24, 'end': 27}, 'eRegStatus': {'start': 28, 'end': 31}, ' s': {'start': 32, 'end': 39}, ' r': {'start': 40, 'end': 47}}
2025-03-13 17:14:19,118 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,119 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,119 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,119 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,119 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,119 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,119 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,119 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,119 - my_text.py:153  - Pseudocode line:   eRegStatus = eMBRegHoldingCB(pucFrame + 6, usRegAddress, usRegCount, MB_REG_WRITE);
2025-03-13 17:14:19,120 - my_text.py:153  - Pseudocode line:   eRegStatus = eMBRegHoldingCB(pucFrame + 6, usRegAddress, usRegCount, MB_REG_WRITE);
2025-03-13 17:14:19,120 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,120 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,120 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,120 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,120 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,120 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,120 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,121 - my_text.py:153  - Pseudocode line:   if ( !usRegCount || usRegCount > 0x78u || 2 * (_BYTE)usRegCount != pucFrame[5] )
2025-03-13 17:14:19,121 - my_text.py:153  - Pseudocode line:   if ( !usRegCount || usRegCount > 0x78u || 2 * (_BYTE)usRegCount != pucFrame[5] )
2025-03-13 17:14:19,121 - my_text.py:153  - Pseudocode line:   if ( !usRegCount || usRegCount > 0x78u || 2 * (_BYTE)usRegCount != pucFrame[5] )
2025-03-13 17:14:19,121 - my_text.py:153  - Pseudocode line:   if ( !usRegCount || usRegCount > 0x78u || 2 * (_BYTE)usRegCount != pucFrame[5] )
2025-03-13 17:14:19,121 - my_text.py:153  - Pseudocode line:   eRegStatus = eMBRegHoldingCB(pucFrame + 6, usRegAddress, usRegCount, MB_REG_WRITE);
2025-03-13 17:14:19,121 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,121 - my_text.py:153  - Pseudocode line:   usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,122 - my_text.py:153  - Pseudocode line:   if ( !usRegCount || usRegCount > 0x78u || 2 * (_BYTE)usRegCount != pucFrame[5] )
2025-03-13 17:14:19,122 - my_text.py:153  - Pseudocode line:   if ( !usRegCount || usRegCount > 0x78u || 2 * (_BYTE)usRegCount != pucFrame[5] )
2025-03-13 17:14:19,122 - my_text.py:153  - Pseudocode line:   if ( !usRegCount || usRegCount > 0x78u || 2 * (_BYTE)usRegCount != pucFrame[5] )
2025-03-13 17:14:19,122 - my_text.py:367  - 2:000100000009ff100001000102000a c_taint_asm_dict: {'1': {4: {'xMBPortTCPPool': {'add     edx, 6', 'mov     eax, edx', 'shl     eax, 8', 'movzx   eax, cs:aucTCPBuf+4', 'movzx   eax, al', 'movzx   edx, ax; n', 'sub     edx, eax', 'movzx   edx, [rbp+usLength]', 'add     eax, 6', 'mov     cs:usTCPFrameBytesLeft, ax', 'movzx   eax, cs:usTCPFrameBytesLeft', 'or      [rbp+usLength], ax', 'sub     eax, edx', 'cmp     eax, edx', 'mov     [rbp+usLength], ax'}}, 5: {'xMBPortTCPPool': {'add     edx, 6', 'mov     eax, edx', 'movzx   eax, al', 'movzx   eax, cs:aucTCPBuf+5', 'movzx   edx, ax; n', 'sub     edx, eax', 'movzx   edx, [rbp+usLength]', 'add     eax, 6', 'mov     cs:usTCPFrameBytesLeft, ax', 'movzx   eax, cs:usTCPFrameBytesLeft', 'or      [rbp+usLength], ax', 'sub     eax, edx', 'cmp     eax, edx'}}, 2: {'eMBTCPReceive': {'shl     eax, 8', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'mov     [rbp+usPID], ax', 'or      [rbp+usPID], ax', 'cmp     [rbp+usPID], 0'}}, 3: {'eMBTCPReceive': {'movzx   eax, byte ptr [rax]', 'cmp     [rbp+usPID], 0', 'or      [rbp+usPID], ax', 'movzx   eax, al'}}, 7: {'eMBPoll': {'cmp     dl, al', 'or      edx, 0FFFFFF80h', 'movzx   edx, cs:ucFunctionCode_2897', 'movzx   eax, cs:ucFunctionCode_2897', 'mov     [rax], dl', 'movzx   eax, byte ptr [rax]', 'mov     cs:ucFunctionCode_2897, al'}}, 8: {'eMBFuncWriteMultipleHoldingRegister': {'add     eax, 1', 'shl     eax, 8', 'movzx   eax, [rbp+usRegAddress]', 'mov     [rbp+usRegAddress], ax', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'or      [rbp+usRegAddress], ax', 'mov     esi, eax; usAddress'}, 'eMBRegHoldingCB': {'cmp     [rbp+usAddress], 7CFh', 'mov     [rbp+usAddress], si'}}, 9: {'eMBFuncWriteMultipleHoldingRegister': {'add     eax, 1', 'movzx   eax, [rbp+usRegAddress]', 'mov     [rbp+usRegAddress], ax', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'or      [rbp+usRegAddress], ax', 'mov     esi, eax; usAddress'}, 'eMBRegHoldingCB': {'cmp     [rbp+usAddress], 7CFh', 'mov     [rbp+usAddress], si'}}, 10: {'eMBFuncWriteMultipleHoldingRegister': {'shl     eax, 8', 'movzx   edx, [rbp+usRegCount]; usNRegs', "cmp     [rbp+usRegCount], 78h ; 'x'", 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'add     eax, eax', 'cmp     [rbp+usRegCount], 0', 'movzx   eax, [rbp+usRegCount]', 'mov     [rbp+usRegCount], ax', 'or      [rbp+usRegCount], ax'}, 'eMBRegHoldingCB': {'mov     [rbp+usNRegs], ax', 'mov     eax, edx'}}, 11: {'eMBFuncWriteMultipleHoldingRegister': {'cmp     al, [rbp+ucRegByteCount]', 'movzx   edx, [rbp+usRegCount]; usNRegs', "cmp     [rbp+usRegCount], 78h ; 'x'", 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'add     eax, eax', 'cmp     [rbp+usRegCount], 0', 'movzx   eax, [rbp+usRegCount]', 'or      [rbp+usRegCount], ax'}, 'eMBRegHoldingCB': {'mov     [rbp+usNRegs], ax', 'mov     eax, edx'}}, 12: {'eMBFuncWriteMultipleHoldingRegister': {'cmp     al, [rbp+ucRegByteCount]', 'mov     [rbp+ucRegByteCount], al', 'movzx   eax, byte ptr [rax+5]'}}}}
2025-03-13 17:14:19,124 - my_text.py:355  - Local variables for eMBFuncWriteCoil: {'usLen': {'start': 0, 'end': 7}, 'pucFrame': {'start': 8, 'end': 15}, 'usRegAddress': {'start': 22, 'end': 23}, 'eStatus': {'start': 24, 'end': 27}, 'eRegStatus': {'start': 28, 'end': 31}, 'ucBuf': {'start': 32, 'end': 33}, 'var_8': {'start': 40, 'end': 47}, ' s': {'start': 48, 'end': 55}, ' r': {'start': 56, 'end': 63}}
2025-03-13 17:14:19,124 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,125 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,125 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,125 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,125 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,125 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,125 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,125 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,125 - my_text.py:153  - Pseudocode line:   eRegStatus = eMBRegCoilsCB(ucBuf, usRegAddress, 1u, MB_REG_WRITE);
2025-03-13 17:14:19,126 - my_text.py:355  - Local variables for eMBRegCoilsCB: {'eMode': {'start': 0, 'end': 3}, 'usNCoils': {'start': 4, 'end': 5}, 'usAddress': {'start': 8, 'end': 9}, 'pucRegBuffer': {'start': 12, 'end': 19}, ' s': {'start': 20, 'end': 27}, ' r': {'start': 28, 'end': 35}}
2025-03-13 17:14:19,126 - my_text.py:153  - Pseudocode line:   return 1;
2025-03-13 17:14:19,126 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,126 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,126 - my_text.py:153  - Pseudocode line:   if ( pucFrame[4] || pucFrame[3] != 0xFF && pucFrame[3] )
2025-03-13 17:14:19,126 - my_text.py:153  - Pseudocode line:   if ( pucFrame[4] || pucFrame[3] != 0xFF && pucFrame[3] )
2025-03-13 17:14:19,127 - my_text.py:153  - Pseudocode line:   if ( pucFrame[4] || pucFrame[3] != 0xFF && pucFrame[3] )
2025-03-13 17:14:19,127 - my_text.py:153  - Pseudocode line:   if ( pucFrame[4] || pucFrame[3] != 0xFF && pucFrame[3] )
2025-03-13 17:14:19,127 - my_text.py:153  - Pseudocode line:   ucBuf[0] = pucFrame[3] == 0xFFu;
2025-03-13 17:14:19,127 - my_text.py:153  - Pseudocode line:   ucBuf[0] = pucFrame[3] == 0xFFu;
2025-03-13 17:14:19,127 - my_text.py:367  - 3:000100000006ff050000ff00 c_taint_asm_dict: {'1': {4: {'xMBPortTCPPool': {'add     edx, 6', 'mov     eax, edx', 'shl     eax, 8', 'movzx   eax, cs:aucTCPBuf+4', 'movzx   eax, al', 'movzx   edx, ax; n', 'sub     edx, eax', 'movzx   edx, [rbp+usLength]', 'add     eax, 6', 'mov     cs:usTCPFrameBytesLeft, ax', 'movzx   eax, cs:usTCPFrameBytesLeft', 'or      [rbp+usLength], ax', 'sub     eax, edx', 'cmp     eax, edx', 'mov     [rbp+usLength], ax'}}, 5: {'xMBPortTCPPool': {'add     edx, 6', 'mov     eax, edx', 'movzx   eax, al', 'movzx   eax, cs:aucTCPBuf+5', 'movzx   edx, ax; n', 'sub     edx, eax', 'movzx   edx, [rbp+usLength]', 'add     eax, 6', 'mov     cs:usTCPFrameBytesLeft, ax', 'movzx   eax, cs:usTCPFrameBytesLeft', 'or      [rbp+usLength], ax', 'sub     eax, edx', 'cmp     eax, edx'}}, 2: {'eMBTCPReceive': {'shl     eax, 8', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'mov     [rbp+usPID], ax', 'or      [rbp+usPID], ax', 'cmp     [rbp+usPID], 0'}}, 3: {'eMBTCPReceive': {'movzx   eax, byte ptr [rax]', 'cmp     [rbp+usPID], 0', 'or      [rbp+usPID], ax', 'movzx   eax, al'}}, 7: {'eMBPoll': {'cmp     dl, al', 'or      edx, 0FFFFFF80h', 'movzx   edx, cs:ucFunctionCode_2897', 'movzx   eax, cs:ucFunctionCode_2897', 'mov     [rax], dl', 'movzx   eax, byte ptr [rax]', 'mov     cs:ucFunctionCode_2897, al'}}, 8: {'eMBFuncWriteCoil': {'movzx   esi, [rbp+usRegAddress]; usAddress', 'add     eax, 1', 'shl     eax, 8', 'movzx   eax, [rbp+usRegAddress]', 'mov     [rbp+usRegAddress], ax', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'or      [rbp+usRegAddress], ax'}, 'eMBRegCoilsCB': {'mov     [rbp+usAddress], si'}}, 9: {'eMBFuncWriteCoil': {'movzx   esi, [rbp+usRegAddress]; usAddress', 'add     eax, 1', 'movzx   eax, [rbp+usRegAddress]', 'mov     [rbp+usRegAddress], ax', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'or      [rbp+usRegAddress], ax'}, 'eMBRegCoilsCB': {'mov     [rbp+usAddress], si'}}, 11: {'eMBFuncWriteCoil': {'movzx   eax, byte ptr [rax]', 'test    al, al'}}, 10: {'eMBFuncWriteCoil': {'movzx   eax, byte ptr [rax]', 'cmp     al, 0FFh'}}}}
2025-03-13 17:14:19,129 - my_text.py:355  - Local variables for eMBFuncWriteMultipleCoils: {'usLen': {'start': 0, 'end': 7}, 'pucFrame': {'start': 8, 'end': 15}, 'ucByteCountVerify': {'start': 18, 'end': 18}, 'ucByteCount': {'start': 19, 'end': 19}, 'usRegAddress': {'start': 20, 'end': 21}, 'usCoilCnt': {'start': 22, 'end': 23}, 'eStatus': {'start': 24, 'end': 27}, 'eRegStatus': {'start': 28, 'end': 31}, ' s': {'start': 32, 'end': 39}, ' r': {'start': 40, 'end': 47}}
2025-03-13 17:14:19,130 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,130 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,130 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,130 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,131 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,131 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,131 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,131 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,131 - my_text.py:153  - Pseudocode line:   eRegStatus = eMBRegCoilsCB(pucFrame + 6, usRegAddress, usCoilCnt, MB_REG_WRITE);
2025-03-13 17:14:19,131 - my_text.py:153  - Pseudocode line:   eRegStatus = eMBRegCoilsCB(pucFrame + 6, usRegAddress, usCoilCnt, MB_REG_WRITE);
2025-03-13 17:14:19,131 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,131 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,132 - my_text.py:153  - Pseudocode line:   usCoilCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,132 - my_text.py:153  - Pseudocode line:   usCoilCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,132 - my_text.py:153  - Pseudocode line:   usCoilCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,132 - my_text.py:153  - Pseudocode line:   usCoilCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,132 - my_text.py:153  - Pseudocode line:   usCoilCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,132 - my_text.py:153  - Pseudocode line:   if ( !usCoilCnt || usCoilCnt > 0x7B0u || ucByteCountVerify != pucFrame[5] )
2025-03-13 17:14:19,132 - my_text.py:153  - Pseudocode line:   if ( (usCoilCnt & 7) != 0 )
2025-03-13 17:14:19,133 - my_text.py:153  - Pseudocode line:   if ( (usCoilCnt & 7) != 0 )
2025-03-13 17:14:19,133 - my_text.py:153  - Pseudocode line:   if ( (usCoilCnt & 7) != 0 )
2025-03-13 17:14:19,133 - my_text.py:153  - Pseudocode line:     ucByteCountVerify = (usCoilCnt >> 3) + 1;
2025-03-13 17:14:19,133 - my_text.py:153  - Pseudocode line:     ucByteCountVerify = (usCoilCnt >> 3) + 1;
2025-03-13 17:14:19,133 - my_text.py:153  - Pseudocode line:     ucByteCountVerify = usCoilCnt >> 3;
2025-03-13 17:14:19,133 - my_text.py:153  - Pseudocode line:   if ( !usCoilCnt || usCoilCnt > 0x7B0u || ucByteCountVerify != pucFrame[5] )
2025-03-13 17:14:19,133 - my_text.py:153  - Pseudocode line:   eRegStatus = eMBRegCoilsCB(pucFrame + 6, usRegAddress, usCoilCnt, MB_REG_WRITE);
2025-03-13 17:14:19,133 - my_text.py:153  - Pseudocode line:   return 1;
2025-03-13 17:14:19,134 - my_text.py:153  - Pseudocode line:   return 1;
2025-03-13 17:14:19,134 - my_text.py:153  - Pseudocode line:   usCoilCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,134 - my_text.py:153  - Pseudocode line:   usCoilCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,134 - my_text.py:153  - Pseudocode line:     ucByteCountVerify = (usCoilCnt >> 3) + 1;
2025-03-13 17:14:19,134 - my_text.py:153  - Pseudocode line:   if ( !usCoilCnt || usCoilCnt > 0x7B0u || ucByteCountVerify != pucFrame[5] )
2025-03-13 17:14:19,134 - my_text.py:153  - Pseudocode line:   if ( !usCoilCnt || usCoilCnt > 0x7B0u || ucByteCountVerify != pucFrame[5] )
2025-03-13 17:14:19,135 - my_text.py:153  - Pseudocode line:   if ( !usCoilCnt || usCoilCnt > 0x7B0u || ucByteCountVerify != pucFrame[5] )
2025-03-13 17:14:19,135 - my_text.py:153  - Pseudocode line:   if ( !usCoilCnt || usCoilCnt > 0x7B0u || ucByteCountVerify != pucFrame[5] )
2025-03-13 17:14:19,135 - my_text.py:367  - 4:000100000008ff0f000100010101 c_taint_asm_dict: {'1': {4: {'xMBPortTCPPool': {'add     edx, 6', 'mov     eax, edx', 'shl     eax, 8', 'movzx   eax, cs:aucTCPBuf+4', 'movzx   eax, al', 'movzx   edx, ax; n', 'sub     edx, eax', 'movzx   edx, [rbp+usLength]', 'add     eax, 6', 'mov     cs:usTCPFrameBytesLeft, ax', 'movzx   eax, cs:usTCPFrameBytesLeft', 'or      [rbp+usLength], ax', 'sub     eax, edx', 'cmp     eax, edx', 'mov     [rbp+usLength], ax'}}, 5: {'xMBPortTCPPool': {'add     edx, 6', 'mov     eax, edx', 'movzx   eax, al', 'movzx   eax, cs:aucTCPBuf+5', 'movzx   edx, ax; n', 'sub     edx, eax', 'movzx   edx, [rbp+usLength]', 'add     eax, 6', 'mov     cs:usTCPFrameBytesLeft, ax', 'movzx   eax, cs:usTCPFrameBytesLeft', 'or      [rbp+usLength], ax', 'sub     eax, edx', 'cmp     eax, edx'}}, 2: {'eMBTCPReceive': {'shl     eax, 8', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'mov     [rbp+usPID], ax', 'or      [rbp+usPID], ax', 'cmp     [rbp+usPID], 0'}}, 3: {'eMBTCPReceive': {'movzx   eax, byte ptr [rax]', 'cmp     [rbp+usPID], 0', 'or      [rbp+usPID], ax', 'movzx   eax, al'}}, 7: {'eMBPoll': {'cmp     dl, al', 'or      edx, 0FFFFFF80h', 'movzx   edx, cs:ucFunctionCode_2897', 'movzx   eax, cs:ucFunctionCode_2897', 'mov     [rax], dl', 'movzx   eax, byte ptr [rax]', 'mov     cs:ucFunctionCode_2897, al'}}, 8: {'eMBFuncWriteMultipleCoils': {'add     eax, 1', 'shl     eax, 8', 'movzx   eax, [rbp+usRegAddress]', 'mov     [rbp+usRegAddress], ax', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'or      [rbp+usRegAddress], ax', 'mov     esi, eax; usAddress'}, 'eMBRegCoilsCB': {'mov     [rbp+usAddress], si'}}, 9: {'eMBFuncWriteMultipleCoils': {'add     eax, 1', 'movzx   eax, [rbp+usRegAddress]', 'mov     [rbp+usRegAddress], ax', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'or      [rbp+usRegAddress], ax', 'mov     esi, eax; usAddress'}, 'eMBRegCoilsCB': {'mov     [rbp+usAddress], si'}}, 10: {'eMBFuncWriteMultipleCoils': {'test    eax, eax', 'add     eax, 1', 'shl     eax, 8', 'movzx   edx, [rbp+usCoilCnt]; usNCoils', 'cmp     [rbp+usCoilCnt], 7B0h', 'mov     [rbp+usCoilCnt], ax', 'or      [rbp+usCoilCnt], ax', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'movzx   eax, [rbp+usCoilCnt]', 'cmp     [rbp+usCoilCnt], 0', 'and     eax, 7', 'shr     ax, 3'}, 'eMBRegCoilsCB': {'mov     [rbp+usNCoils], ax', 'mov     eax, edx'}}, 11: {'eMBFuncWriteMultipleCoils': {'test    eax, eax', 'mov     [rbp+ucByteCountVerify], al', 'movzx   eax, [rbp+ucByteCountVerify]', 'add     eax, 1', 'movzx   edx, [rbp+usCoilCnt]; usNCoils', 'cmp     [rbp+usCoilCnt], 7B0h', 'movzx   eax, [rbp+usCoilCnt]', 'or      [rbp+usCoilCnt], ax', 'movzx   eax, byte ptr [rax]', 'movzx   eax, al', 'cmp     [rbp+usCoilCnt], 0', 'cmp     al, [rbp+ucByteCount]', 'and     eax, 7', 'shr     ax, 3'}, 'eMBRegCoilsCB': {'mov     [rbp+usNCoils], ax', 'mov     eax, edx'}}, 12: {'eMBFuncWriteMultipleCoils': {'mov     [rbp+ucByteCount], al', 'cmp     al, [rbp+ucByteCount]', 'movzx   eax, byte ptr [rax+5]'}}}}
2025-03-13 17:14:19,137 - my_text.py:355  - Local variables for eMBFuncReadCoils: {'usLen': {'start': 0, 'end': 7}, 'pucFrame': {'start': 8, 'end': 15}, 'ucNBytes': {'start': 27, 'end': 27}, 'usRegAddress': {'start': 28, 'end': 29}, 'usCoilCount': {'start': 30, 'end': 31}, 'eStatus': {'start': 32, 'end': 35}, 'eRegStatus': {'start': 36, 'end': 39}, 'pucFrameCur': {'start': 40, 'end': 47}, ' s': {'start': 48, 'end': 55}, ' r': {'start': 56, 'end': 63}}
2025-03-13 17:14:19,137 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,137 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,138 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,138 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,138 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,138 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,138 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,138 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,138 - my_text.py:153  - Pseudocode line:   eRegStatus = eMBRegCoilsCB(pucFrame + 2, usRegAddress, usCoilCount, MB_REG_READ);
2025-03-13 17:14:19,138 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,139 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,139 - my_text.py:153  - Pseudocode line:   usCoilCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,139 - my_text.py:153  - Pseudocode line:   usCoilCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,139 - my_text.py:153  - Pseudocode line:   usCoilCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,139 - my_text.py:153  - Pseudocode line:   usCoilCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,139 - my_text.py:153  - Pseudocode line:   usCoilCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,139 - my_text.py:153  - Pseudocode line:   usCoilCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,139 - my_text.py:153  - Pseudocode line:   if ( !usCoilCount || usCoilCount > 0x7CFu )
2025-03-13 17:14:19,140 - my_text.py:153  - Pseudocode line:   ++*usLen;
2025-03-13 17:14:19,140 - my_text.py:153  - Pseudocode line:   if ( (usCoilCount & 7) != 0 )
2025-03-13 17:14:19,140 - my_text.py:153  - Pseudocode line:   if ( (usCoilCount & 7) != 0 )
2025-03-13 17:14:19,140 - my_text.py:153  - Pseudocode line:   if ( (usCoilCount & 7) != 0 )
2025-03-13 17:14:19,140 - my_text.py:153  - Pseudocode line:     ucNBytes = (usCoilCount >> 3) + 1;
2025-03-13 17:14:19,140 - my_text.py:153  - Pseudocode line:     ucNBytes = (usCoilCount >> 3) + 1;
2025-03-13 17:14:19,140 - my_text.py:153  - Pseudocode line:   eRegStatus = eMBRegCoilsCB(pucFrame + 2, usRegAddress, usCoilCount, MB_REG_READ);
2025-03-13 17:14:19,140 - my_text.py:153  - Pseudocode line:   usCoilCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,141 - my_text.py:153  - Pseudocode line:   usCoilCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,141 - my_text.py:153  - Pseudocode line:     ucNBytes = (usCoilCount >> 3) + 1;
2025-03-13 17:14:19,141 - my_text.py:153  - Pseudocode line:   pucFrame[1] = ucNBytes;
2025-03-13 17:14:19,141 - my_text.py:153  - Pseudocode line:   pucFrame[1] = ucNBytes;
2025-03-13 17:14:19,141 - my_text.py:367  - 5:320600000006ff0100000006 c_taint_asm_dict: {'1': {4: {'xMBPortTCPPool': {'add     edx, 6', 'mov     eax, edx', 'shl     eax, 8', 'movzx   eax, cs:aucTCPBuf+4', 'movzx   eax, al', 'movzx   edx, ax; n', 'sub     edx, eax', 'movzx   edx, [rbp+usLength]', 'add     eax, 6', 'mov     cs:usTCPFrameBytesLeft, ax', 'movzx   eax, cs:usTCPFrameBytesLeft', 'or      [rbp+usLength], ax', 'sub     eax, edx', 'cmp     eax, edx', 'mov     [rbp+usLength], ax'}}, 5: {'xMBPortTCPPool': {'add     edx, 6', 'mov     eax, edx', 'movzx   eax, al', 'movzx   eax, cs:aucTCPBuf+5', 'movzx   edx, ax; n', 'sub     edx, eax', 'movzx   edx, [rbp+usLength]', 'add     eax, 6', 'mov     cs:usTCPFrameBytesLeft, ax', 'movzx   eax, cs:usTCPFrameBytesLeft', 'or      [rbp+usLength], ax', 'sub     eax, edx', 'cmp     eax, edx'}}, 2: {'eMBTCPReceive': {'shl     eax, 8', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'mov     [rbp+usPID], ax', 'or      [rbp+usPID], ax', 'cmp     [rbp+usPID], 0'}}, 3: {'eMBTCPReceive': {'movzx   eax, byte ptr [rax]', 'cmp     [rbp+usPID], 0', 'or      [rbp+usPID], ax', 'movzx   eax, al'}}, 7: {'eMBPoll': {'cmp     dl, al', 'or      edx, 0FFFFFF80h', 'movzx   edx, cs:ucFunctionCode_2897', 'movzx   eax, cs:ucFunctionCode_2897', 'mov     [rax], dl', 'movzx   eax, byte ptr [rax]', 'mov     cs:ucFunctionCode_2897, al'}}, 8: {'eMBFuncReadCoils': {'movzx   esi, [rbp+usRegAddress]; usAddress', 'add     eax, 1', 'shl     eax, 8', 'movzx   eax, [rbp+usRegAddress]', 'mov     [rbp+usRegAddress], ax', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'or      [rbp+usRegAddress], ax'}, 'eMBRegCoilsCB': {'mov     [rbp+usAddress], si'}}, 9: {'eMBFuncReadCoils': {'movzx   esi, [rbp+usRegAddress]; usAddress', 'add     eax, 1', 'movzx   eax, [rbp+usRegAddress]', 'mov     [rbp+usRegAddress], ax', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'or      [rbp+usRegAddress], ax'}, 'eMBRegCoilsCB': {'mov     [rbp+usAddress], si'}}, 10: {'eMBFuncReadCoils': {'test    eax, eax', 'movzx   edx, [rbp+usCoilCount]; usNCoils', 'add     eax, 1', 'shl     eax, 8', 'mov     [rbp+usCoilCount], ax', 'cmp     [rbp+usCoilCount], 0', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'or      [rbp+usCoilCount], ax', 'cmp     [rbp+usCoilCount], 7CFh', 'shr     ax, 3', 'and     eax, 7', 'movzx   eax, [rbp+usCoilCount]'}, 'eMBRegCoilsCB': {'mov     [rbp+usNCoils], ax', 'mov     eax, edx'}}, 11: {'eMBFuncReadCoils': {'test    eax, eax', 'movzx   edx, [rbp+usCoilCount]; usNCoils', 'add     eax, 1', 'movzx   edx, [rbp+ucNBytes]', 'cmp     [rbp+usCoilCount], 0', 'mov     [rax], dl', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'or      [rbp+usCoilCount], ax', 'cmp     [rbp+usCoilCount], 7CFh', 'mov     [rbp+ucNBytes], al', 'shr     ax, 3', 'and     eax, 7', 'movzx   eax, [rbp+usCoilCount]'}, 'eMBRegCoilsCB': {'mov     [rbp+usNCoils], ax', 'mov     eax, edx'}}}}
2025-03-13 17:14:19,143 - my_text.py:355  - Local variables for eMBFuncReadDiscreteInputs: {'usLen': {'start': 0, 'end': 7}, 'pucFrame': {'start': 8, 'end': 15}, 'ucNBytes': {'start': 27, 'end': 27}, 'usRegAddress': {'start': 28, 'end': 29}, 'usDiscreteCnt': {'start': 30, 'end': 31}, 'eStatus': {'start': 32, 'end': 35}, 'eRegStatus': {'start': 36, 'end': 39}, 'pucFrameCur': {'start': 40, 'end': 47}, ' s': {'start': 48, 'end': 55}, ' r': {'start': 56, 'end': 63}}
2025-03-13 17:14:19,144 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,144 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,144 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,144 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,144 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,144 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,145 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,145 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,145 - my_text.py:153  - Pseudocode line:   eRegStatus = eMBRegDiscreteCB(pucFrame + 2, usRegAddress, usDiscreteCnt);
2025-03-13 17:14:19,145 - my_text.py:153  - Pseudocode line:   eRegStatus = eMBRegDiscreteCB(pucFrame + 2, usRegAddress, usDiscreteCnt);
2025-03-13 17:14:19,145 - my_text.py:355  - Local variables for eMBRegDiscreteCB: {'usNDiscrete': {'start': 0, 'end': 1}, 'usAddress': {'start': 4, 'end': 5}, 'pucRegBuffer': {'start': 8, 'end': 15}, ' s': {'start': 16, 'end': 23}, ' r': {'start': 24, 'end': 31}}
2025-03-13 17:14:19,145 - my_text.py:153  - Pseudocode line:   return 1;
2025-03-13 17:14:19,146 - my_text.py:153  - Pseudocode line:   return 1;
2025-03-13 17:14:19,146 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,146 - my_text.py:153  - Pseudocode line:   usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;
2025-03-13 17:14:19,146 - my_text.py:153  - Pseudocode line:   usDiscreteCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,146 - my_text.py:153  - Pseudocode line:   usDiscreteCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,146 - my_text.py:153  - Pseudocode line:   usDiscreteCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,147 - my_text.py:153  - Pseudocode line:   usDiscreteCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,147 - my_text.py:153  - Pseudocode line:   usDiscreteCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,147 - my_text.py:153  - Pseudocode line:   usDiscreteCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,147 - my_text.py:153  - Pseudocode line:   if ( !usDiscreteCnt || usDiscreteCnt > 0x7CFu )
2025-03-13 17:14:19,147 - my_text.py:153  - Pseudocode line:   ++*usLen;
2025-03-13 17:14:19,147 - my_text.py:153  - Pseudocode line:   if ( (usDiscreteCnt & 7) != 0 )
2025-03-13 17:14:19,147 - my_text.py:153  - Pseudocode line:   if ( (usDiscreteCnt & 7) != 0 )
2025-03-13 17:14:19,148 - my_text.py:153  - Pseudocode line:   if ( (usDiscreteCnt & 7) != 0 )
2025-03-13 17:14:19,148 - my_text.py:153  - Pseudocode line:     ucNBytes = (usDiscreteCnt >> 3) + 1;
2025-03-13 17:14:19,148 - my_text.py:153  - Pseudocode line:     ucNBytes = (usDiscreteCnt >> 3) + 1;
2025-03-13 17:14:19,148 - my_text.py:153  - Pseudocode line:   eRegStatus = eMBRegDiscreteCB(pucFrame + 2, usRegAddress, usDiscreteCnt);
2025-03-13 17:14:19,148 - my_text.py:153  - Pseudocode line:   return 1;
2025-03-13 17:14:19,148 - my_text.py:153  - Pseudocode line:   return 1;
2025-03-13 17:14:19,148 - my_text.py:153  - Pseudocode line:   usDiscreteCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,148 - my_text.py:153  - Pseudocode line:   usDiscreteCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));
2025-03-13 17:14:19,149 - my_text.py:153  - Pseudocode line:     ucNBytes = (usDiscreteCnt >> 3) + 1;
2025-03-13 17:14:19,149 - my_text.py:153  - Pseudocode line:   pucFrame[1] = ucNBytes;
2025-03-13 17:14:19,149 - my_text.py:153  - Pseudocode line:   pucFrame[1] = ucNBytes;
2025-03-13 17:14:19,149 - my_text.py:367  - 6:320800000006ff020000000a c_taint_asm_dict: {'1': {4: {'xMBPortTCPPool': {'add     edx, 6', 'mov     eax, edx', 'shl     eax, 8', 'movzx   eax, cs:aucTCPBuf+4', 'movzx   eax, al', 'movzx   edx, ax; n', 'sub     edx, eax', 'movzx   edx, [rbp+usLength]', 'add     eax, 6', 'mov     cs:usTCPFrameBytesLeft, ax', 'movzx   eax, cs:usTCPFrameBytesLeft', 'or      [rbp+usLength], ax', 'sub     eax, edx', 'cmp     eax, edx', 'mov     [rbp+usLength], ax'}}, 5: {'xMBPortTCPPool': {'add     edx, 6', 'mov     eax, edx', 'movzx   eax, al', 'movzx   eax, cs:aucTCPBuf+5', 'movzx   edx, ax; n', 'sub     edx, eax', 'movzx   edx, [rbp+usLength]', 'add     eax, 6', 'mov     cs:usTCPFrameBytesLeft, ax', 'movzx   eax, cs:usTCPFrameBytesLeft', 'or      [rbp+usLength], ax', 'sub     eax, edx', 'cmp     eax, edx'}}, 2: {'eMBTCPReceive': {'shl     eax, 8', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'mov     [rbp+usPID], ax', 'or      [rbp+usPID], ax', 'cmp     [rbp+usPID], 0'}}, 3: {'eMBTCPReceive': {'movzx   eax, byte ptr [rax]', 'cmp     [rbp+usPID], 0', 'or      [rbp+usPID], ax', 'movzx   eax, al'}}, 7: {'eMBPoll': {'cmp     dl, al', 'or      edx, 0FFFFFF80h', 'movzx   edx, cs:ucFunctionCode_2897', 'movzx   eax, cs:ucFunctionCode_2897', 'mov     [rax], dl', 'movzx   eax, byte ptr [rax]', 'mov     cs:ucFunctionCode_2897, al'}}, 8: {'eMBFuncReadDiscreteInputs': {'movzx   ecx, [rbp+usRegAddress]', 'add     eax, 1', 'shl     eax, 8', 'movzx   eax, [rbp+usRegAddress]', 'mov     [rbp+usRegAddress], ax', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'or      [rbp+usRegAddress], ax', 'mov     esi, ecx; usAddress'}, 'eMBRegDiscreteCB': {'mov     [rbp+usAddress], cx', 'mov     ecx, esi'}}, 9: {'eMBFuncReadDiscreteInputs': {'movzx   ecx, [rbp+usRegAddress]', 'add     eax, 1', 'movzx   eax, [rbp+usRegAddress]', 'mov     [rbp+usRegAddress], ax', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'or      [rbp+usRegAddress], ax', 'mov     esi, ecx; usAddress'}, 'eMBRegDiscreteCB': {'mov     [rbp+usAddress], cx', 'mov     ecx, esi'}}, 10: {'eMBFuncReadDiscreteInputs': {'test    eax, eax', 'add     eax, 1', 'shl     eax, 8', 'and     eax, 7', 'or      [rbp+usDiscreteCnt], ax', 'movzx   edx, [rbp+usDiscreteCnt]; usNDiscrete', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'mov     [rbp+usDiscreteCnt], ax', 'cmp     [rbp+usDiscreteCnt], 0', 'movzx   eax, [rbp+usDiscreteCnt]', 'cmp     [rbp+usDiscreteCnt], 7CFh', 'shr     ax, 3'}, 'eMBRegDiscreteCB': {'mov     [rbp+usNDiscrete], ax', 'mov     eax, edx'}}, 11: {'eMBFuncReadDiscreteInputs': {'test    eax, eax', 'add     eax, 1', 'and     eax, 7', 'movzx   edx, [rbp+ucNBytes]', 'or      [rbp+usDiscreteCnt], ax', 'mov     [rax], dl', 'movzx   edx, [rbp+usDiscreteCnt]; usNDiscrete', 'movzx   eax, al', 'movzx   eax, byte ptr [rax]', 'cmp     [rbp+usDiscreteCnt], 0', 'mov     [rbp+ucNBytes], al', 'movzx   eax, [rbp+usDiscreteCnt]', 'cmp     [rbp+usDiscreteCnt], 7CFh', 'shr     ax, 3'}, 'eMBRegDiscreteCB': {'mov     [rbp+usNDiscrete], ax', 'mov     eax, edx'}}}}
2025-03-13 17:14:19,149 - my_text.py:369  - local_vars: {'xMBPortTCPPool': {'usLength': {'start': 14, 'end': 15}, 'n': {'start': 16, 'end': 19}, '__d0': {'start': 20, 'end': 23}, '__d1': {'start': 24, 'end': 27}, 'ret': {'start': 28, 'end': 31}, 'tval': {'start': 32, 'end': 47}, 'fread': {'start': 48, 'end': 175}, 'var_8': {'start': 184, 'end': 191}, ' s': {'start': 192, 'end': 199}, ' r': {'start': 200, 'end': 207}}, 'eMBTCPReceive': {'pusLength': {'start': 8, 'end': 15}, 'ppucFrame': {'start': 16, 'end': 23}, 'pucRcvAddress': {'start': 24, 'end': 31}, 'usLength': {'start': 40, 'end': 41}, 'usPID': {'start': 42, 'end': 43}, 'eStatus': {'start': 44, 'end': 47}, 'pucMBTCPFrame': {'start': 48, 'end': 55}, 'var_8': {'start': 56, 'end': 63}, ' s': {'start': 64, 'end': 71}, ' r': {'start': 72, 'end': 79}}, 'eMBPoll': {'eEvent': {'start': 12, 'end': 15}, 'i': {'start': 16, 'end': 19}, 'eStatus': {'start': 20, 'end': 23}, 'var_8': {'start': 24, 'end': 31}, ' s': {'start': 32, 'end': 39}, ' r': {'start': 40, 'end': 47}}, 'eMBFuncReadInputRegister': {'usLen': {'start': 0, 'end': 7}, 'pucFrame': {'start': 8, 'end': 15}, 'usRegAddress': {'start': 28, 'end': 29}, 'usRegCount': {'start': 30, 'end': 31}, 'eStatus': {'start': 32, 'end': 35}, 'eRegStatus': {'start': 36, 'end': 39}, 'pucFrameCur': {'start': 40, 'end': 47}, ' s': {'start': 48, 'end': 55}, ' r': {'start': 56, 'end': 63}}, 'eMBRegInputCB': {'usNRegs': {'start': 0, 'end': 1}, 'usAddress': {'start': 4, 'end': 5}, 'pucRegBuffer': {'start': 8, 'end': 15}, 'eStatus': {'start': 24, 'end': 27}, 'iRegIndex': {'start': 28, 'end': 31}, ' s': {'start': 32, 'end': 39}, ' r': {'start': 40, 'end': 47}}, 'eMBFuncReadHoldingRegister': {'usLen': {'start': 0, 'end': 7}, 'pucFrame': {'start': 8, 'end': 15}, 'usRegAddress': {'start': 28, 'end': 29}, 'usRegCount': {'start': 30, 'end': 31}, 'eStatus': {'start': 32, 'end': 35}, 'eRegStatus': {'start': 36, 'end': 39}, 'pucFrameCur': {'start': 40, 'end': 47}, ' s': {'start': 48, 'end': 55}, ' r': {'start': 56, 'end': 63}}, 'eMBRegHoldingCB': {'eMode': {'start': 0, 'end': 3}, 'usNRegs': {'start': 4, 'end': 5}, 'usAddress': {'start': 8, 'end': 9}, 'pucRegBuffer': {'start': 12, 'end': 19}, 'eStatus': {'start': 28, 'end': 31}, 'iRegIndex': {'start': 32, 'end': 35}, ' s': {'start': 36, 'end': 43}, ' r': {'start': 44, 'end': 51}}, 'eMBFuncWriteMultipleHoldingRegister': {'usLen': {'start': 0, 'end': 7}, 'pucFrame': {'start': 8, 'end': 15}, 'ucRegByteCount': {'start': 19, 'end': 19}, 'usRegAddress': {'start': 20, 'end': 21}, 'usRegCount': {'start': 22, 'end': 23}, 'eStatus': {'start': 24, 'end': 27}, 'eRegStatus': {'start': 28, 'end': 31}, ' s': {'start': 32, 'end': 39}, ' r': {'start': 40, 'end': 47}}, 'eMBFuncWriteCoil': {'usLen': {'start': 0, 'end': 7}, 'pucFrame': {'start': 8, 'end': 15}, 'usRegAddress': {'start': 22, 'end': 23}, 'eStatus': {'start': 24, 'end': 27}, 'eRegStatus': {'start': 28, 'end': 31}, 'ucBuf': {'start': 32, 'end': 33}, 'var_8': {'start': 40, 'end': 47}, ' s': {'start': 48, 'end': 55}, ' r': {'start': 56, 'end': 63}}, 'eMBRegCoilsCB': {'eMode': {'start': 0, 'end': 3}, 'usNCoils': {'start': 4, 'end': 5}, 'usAddress': {'start': 8, 'end': 9}, 'pucRegBuffer': {'start': 12, 'end': 19}, ' s': {'start': 20, 'end': 27}, ' r': {'start': 28, 'end': 35}}, 'eMBFuncWriteMultipleCoils': {'usLen': {'start': 0, 'end': 7}, 'pucFrame': {'start': 8, 'end': 15}, 'ucByteCountVerify': {'start': 18, 'end': 18}, 'ucByteCount': {'start': 19, 'end': 19}, 'usRegAddress': {'start': 20, 'end': 21}, 'usCoilCnt': {'start': 22, 'end': 23}, 'eStatus': {'start': 24, 'end': 27}, 'eRegStatus': {'start': 28, 'end': 31}, ' s': {'start': 32, 'end': 39}, ' r': {'start': 40, 'end': 47}}, 'eMBFuncReadCoils': {'usLen': {'start': 0, 'end': 7}, 'pucFrame': {'start': 8, 'end': 15}, 'ucNBytes': {'start': 27, 'end': 27}, 'usRegAddress': {'start': 28, 'end': 29}, 'usCoilCount': {'start': 30, 'end': 31}, 'eStatus': {'start': 32, 'end': 35}, 'eRegStatus': {'start': 36, 'end': 39}, 'pucFrameCur': {'start': 40, 'end': 47}, ' s': {'start': 48, 'end': 55}, ' r': {'start': 56, 'end': 63}}, 'eMBFuncReadDiscreteInputs': {'usLen': {'start': 0, 'end': 7}, 'pucFrame': {'start': 8, 'end': 15}, 'ucNBytes': {'start': 27, 'end': 27}, 'usRegAddress': {'start': 28, 'end': 29}, 'usDiscreteCnt': {'start': 30, 'end': 31}, 'eStatus': {'start': 32, 'end': 35}, 'eRegStatus': {'start': 36, 'end': 39}, 'pucFrameCur': {'start': 40, 'end': 47}, ' s': {'start': 48, 'end': 55}, ' r': {'start': 56, 'end': 63}}, 'eMBRegDiscreteCB': {'usNDiscrete': {'start': 0, 'end': 1}, 'usAddress': {'start': 4, 'end': 5}, 'pucRegBuffer': {'start': 8, 'end': 15}, ' s': {'start': 16, 'end': 23}, ' r': {'start': 24, 'end': 31}}}
2025-03-13 17:14:19,150 - my_text.py:371  - c_code: {'xMBPortTCPPool': 'BOOL __cdecl xMBPortTCPPool()\n{\n  USHORT usLength; // [rsp+Eh] [rbp-B2h]\n  int ret; // [rsp+1Ch] [rbp-A4h]\n  timeval tval; // [rsp+20h] [rbp-A0h] BYREF\n  fd_set fread; // [rsp+30h] [rbp-90h] BYREF\n  unsigned __int64 v5; // [rsp+B8h] [rbp-8h]\n\n  v5 = __readfsqword(0x28u);\n  tval.tv_sec = 0LL;\n  tval.tv_usec = 5000LL;\n  if ( xClientSocket == -1 )\n  {\n    if ( select(xListenSocket + 1, &allset, 0LL, 0LL, 0LL) < 0 )\n      __errno_location();\n    if ( (allset.__fds_bits[xListenSocket / 64] & (1LL << (xListenSocket % 64))) != 0 )\n      prvbMBPortAcceptClient();\n  }\n  do\n  {\n    while ( 1 )\n    {\n      do\n      {\n        do\n        {\n          do\n          {\n            memset(&fread, 0, sizeof(fread));\n            fread.__fds_bits[xClientSocket / 64] |= 1LL << (xClientSocket % 64);\n          }\n          while ( select(xClientSocket + 1, &fread, 0LL, 0LL, &tval) <= 0 );\n        }\n        while ( (fread.__fds_bits[xClientSocket / 64] & (1LL << (xClientSocket % 64))) == 0 );\n        ret = recv(xClientSocket, &aucTCPBuf[usTCPBufPos], usTCPFrameBytesLeft, 0);\n        if ( ret == -1 || !ret )\n        {\n          close(xClientSocket);\n          xClientSocket = -1;\n          return 1;\n        }\n        usTCPBufPos += ret;\n        usTCPFrameBytesLeft -= ret;\n      }\n      while ( usTCPBufPos <= 6u );\n      usLength = _byteswap_ushort(*(unsigned __int16 *)&aucTCPBuf[4]);\n      if ( usTCPBufPos >= usLength + 6 )\n        break;\n      usTCPFrameBytesLeft = usLength - usTCPBufPos + 6;\n    }\n  }\n  while ( usTCPBufPos != usLength + 6 );\n  xMBPortEventPost(EV_FRAME_RECEIVED);\n  return 1;\n}\n', 'eMBTCPReceive': 'eMBErrorCode __cdecl eMBTCPReceive(UCHAR *pucRcvAddress, UCHAR **ppucFrame, USHORT *pusLength)\n{\n  USHORT usLength; // [rsp+28h] [rbp-18h] BYREF\n  USHORT usPID; // [rsp+2Ah] [rbp-16h]\n  eMBErrorCode eStatus; // [rsp+2Ch] [rbp-14h]\n  UCHAR *pucMBTCPFrame[2]; // [rsp+30h] [rbp-10h] BYREF\n\n  pucMBTCPFrame[1] = (UCHAR *)__readfsqword(0x28u);\n  eStatus = MB_EIO;\n  if ( !xMBTCPPortGetRequest(pucMBTCPFrame, &usLength) )\n    return 5;\n  usPID = pucMBTCPFrame[0][2] << 8;\n  usPID |= pucMBTCPFrame[0][3];\n  if ( !usPID )\n  {\n    *ppucFrame = pucMBTCPFrame[0] + 7;\n    *pusLength = usLength - 7;\n    eStatus = MB_ENOERR;\n    *pucRcvAddress = -1;\n  }\n  return eStatus;\n}\n', 'eMBPoll': 'eMBErrorCode __cdecl eMBPoll()\n{\n  USHORT v1; // ax\n  eMBEventType eEvent; // [rsp+Ch] [rbp-14h] BYREF\n  int i; // [rsp+10h] [rbp-10h]\n  eMBErrorCode eStatus; // [rsp+14h] [rbp-Ch]\n  unsigned __int64 v5; // [rsp+18h] [rbp-8h]\n\n  v5 = __readfsqword(0x28u);\n  eStatus = MB_ENOERR;\n  if ( eMBState )\n    return 6;\n  if ( xMBPortEventGet(&eEvent) )\n  {\n    if ( eEvent == EV_FRAME_RECEIVED )\n    {\n      eStatus = peMBFrameReceiveCur(&ucRcvAddress_2896, &ucMBFrame_2895, &usLength_2898);\n      if ( eStatus == MB_ENOERR && (ucRcvAddress_2896 == ucMBAddress || !ucRcvAddress_2896) )\n        xMBPortEventPost(EV_EXECUTE);\n    }\n    else if ( eEvent == EV_EXECUTE )\n    {\n      ucFunctionCode_2897 = *ucMBFrame_2895;\n      eException_2899 = MB_EX_ILLEGAL_FUNCTION;\n      for ( i = 0; i <= 15 && xFuncHandlers[i].ucFunctionCode; ++i )\n      {\n        if ( xFuncHandlers[i].ucFunctionCode == ucFunctionCode_2897 )\n        {\n          eException_2899 = xFuncHandlers[i].pxHandler(ucMBFrame_2895, &usLength_2898);\n          break;\n        }\n      }\n      if ( ucRcvAddress_2896 )\n      {\n        if ( eException_2899 )\n        {\n          usLength_2898 = 1;\n          *ucMBFrame_2895 = ucFunctionCode_2897 | 0x80;\n          v1 = usLength_2898++;\n          ucMBFrame_2895[v1] = eException_2899;\n        }\n        eStatus = peMBFrameSendCur(ucMBAddress, ucMBFrame_2895, usLength_2898);\n      }\n    }\n  }\n  return 0;\n}\n', 'eMBFuncReadInputRegister': 'eMBException __cdecl eMBFuncReadInputRegister(UCHAR *pucFrame, USHORT *usLen)\n{\n  USHORT usRegAddress; // [rsp+1Ch] [rbp-14h]\n  unsigned __int16 usRegCount; // [rsp+1Eh] [rbp-12h]\n  eMBException eStatus; // [rsp+20h] [rbp-10h]\n  eMBErrorCode eRegStatus; // [rsp+24h] [rbp-Ch]\n\n  eStatus = MB_EX_NONE;\n  if ( *usLen != 5 )\n    return 3;\n  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;\n  usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));\n  if ( !usRegCount || usRegCount > 0x7Cu )\n    return 3;\n  *usLen = 0;\n  *pucFrame = 4;\n  ++*usLen;\n  pucFrame[1] = 2 * usRegCount;\n  ++*usLen;\n  eRegStatus = eMBRegInputCB(pucFrame + 2, usRegAddress, usRegCount);\n  if ( eRegStatus )\n    return prveMBError2Exception(eRegStatus);\n  *usLen += 2 * usRegCount;\n  return eStatus;\n}\n', 'eMBRegInputCB': 'eMBErrorCode __cdecl eMBRegInputCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNRegs)\n{\n  UCHAR *v3; // rax\n  USHORT usNRegsa; // [rsp+0h] [rbp-20h]\n  eMBErrorCode eStatus; // [rsp+18h] [rbp-8h]\n  int iRegIndex; // [rsp+1Ch] [rbp-4h]\n\n  usNRegsa = usNRegs;\n  eStatus = MB_ENOERR;\n  if ( usAddress <= 0x3E7u || usAddress + usNRegs > 1004 )\n    return 1;\n  iRegIndex = usAddress - usRegInputStart;\n  while ( usNRegsa )\n  {\n    *pucRegBuffer = HIBYTE(usRegInputBuf[iRegIndex]);\n    v3 = pucRegBuffer + 1;\n    pucRegBuffer += 2;\n    *v3 = usRegInputBuf[iRegIndex++];\n    --usNRegsa;\n  }\n  return eStatus;\n}\n', 'eMBFuncReadHoldingRegister': 'eMBException __cdecl eMBFuncReadHoldingRegister(UCHAR *pucFrame, USHORT *usLen)\n{\n  USHORT usRegAddress; // [rsp+1Ch] [rbp-14h]\n  unsigned __int16 usRegCount; // [rsp+1Eh] [rbp-12h]\n  eMBException eStatus; // [rsp+20h] [rbp-10h]\n  eMBErrorCode eRegStatus; // [rsp+24h] [rbp-Ch]\n\n  eStatus = MB_EX_NONE;\n  if ( *usLen != 5 )\n    return 3;\n  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;\n  usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));\n  if ( !usRegCount || usRegCount > 0x7Du )\n    return 3;\n  *usLen = 0;\n  *pucFrame = 3;\n  ++*usLen;\n  pucFrame[1] = 2 * usRegCount;\n  ++*usLen;\n  eRegStatus = eMBRegHoldingCB(pucFrame + 2, usRegAddress, usRegCount, MB_REG_READ);\n  if ( eRegStatus )\n    return prveMBError2Exception(eRegStatus);\n  *usLen += 2 * usRegCount;\n  return eStatus;\n}\n', 'eMBRegHoldingCB': 'eMBErrorCode __cdecl eMBRegHoldingCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode)\n{\n  UCHAR *v4; // rax\n  UCHAR *v5; // rax\n  USHORT usNRegsa; // [rsp+4h] [rbp-20h]\n  eMBErrorCode eStatus; // [rsp+1Ch] [rbp-8h]\n  int iRegIndex; // [rsp+20h] [rbp-4h]\n\n  usNRegsa = usNRegs;\n  eStatus = MB_ENOERR;\n  if ( usAddress <= 0x7CFu || usAddress + usNRegs > 2130 )\n    return 1;\n  iRegIndex = usAddress - usRegHoldingStart;\n  if ( eMode )\n  {\n    if ( eMode == MB_REG_WRITE )\n    {\n      while ( usNRegsa )\n      {\n        usRegHoldingBuf[iRegIndex] = *pucRegBuffer << 8;\n        v5 = pucRegBuffer + 1;\n        pucRegBuffer += 2;\n        usRegHoldingBuf[iRegIndex++] |= *v5;\n        --usNRegsa;\n      }\n    }\n  }\n  else\n  {\n    while ( usNRegsa )\n    {\n      *pucRegBuffer = HIBYTE(usRegHoldingBuf[iRegIndex]);\n      v4 = pucRegBuffer + 1;\n      pucRegBuffer += 2;\n      *v4 = usRegHoldingBuf[iRegIndex++];\n      --usNRegsa;\n    }\n  }\n  return eStatus;\n}\n', 'eMBFuncWriteMultipleHoldingRegister': 'eMBException __cdecl eMBFuncWriteMultipleHoldingRegister(UCHAR *pucFrame, USHORT *usLen)\n{\n  USHORT usRegAddress; // [rsp+14h] [rbp-Ch]\n  unsigned __int16 usRegCount; // [rsp+16h] [rbp-Ah]\n  eMBException eStatus; // [rsp+18h] [rbp-8h]\n  eMBErrorCode eRegStatus; // [rsp+1Ch] [rbp-4h]\n\n  eStatus = MB_EX_NONE;\n  if ( *usLen <= 5u )\n    return 3;\n  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;\n  usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));\n  if ( !usRegCount || usRegCount > 0x78u || 2 * (_BYTE)usRegCount != pucFrame[5] )\n    return 3;\n  eRegStatus = eMBRegHoldingCB(pucFrame + 6, usRegAddress, usRegCount, MB_REG_WRITE);\n  if ( eRegStatus )\n    return prveMBError2Exception(eRegStatus);\n  *usLen = 5;\n  return eStatus;\n}\n', 'eMBFuncWriteCoil': 'eMBException __cdecl eMBFuncWriteCoil(UCHAR *pucFrame, USHORT *usLen)\n{\n  USHORT usRegAddress; // [rsp+16h] [rbp-1Ah]\n  eMBException eStatus; // [rsp+18h] [rbp-18h]\n  eMBErrorCode eRegStatus; // [rsp+1Ch] [rbp-14h]\n  UCHAR ucBuf[2]; // [rsp+20h] [rbp-10h] BYREF\n  unsigned __int64 v7; // [rsp+28h] [rbp-8h]\n\n  v7 = __readfsqword(0x28u);\n  eStatus = MB_EX_NONE;\n  if ( *usLen != 5 )\n    return 3;\n  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;\n  if ( pucFrame[4] || pucFrame[3] != 0xFF && pucFrame[3] )\n    return 3;\n  ucBuf[1] = 0;\n  ucBuf[0] = pucFrame[3] == 0xFFu;\n  eRegStatus = eMBRegCoilsCB(ucBuf, usRegAddress, 1u, MB_REG_WRITE);\n  if ( eRegStatus )\n    return prveMBError2Exception(eRegStatus);\n  return eStatus;\n}\n', 'eMBRegCoilsCB': 'eMBErrorCode __cdecl eMBRegCoilsCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode)\n{\n  return 1;\n}\n', 'eMBFuncWriteMultipleCoils': 'eMBException __cdecl eMBFuncWriteMultipleCoils(UCHAR *pucFrame, USHORT *usLen)\n{\n  UCHAR ucByteCountVerify; // [rsp+12h] [rbp-Eh]\n  USHORT usRegAddress; // [rsp+14h] [rbp-Ch]\n  unsigned __int16 usCoilCnt; // [rsp+16h] [rbp-Ah]\n  eMBException eStatus; // [rsp+18h] [rbp-8h]\n  eMBErrorCode eRegStatus; // [rsp+1Ch] [rbp-4h]\n\n  eStatus = MB_EX_NONE;\n  if ( *usLen <= 5u )\n    return 3;\n  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;\n  usCoilCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));\n  if ( (usCoilCnt & 7) != 0 )\n    ucByteCountVerify = (usCoilCnt >> 3) + 1;\n  else\n    ucByteCountVerify = usCoilCnt >> 3;\n  if ( !usCoilCnt || usCoilCnt > 0x7B0u || ucByteCountVerify != pucFrame[5] )\n    return 3;\n  eRegStatus = eMBRegCoilsCB(pucFrame + 6, usRegAddress, usCoilCnt, MB_REG_WRITE);\n  if ( eRegStatus )\n    return prveMBError2Exception(eRegStatus);\n  *usLen = 5;\n  return eStatus;\n}\n', 'eMBFuncReadCoils': 'eMBException __cdecl eMBFuncReadCoils(UCHAR *pucFrame, USHORT *usLen)\n{\n  UCHAR ucNBytes; // [rsp+1Bh] [rbp-15h]\n  USHORT usRegAddress; // [rsp+1Ch] [rbp-14h]\n  unsigned __int16 usCoilCount; // [rsp+1Eh] [rbp-12h]\n  eMBException eStatus; // [rsp+20h] [rbp-10h]\n  eMBErrorCode eRegStatus; // [rsp+24h] [rbp-Ch]\n\n  eStatus = MB_EX_NONE;\n  if ( *usLen != 5 )\n    return 3;\n  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;\n  usCoilCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));\n  if ( !usCoilCount || usCoilCount > 0x7CFu )\n    return 3;\n  *usLen = 0;\n  *pucFrame = 1;\n  ++*usLen;\n  if ( (usCoilCount & 7) != 0 )\n    ucNBytes = (usCoilCount >> 3) + 1;\n  else\n    ucNBytes = usCoilCount >> 3;\n  pucFrame[1] = ucNBytes;\n  ++*usLen;\n  eRegStatus = eMBRegCoilsCB(pucFrame + 2, usRegAddress, usCoilCount, MB_REG_READ);\n  if ( eRegStatus )\n    return prveMBError2Exception(eRegStatus);\n  *usLen += ucNBytes;\n  return eStatus;\n}\n', 'eMBFuncReadDiscreteInputs': 'eMBException __cdecl eMBFuncReadDiscreteInputs(UCHAR *pucFrame, USHORT *usLen)\n{\n  UCHAR ucNBytes; // [rsp+1Bh] [rbp-15h]\n  USHORT usRegAddress; // [rsp+1Ch] [rbp-14h]\n  unsigned __int16 usDiscreteCnt; // [rsp+1Eh] [rbp-12h]\n  eMBException eStatus; // [rsp+20h] [rbp-10h]\n  eMBErrorCode eRegStatus; // [rsp+24h] [rbp-Ch]\n\n  eStatus = MB_EX_NONE;\n  if ( *usLen != 5 )\n    return 3;\n  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;\n  usDiscreteCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));\n  if ( !usDiscreteCnt || usDiscreteCnt > 0x7CFu )\n    return 3;\n  *usLen = 0;\n  *pucFrame = 2;\n  ++*usLen;\n  if ( (usDiscreteCnt & 7) != 0 )\n    ucNBytes = (usDiscreteCnt >> 3) + 1;\n  else\n    ucNBytes = usDiscreteCnt >> 3;\n  pucFrame[1] = ucNBytes;\n  ++*usLen;\n  eRegStatus = eMBRegDiscreteCB(pucFrame + 2, usRegAddress, usDiscreteCnt);\n  if ( eRegStatus )\n    return prveMBError2Exception(eRegStatus);\n  *usLen += ucNBytes;\n  return eStatus;\n}\n', 'eMBRegDiscreteCB': 'eMBErrorCode __cdecl eMBRegDiscreteCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNDiscrete)\n{\n  return 1;\n}\n'}
2025-03-13 17:14:19,150 - my_text.py:386  - 0:25cc00000006ff0400300028 Updated c_taint_asm_dict: {'1': {4: {'xMBPortTCPPool': {'aucTCPBuf', 'edx', 'usLength', 'add', '6', 'or', 'eax', '4', 'movzx', 'mov', 'ax', 'sub', 'cmp', '8', 'n', 'rbp', 'cs', 'usTCPFrameBytesLeft', 'al', 'shl'}}, 5: {'xMBPortTCPPool': {'sub', 'aucTCPBuf', 'or', 'edx', 'cmp', 'rbp', 'n', 'eax', 'movzx', 'cs', 'usLength', 'mov', 'add', '6', 'usTCPFrameBytesLeft', 'al', '5', 'ax'}}, 2: {'eMBTCPReceive': {'byte', 'or', 'ptr', 'cmp', '8', 'rbp', 'eax', 'movzx', 'usPID', 'mov', 'rax', 'al', 'shl', 'ax', '0'}}, 3: {'eMBTCPReceive': {'byte', 'or', 'ptr', 'cmp', 'rbp', 'eax', 'movzx', 'usPID', 'rax', 'al', 'ax', '0'}}, 7: {'eMBPoll': {'0FFFFFF80h', 'or', 'byte', 'ptr', 'cmp', 'edx', 'cs', 'movzx', 'eax', 'mov', 'rax', 'ucFunctionCode_2897', 'al', 'dl'}}, 8: {'eMBFuncReadInputRegister': {'ecx', 'byte', '1', 'ptr', 'or', 'ax', 'rbp', '8', 'eax', 'movzx', 'usAddress', 'mov', 'add', 'rax', 'al', 'shl', 'usRegAddress', 'esi'}, 'eMBRegInputCB': {'ecx', 'cmp', 'rbp', 'mov', '3E7h', 'cx', 'usAddress', 'esi'}}, 9: {'eMBFuncReadInputRegister': {'ecx', 'byte', '1', 'ptr', 'or', 'ax', 'rbp', 'eax', 'movzx', 'usAddress', 'mov', 'add', 'rax', 'al', 'usRegAddress', 'esi'}, 'eMBRegInputCB': {'ecx', 'cmp', 'rbp', 'mov', '3E7h', 'cx', 'usAddress', 'esi'}}, 10: {'eMBFuncReadInputRegister': {'ptr', 'edx', 'add', 'usNRegs', '0', 'or', 'eax', 'rax', 'byte', 'usRegCount', 'movzx', 'mov', 'ax', 'cmp', '8', 'rbp', '7Ch', 'al', 'shl'}, 'eMBRegInputCB': {'edx', 'rbp', 'eax', 'mov', 'usNRegs', 'ax'}}, 11: {'eMBFuncReadInputRegister': {'byte', 'or', 'usRegCount', 'ptr', 'edx', 'cmp', 'rbp', 'eax', 'movzx', 'mov', 'add', 'usNRegs', 'rax', '7Ch', 'al', 'dl', 'ax', '0'}, 'eMBRegInputCB': {'edx', 'rbp', 'eax', 'mov', 'usNRegs', 'ax'}}}}
2025-03-13 17:14:19,150 - my_text.py:386  - 1:011100000006ff0300020008 Updated c_taint_asm_dict: {'1': {4: {'xMBPortTCPPool': {'aucTCPBuf', 'edx', 'usLength', 'add', '6', 'or', 'eax', '4', 'movzx', 'mov', 'ax', 'sub', 'cmp', '8', 'n', 'rbp', 'cs', 'usTCPFrameBytesLeft', 'al', 'shl'}}, 5: {'xMBPortTCPPool': {'sub', 'aucTCPBuf', 'or', 'edx', 'cmp', 'rbp', 'n', 'eax', 'movzx', 'cs', 'usLength', 'mov', 'add', '6', 'usTCPFrameBytesLeft', 'al', '5', 'ax'}}, 2: {'eMBTCPReceive': {'byte', 'or', 'ptr', 'cmp', '8', 'rbp', 'eax', 'movzx', 'usPID', 'mov', 'rax', 'al', 'shl', 'ax', '0'}}, 3: {'eMBTCPReceive': {'byte', 'or', 'ptr', 'cmp', 'rbp', 'eax', 'movzx', 'usPID', 'rax', 'al', 'ax', '0'}}, 7: {'eMBPoll': {'0FFFFFF80h', 'or', 'byte', 'ptr', 'cmp', 'edx', 'cs', 'movzx', 'eax', 'mov', 'rax', 'ucFunctionCode_2897', 'al', 'dl'}}, 8: {'eMBFuncReadHoldingRegister': {'byte', '1', 'ptr', 'or', 'ax', 'rbp', '8', 'eax', 'movzx', 'mov', 'add', 'rax', 'usAddress', 'shl', 'usRegAddress', 'esi', 'al'}, 'eMBRegHoldingCB': {'7CFh', 'cmp', 'rbp', 'mov', 'usAddress', 'si'}}, 9: {'eMBFuncReadHoldingRegister': {'byte', '1', 'ptr', 'or', 'ax', 'rbp', 'eax', 'movzx', 'mov', 'add', 'rax', 'usAddress', 'usRegAddress', 'esi', 'al'}, 'eMBRegHoldingCB': {'7CFh', 'cmp', 'rbp', 'mov', 'usAddress', 'si'}}, 10: {'eMBFuncReadHoldingRegister': {'ptr', 'edx', 'add', 'usNRegs', '0', 'or', 'eax', '7Dh', 'rax', 'byte', 'usRegCount', 'movzx', 'mov', 'ax', 'cmp', '8', 'rbp', 'al', 'shl'}, 'eMBRegHoldingCB': {'edx', 'rbp', 'eax', 'mov', 'usNRegs', 'ax'}}, 11: {'eMBFuncReadHoldingRegister': {'byte', 'or', 'usRegCount', 'ptr', 'edx', 'cmp', 'rbp', 'eax', 'movzx', '7Dh', 'mov', 'add', 'usNRegs', 'rax', 'al', 'dl', 'ax', '0'}, 'eMBRegHoldingCB': {'edx', 'rbp', 'eax', 'mov', 'usNRegs', 'ax'}}}}
2025-03-13 17:14:19,151 - my_text.py:386  - 2:000100000009ff100001000102000a Updated c_taint_asm_dict: {'1': {4: {'xMBPortTCPPool': {'aucTCPBuf', 'edx', 'usLength', 'add', '6', 'or', 'eax', '4', 'movzx', 'mov', 'ax', 'sub', 'cmp', '8', 'n', 'rbp', 'cs', 'usTCPFrameBytesLeft', 'al', 'shl'}}, 5: {'xMBPortTCPPool': {'sub', 'aucTCPBuf', 'or', 'edx', 'cmp', 'rbp', 'n', 'eax', 'movzx', 'cs', 'usLength', 'mov', 'add', '6', 'usTCPFrameBytesLeft', 'al', '5', 'ax'}}, 2: {'eMBTCPReceive': {'byte', 'or', 'ptr', 'cmp', '8', 'rbp', 'eax', 'movzx', 'usPID', 'mov', 'rax', 'al', 'shl', 'ax', '0'}}, 3: {'eMBTCPReceive': {'byte', 'or', 'ptr', 'cmp', 'rbp', 'eax', 'movzx', 'usPID', 'rax', 'al', 'ax', '0'}}, 7: {'eMBPoll': {'0FFFFFF80h', 'or', 'byte', 'ptr', 'cmp', 'edx', 'cs', 'movzx', 'eax', 'mov', 'rax', 'ucFunctionCode_2897', 'al', 'dl'}}, 8: {'eMBFuncWriteMultipleHoldingRegister': {'byte', '1', 'ptr', 'or', 'ax', '8', 'rbp', 'eax', 'movzx', 'usAddress', 'mov', 'add', 'rax', 'al', 'shl', 'usRegAddress', 'esi'}, 'eMBRegHoldingCB': {'7CFh', 'cmp', 'rbp', 'mov', 'usAddress', 'si'}}, 9: {'eMBFuncWriteMultipleHoldingRegister': {'byte', '1', 'ptr', 'or', 'ax', 'rbp', 'eax', 'movzx', 'usAddress', 'mov', 'add', 'rax', 'al', 'usRegAddress', 'esi'}, 'eMBRegHoldingCB': {'7CFh', 'cmp', 'rbp', 'mov', 'usAddress', 'si'}}, 10: {'eMBFuncWriteMultipleHoldingRegister': {'ptr', 'edx', '78h', 'add', 'usNRegs', '0', 'or', 'eax', 'rax', 'x', 'byte', 'usRegCount', 'movzx', 'mov', 'ax', 'cmp', '8', 'rbp', 'al', 'shl'}, 'eMBRegHoldingCB': {'edx', 'rbp', 'eax', 'mov', 'usNRegs', 'ax'}}, 11: {'eMBFuncWriteMultipleHoldingRegister': {'byte', 'or', 'usRegCount', 'ptr', 'cmp', 'edx', 'rbp', '78h', 'eax', 'movzx', 'ucRegByteCount', 'add', 'usNRegs', 'rax', 'al', 'ax', '0', 'x'}, 'eMBRegHoldingCB': {'edx', 'rbp', 'eax', 'mov', 'usNRegs', 'ax'}}, 12: {'eMBFuncWriteMultipleHoldingRegister': {'byte', 'ptr', 'cmp', 'rbp', 'eax', 'movzx', 'ucRegByteCount', 'mov', 'rax', 'al', '5'}}}}
2025-03-13 17:14:19,151 - my_text.py:386  - 3:000100000006ff050000ff00 Updated c_taint_asm_dict: {'1': {4: {'xMBPortTCPPool': {'aucTCPBuf', 'edx', 'usLength', 'add', '6', 'or', 'eax', '4', 'movzx', 'mov', 'ax', 'sub', 'cmp', '8', 'n', 'rbp', 'cs', 'usTCPFrameBytesLeft', 'al', 'shl'}}, 5: {'xMBPortTCPPool': {'sub', 'aucTCPBuf', 'or', 'edx', 'cmp', 'rbp', 'n', 'eax', 'movzx', 'cs', 'usLength', 'mov', 'add', '6', 'usTCPFrameBytesLeft', 'al', '5', 'ax'}}, 2: {'eMBTCPReceive': {'byte', 'or', 'ptr', 'cmp', '8', 'rbp', 'eax', 'movzx', 'usPID', 'mov', 'rax', 'al', 'shl', 'ax', '0'}}, 3: {'eMBTCPReceive': {'byte', 'or', 'ptr', 'cmp', 'rbp', 'eax', 'movzx', 'usPID', 'rax', 'al', 'ax', '0'}}, 7: {'eMBPoll': {'0FFFFFF80h', 'or', 'byte', 'ptr', 'cmp', 'edx', 'cs', 'movzx', 'eax', 'mov', 'rax', 'ucFunctionCode_2897', 'al', 'dl'}}, 8: {'eMBFuncWriteCoil': {'byte', '1', 'ptr', 'or', 'ax', 'rbp', '8', 'eax', 'movzx', 'mov', 'add', 'rax', 'usAddress', 'shl', 'usRegAddress', 'esi', 'al'}, 'eMBRegCoilsCB': {'mov', 'rbp', 'si', 'usAddress'}}, 9: {'eMBFuncWriteCoil': {'byte', '1', 'ptr', 'or', 'ax', 'rbp', 'eax', 'movzx', 'mov', 'add', 'rax', 'usAddress', 'usRegAddress', 'esi', 'al'}, 'eMBRegCoilsCB': {'mov', 'rbp', 'si', 'usAddress'}}, 11: {'eMBFuncWriteCoil': {'byte', 'ptr', 'eax', 'movzx', 'test', 'rax', 'al'}}, 10: {'eMBFuncWriteCoil': {'byte', 'ptr', 'cmp', 'eax', 'movzx', 'rax', '0FFh', 'al'}}}}
2025-03-13 17:14:19,151 - my_text.py:386  - 4:000100000008ff0f000100010101 Updated c_taint_asm_dict: {'1': {4: {'xMBPortTCPPool': {'aucTCPBuf', 'edx', 'usLength', 'add', '6', 'or', 'eax', '4', 'movzx', 'mov', 'ax', 'sub', 'cmp', '8', 'n', 'rbp', 'cs', 'usTCPFrameBytesLeft', 'al', 'shl'}}, 5: {'xMBPortTCPPool': {'sub', 'aucTCPBuf', 'or', 'edx', 'cmp', 'rbp', 'n', 'eax', 'movzx', 'cs', 'usLength', 'mov', 'add', '6', 'usTCPFrameBytesLeft', 'al', '5', 'ax'}}, 2: {'eMBTCPReceive': {'byte', 'or', 'ptr', 'cmp', '8', 'rbp', 'eax', 'movzx', 'usPID', 'mov', 'rax', 'al', 'shl', 'ax', '0'}}, 3: {'eMBTCPReceive': {'byte', 'or', 'ptr', 'cmp', 'rbp', 'eax', 'movzx', 'usPID', 'rax', 'al', 'ax', '0'}}, 7: {'eMBPoll': {'0FFFFFF80h', 'or', 'byte', 'ptr', 'cmp', 'edx', 'cs', 'movzx', 'eax', 'mov', 'rax', 'ucFunctionCode_2897', 'al', 'dl'}}, 8: {'eMBFuncWriteMultipleCoils': {'byte', '1', 'ptr', 'or', 'ax', '8', 'rbp', 'eax', 'movzx', 'usAddress', 'mov', 'add', 'rax', 'al', 'shl', 'usRegAddress', 'esi'}, 'eMBRegCoilsCB': {'mov', 'rbp', 'si', 'usAddress'}}, 9: {'eMBFuncWriteMultipleCoils': {'byte', '1', 'ptr', 'or', 'ax', 'rbp', 'eax', 'movzx', 'usAddress', 'mov', 'add', 'rax', 'al', 'usRegAddress', 'esi'}, 'eMBRegCoilsCB': {'mov', 'rbp', 'si', 'usAddress'}}, 10: {'eMBFuncWriteMultipleCoils': {'ptr', 'edx', 'add', 'and', '0', 'or', '1', '7', 'eax', 'rax', 'byte', 'usCoilCnt', 'movzx', 'shr', '7B0h', 'mov', 'ax', 'usNCoils', '3', 'cmp', '8', 'rbp', 'test', 'al', 'shl'}, 'eMBRegCoilsCB': {'edx', 'rbp', 'eax', 'mov', 'ax', 'usNCoils'}}, 11: {'eMBFuncWriteMultipleCoils': {'ptr', 'edx', 'add', 'and', '0', 'or', '1', '7', 'eax', 'rax', 'ucByteCountVerify', 'byte', 'usCoilCnt', 'movzx', 'shr', '7B0h', 'mov', 'ax', 'usNCoils', '3', 'ucByteCount', 'cmp', 'rbp', 'test', 'al'}, 'eMBRegCoilsCB': {'edx', 'rbp', 'eax', 'mov', 'ax', 'usNCoils'}}, 12: {'eMBFuncWriteMultipleCoils': {'byte', 'ucByteCount', 'ptr', 'cmp', 'rbp', 'eax', 'movzx', 'mov', 'rax', 'al', '5'}}}}
2025-03-13 17:14:19,152 - my_text.py:386  - 5:320600000006ff0100000006 Updated c_taint_asm_dict: {'1': {4: {'xMBPortTCPPool': {'aucTCPBuf', 'edx', 'usLength', 'add', '6', 'or', 'eax', '4', 'movzx', 'mov', 'ax', 'sub', 'cmp', '8', 'n', 'rbp', 'cs', 'usTCPFrameBytesLeft', 'al', 'shl'}}, 5: {'xMBPortTCPPool': {'sub', 'aucTCPBuf', 'or', 'edx', 'cmp', 'rbp', 'n', 'eax', 'movzx', 'cs', 'usLength', 'mov', 'add', '6', 'usTCPFrameBytesLeft', 'al', '5', 'ax'}}, 2: {'eMBTCPReceive': {'byte', 'or', 'ptr', 'cmp', '8', 'rbp', 'eax', 'movzx', 'usPID', 'mov', 'rax', 'al', 'shl', 'ax', '0'}}, 3: {'eMBTCPReceive': {'byte', 'or', 'ptr', 'cmp', 'rbp', 'eax', 'movzx', 'usPID', 'rax', 'al', 'ax', '0'}}, 7: {'eMBPoll': {'0FFFFFF80h', 'or', 'byte', 'ptr', 'cmp', 'edx', 'cs', 'movzx', 'eax', 'mov', 'rax', 'ucFunctionCode_2897', 'al', 'dl'}}, 8: {'eMBFuncReadCoils': {'byte', '1', 'ptr', 'or', 'ax', 'rbp', '8', 'eax', 'movzx', 'mov', 'add', 'rax', 'usAddress', 'shl', 'usRegAddress', 'esi', 'al'}, 'eMBRegCoilsCB': {'mov', 'rbp', 'si', 'usAddress'}}, 9: {'eMBFuncReadCoils': {'byte', '1', 'ptr', 'or', 'ax', 'rbp', 'eax', 'movzx', 'mov', 'add', 'rax', 'usAddress', 'usRegAddress', 'esi', 'al'}, 'eMBRegCoilsCB': {'mov', 'rbp', 'si', 'usAddress'}}, 10: {'eMBFuncReadCoils': {'ptr', 'edx', 'add', 'and', '0', '7CFh', 'or', '1', '7', 'eax', 'rax', 'byte', 'movzx', 'shr', 'usCoilCount', 'mov', 'ax', 'usNCoils', '3', 'cmp', 'rbp', '8', 'test', 'al', 'shl'}, 'eMBRegCoilsCB': {'edx', 'rbp', 'eax', 'mov', 'ax', 'usNCoils'}}, 11: {'eMBFuncReadCoils': {'ptr', 'edx', 'add', 'and', '0', '7CFh', 'or', '1', '7', 'eax', 'rax', 'dl', 'byte', 'movzx', 'shr', 'usCoilCount', 'mov', 'ax', 'usNCoils', '3', 'ucNBytes', 'cmp', 'rbp', 'test', 'al'}, 'eMBRegCoilsCB': {'edx', 'rbp', 'eax', 'mov', 'ax', 'usNCoils'}}}}
2025-03-13 17:14:19,152 - my_text.py:386  - 6:320800000006ff020000000a Updated c_taint_asm_dict: {'1': {4: {'xMBPortTCPPool': {'aucTCPBuf', 'edx', 'usLength', 'add', '6', 'or', 'eax', '4', 'movzx', 'mov', 'ax', 'sub', 'cmp', '8', 'n', 'rbp', 'cs', 'usTCPFrameBytesLeft', 'al', 'shl'}}, 5: {'xMBPortTCPPool': {'sub', 'aucTCPBuf', 'or', 'edx', 'cmp', 'rbp', 'n', 'eax', 'movzx', 'cs', 'usLength', 'mov', 'add', '6', 'usTCPFrameBytesLeft', 'al', '5', 'ax'}}, 2: {'eMBTCPReceive': {'byte', 'or', 'ptr', 'cmp', '8', 'rbp', 'eax', 'movzx', 'usPID', 'mov', 'rax', 'al', 'shl', 'ax', '0'}}, 3: {'eMBTCPReceive': {'byte', 'or', 'ptr', 'cmp', 'rbp', 'eax', 'movzx', 'usPID', 'rax', 'al', 'ax', '0'}}, 7: {'eMBPoll': {'0FFFFFF80h', 'or', 'byte', 'ptr', 'cmp', 'edx', 'cs', 'movzx', 'eax', 'mov', 'rax', 'ucFunctionCode_2897', 'al', 'dl'}}, 8: {'eMBFuncReadDiscreteInputs': {'ecx', 'byte', '1', 'ptr', 'or', 'ax', 'rbp', '8', 'eax', 'movzx', 'usAddress', 'mov', 'add', 'rax', 'al', 'shl', 'usRegAddress', 'esi'}, 'eMBRegDiscreteCB': {'ecx', 'rbp', 'mov', 'cx', 'usAddress', 'esi'}}, 9: {'eMBFuncReadDiscreteInputs': {'ecx', 'byte', '1', 'ptr', 'or', 'ax', 'rbp', 'eax', 'movzx', 'usAddress', 'mov', 'add', 'rax', 'al', 'usRegAddress', 'esi'}, 'eMBRegDiscreteCB': {'ecx', 'rbp', 'mov', 'cx', 'usAddress', 'esi'}}, 10: {'eMBFuncReadDiscreteInputs': {'ptr', 'edx', 'add', 'and', '0', '7CFh', 'or', '1', '7', 'eax', 'rax', 'byte', 'movzx', 'shr', 'mov', 'ax', '3', 'usDiscreteCnt', 'cmp', '8', 'rbp', 'usNDiscrete', 'test', 'al', 'shl'}, 'eMBRegDiscreteCB': {'edx', 'rbp', 'eax', 'usNDiscrete', 'mov', 'ax'}}, 11: {'eMBFuncReadDiscreteInputs': {'ptr', 'edx', 'add', 'and', '0', '7CFh', 'or', '1', '7', 'eax', 'rax', 'dl', 'byte', 'movzx', 'shr', 'mov', 'ax', '3', 'usDiscreteCnt', 'ucNBytes', 'cmp', 'rbp', 'usNDiscrete', 'test', 'al'}, 'eMBRegDiscreteCB': {'edx', 'rbp', 'eax', 'usNDiscrete', 'mov', 'ax'}}}}
2025-03-13 17:14:19,152 - my_text.py:397  - bss:0000000000406260 __bss_start (FILE *)
2025-03-13 17:14:19,152 - my_text.py:397  - bss:0000000000406268 completed.7594 (Unknown)
2025-03-13 17:14:19,152 - my_text.py:397  - bss:0000000000406280 usRegInputBuf (USHORT[4])
2025-03-13 17:14:19,152 - my_text.py:397  - bss:00000000004062A0 usRegHoldingBuf (USHORT[130])
2025-03-13 17:14:19,152 - my_text.py:397  - bss:00000000004063C0 xLock (pthread_mutex_t)
2025-03-13 17:14:19,152 - my_text.py:397  - bss:00000000004063E8 ePollThreadState (ThreadState)
2025-03-13 17:14:19,152 - my_text.py:397  - bss:00000000004063EC eQueuedEvent (eMBEventType)
2025-03-13 17:14:19,152 - my_text.py:397  - bss:00000000004063F0 xEventInQueue (BOOL[16])
2025-03-13 17:14:19,152 - my_text.py:397  - bss:0000000000406400 allset (fd_set)
2025-03-13 17:14:19,152 - my_text.py:397  - bss:0000000000406480 aucTCPBuf (UCHAR[263])
2025-03-13 17:14:19,152 - my_text.py:397  - bss:0000000000406588 usTCPBufPos (USHORT)
2025-03-13 17:14:19,153 - my_text.py:397  - bss:000000000040658A usTCPFrameBytesLeft (USHORT)
2025-03-13 17:14:19,153 - my_text.py:397  - bss:0000000000406590 ucMBAddress (UCHAR)
2025-03-13 17:14:19,153 - my_text.py:397  - bss:0000000000406594 eMBCurrentMode (eMBMode)
2025-03-13 17:14:19,153 - my_text.py:397  - bss:0000000000406598 peMBFrameSendCur (peMBFrameSend)
2025-03-13 17:14:19,153 - my_text.py:397  - bss:00000000004065A0 pvMBFrameStartCur (pvMBFrameStart)
2025-03-13 17:14:19,153 - my_text.py:397  - bss:00000000004065A8 pvMBFrameStopCur (pvMBFrameStop)
2025-03-13 17:14:19,153 - my_text.py:397  - bss:00000000004065B0 peMBFrameReceiveCur (peMBFrameReceive)
2025-03-13 17:14:19,153 - my_text.py:397  - bss:00000000004065B8 pvMBFrameCloseCur (pvMBFrameClose)
2025-03-13 17:14:19,153 - my_text.py:397  - bss:00000000004065C0 ucRcvAddress.2896 (UCHAR)
2025-03-13 17:14:19,153 - my_text.py:397  - bss:00000000004065C8 ucMBFrame.2895 (UCHAR *)
2025-03-13 17:14:19,153 - my_text.py:397  - bss:00000000004065D0 usLength.2898 (USHORT)
2025-03-13 17:14:19,153 - my_text.py:397  - bss:00000000004065D2 ucFunctionCode.2897 (UCHAR)
2025-03-13 17:14:19,153 - my_text.py:397  - bss:00000000004065D4 eException.2899 (eMBException)
2025-03-13 17:14:19,153 - my_text.py:397  - bss:00000000004065E0 ucMBSlaveID (UCHAR[32])
2025-03-13 17:14:19,153 - my_text.py:397  - bss:0000000000406600 usMBSlaveIDLen (USHORT)
2025-03-13 17:14:19,153 - my_text.py:397  - bss:0000000000406604 xListenSocket (SOCKET)
2025-03-13 17:14:19,153 - my_text.py:397  - bss:0000000000406608 pxMBFrameCBByteReceived (BOOL (*)(void))
2025-03-13 17:14:19,153 - my_text.py:397  - bss:0000000000406610 pxMBFrameCBReceiveFSMCur (BOOL (*)(void))
2025-03-13 17:14:19,153 - my_text.py:397  - bss:0000000000406618 pxMBFrameCBTransmitterEmpty (BOOL (*)(void))
2025-03-13 17:14:19,153 - my_text.py:397  - bss:0000000000406620 pxMBFrameCBTransmitFSMCur (BOOL (*)(void))
2025-03-13 17:14:19,153 - my_text.py:397  - bss:0000000000406628 pxMBPortCBTimerExpired (BOOL (*)(void))
2025-03-13 17:14:19,154 - my_text.py:435  - {'1': {4: {'xMBPortTCPPool': {'      if ( usTCPBufPos >= usLength + 6 )', '      while ( usTCPBufPos <= 6u );', '      usTCPFrameBytesLeft = usLength - usTCPBufPos + 6;', '        break;', '        while ( (fread.__fds_bits[xClientSocket / 64] & (1LL << (xClientSocket % 64))) == 0 );', '  while ( usTCPBufPos != usLength + 6 );', '      usLength = _byteswap_ushort(*(unsigned __int16 *)&aucTCPBuf[4]);', '        usTCPBufPos += ret;', '        ret = recv(xClientSocket, &aucTCPBuf[usTCPBufPos], usTCPFrameBytesLeft, 0);', '        usTCPFrameBytesLeft -= ret;'}}, 5: {'xMBPortTCPPool': {'      if ( usTCPBufPos >= usLength + 6 )', '      usTCPFrameBytesLeft = usLength - usTCPBufPos + 6;', '        break;', '        while ( (fread.__fds_bits[xClientSocket / 64] & (1LL << (xClientSocket % 64))) == 0 );', '  while ( usTCPBufPos != usLength + 6 );', '      usLength = _byteswap_ushort(*(unsigned __int16 *)&aucTCPBuf[4]);', '        usTCPBufPos += ret;', '        ret = recv(xClientSocket, &aucTCPBuf[usTCPBufPos], usTCPFrameBytesLeft, 0);', '        usTCPFrameBytesLeft -= ret;'}}, 2: {'eMBTCPReceive': {'  usPID = pucMBTCPFrame[0][2] << 8;', '  usPID |= pucMBTCPFrame[0][3];'}}, 3: {'eMBTCPReceive': {'  usPID |= pucMBTCPFrame[0][3];'}}, 7: {'eMBPoll': {'      ucFunctionCode_2897 = *ucMBFrame_2895;', '        if ( xFuncHandlers[i].ucFunctionCode == ucFunctionCode_2897 )', '          *ucMBFrame_2895 = ucFunctionCode_2897 | 0x80;'}}, 8: {'eMBFuncReadInputRegister': {'  eRegStatus = eMBRegInputCB(pucFrame + 2, usRegAddress, usRegCount);', '  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;'}, 'eMBRegInputCB': {'  if ( usAddress <= 0x3E7u || usAddress + usNRegs > 1004 )', '  usNRegsa = usNRegs;'}}, 9: {'eMBFuncReadInputRegister': {'  eRegStatus = eMBRegInputCB(pucFrame + 2, usRegAddress, usRegCount);', '  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;'}, 'eMBRegInputCB': {'  if ( usAddress <= 0x3E7u || usAddress + usNRegs > 1004 )', '  usNRegsa = usNRegs;'}}, 10: {'eMBFuncReadInputRegister': {'  usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));', '  pucFrame[1] = 2 * usRegCount;', '  if ( !usRegCount || usRegCount > 0x7Cu )', '  eRegStatus = eMBRegInputCB(pucFrame + 2, usRegAddress, usRegCount);'}, 'eMBRegInputCB': {'  usNRegsa = usNRegs;'}}, 11: {'eMBFuncReadInputRegister': {'  usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));', '  pucFrame[1] = 2 * usRegCount;', '  if ( !usRegCount || usRegCount > 0x7Cu )', '  eRegStatus = eMBRegInputCB(pucFrame + 2, usRegAddress, usRegCount);'}, 'eMBRegInputCB': {'  usNRegsa = usNRegs;'}}}}
2025-03-13 17:14:19,154 - my_text.py:446  - 0:25cc00000006ff0400300028 Updated c_taint_c_dict: {'1': {4: {'xMBPortTCPPool': {'aucTCPBuf', 'unsigned', 'usLength', '64', '6', 'recv', 'usTCPBufPos', '0', '6u', '_byteswap_ushort', '__int16', 'if', 'while', '4', 'ret', '__fds_bits', '1LL', 'fread', 'usTCPFrameBytesLeft', 'xClientSocket', 'break'}}, 5: {'xMBPortTCPPool': {'aucTCPBuf', 'unsigned', 'usLength', '64', '6', 'recv', 'usTCPBufPos', '0', '_byteswap_ushort', '__int16', 'if', 'while', '4', 'ret', '__fds_bits', '1LL', 'fread', 'usTCPFrameBytesLeft', 'xClientSocket', 'break'}}, 2: {'eMBTCPReceive': {'2', '8', 'usPID', '3', '0', 'pucMBTCPFrame'}}, 3: {'eMBTCPReceive': {'3', '0', 'usPID', 'pucMBTCPFrame'}}, 7: {'eMBPoll': {'i', '0x80', 'xFuncHandlers', 'ucFunctionCode', 'if', 'ucFunctionCode_2897', 'ucMBFrame_2895'}}, 8: {'eMBFuncReadInputRegister': {'_WORD', 'pucFrame', 'eRegStatus', 'usRegCount', '1', '2', '_byteswap_ushort', 'eMBRegInputCB', 'usRegAddress'}, 'eMBRegInputCB': {'1004', 'usNRegsa', 'if', 'usNRegs', 'usAddress', '0x3E7u'}}, 9: {'eMBFuncReadInputRegister': {'_WORD', 'pucFrame', 'eRegStatus', 'usRegCount', '1', '2', '_byteswap_ushort', 'eMBRegInputCB', 'usRegAddress'}, 'eMBRegInputCB': {'1004', 'usNRegsa', 'if', 'usNRegs', 'usAddress', '0x3E7u'}}, 10: {'eMBFuncReadInputRegister': {'_WORD', 'pucFrame', '1', 'usRegCount', 'eRegStatus', '_byteswap_ushort', '2', 'eMBRegInputCB', 'if', 'usRegAddress', '3', '0x7Cu'}, 'eMBRegInputCB': {'usNRegsa', 'usNRegs'}}, 11: {'eMBFuncReadInputRegister': {'_WORD', 'pucFrame', '1', 'usRegCount', 'eRegStatus', '_byteswap_ushort', '2', 'eMBRegInputCB', 'if', 'usRegAddress', '3', '0x7Cu'}, 'eMBRegInputCB': {'usNRegsa', 'usNRegs'}}}}
2025-03-13 17:14:19,154 - my_text.py:463  - 0:25cc00000006ff0400300028 var_flow: {'1': {4: {'global:usTCPBufPos', 'global:usTCPFrameBytesLeft', 'global:xClientSocket', 'xMBPortTCPPool:ret', 'xMBPortTCPPool:fread', 'xMBPortTCPPool:n', 'xMBPortTCPPool:usLength', 'global:aucTCPBuf'}, 5: {'global:usTCPBufPos', 'global:usTCPFrameBytesLeft', 'global:xClientSocket', 'xMBPortTCPPool:ret', 'xMBPortTCPPool:fread', 'xMBPortTCPPool:n', 'xMBPortTCPPool:usLength', 'global:aucTCPBuf'}, 2: {'eMBTCPReceive:usPID', 'eMBTCPReceive:pucMBTCPFrame'}, 3: {'eMBTCPReceive:usPID', 'eMBTCPReceive:pucMBTCPFrame'}, 7: {'global:ucMBFrame_2895', 'global:ucFunctionCode_2897', 'eMBPoll:i'}, 8: {'eMBFuncReadInputRegister:pucFrame', 'eMBRegInputCB:usNRegs', 'eMBFuncReadInputRegister:usRegAddress', 'eMBFuncReadInputRegister:usRegCount', 'eMBFuncReadInputRegister:eRegStatus', 'eMBRegInputCB:usAddress'}, 9: {'eMBFuncReadInputRegister:pucFrame', 'eMBRegInputCB:usNRegs', 'eMBFuncReadInputRegister:usRegAddress', 'eMBFuncReadInputRegister:usRegCount', 'eMBFuncReadInputRegister:eRegStatus', 'eMBRegInputCB:usAddress'}, 10: {'eMBFuncReadInputRegister:pucFrame', 'eMBRegInputCB:usNRegs', 'eMBFuncReadInputRegister:usRegAddress', 'eMBFuncReadInputRegister:usRegCount', 'eMBFuncReadInputRegister:eRegStatus'}, 11: {'eMBFuncReadInputRegister:pucFrame', 'eMBRegInputCB:usNRegs', 'eMBFuncReadInputRegister:usRegAddress', 'eMBFuncReadInputRegister:usRegCount', 'eMBFuncReadInputRegister:eRegStatus'}}}
2025-03-13 17:14:19,154 - my_text.py:481  - Key pair (4, 5): Similarity = 1.0
2025-03-13 17:14:19,155 - my_text.py:481  - Key pair (2, 3): Similarity = 1.0
2025-03-13 17:14:19,155 - my_text.py:481  - Key pair (8, 9): Similarity = 1.0
2025-03-13 17:14:19,155 - my_text.py:481  - Key pair (10, 11): Similarity = 1.0
2025-03-13 17:14:19,155 - my_text.py:485  - 0:25cc00000006ff0400300028 Similarity matrix: {(4, 5): 1.0, (5, 2): 0.0, (2, 3): 1.0, (3, 7): 0.0, (7, 8): 0.0, (8, 9): 1.0, (9, 10): 0.8333333333333334, (10, 11): 1.0}
2025-03-13 17:14:19,155 - my_text.py:522  - 0:25cc00000006ff0400300028 Merged queue: [(2, 3), (4, 5), (7,), (8, 9), (10, 11)]
2025-03-13 17:14:19,155 - my_text.py:528  - 0:25cc00000006ff0400300028 used_fields: ['2,3', '4,5', '7', '8,9', '10,11']
2025-03-13 17:14:19,155 - my_text.py:544  - 0:25cc00000006ff0400300028 data_new: {(2, 3): {'eMBTCPReceive': ['usPID', 'pucMBTCPFrame']}, (4, 5): {'global': ['usTCPBufPos', 'usTCPFrameBytesLeft', 'xClientSocket', 'aucTCPBuf'], 'xMBPortTCPPool': ['ret', 'fread', 'n', 'usLength']}, (7,): {'global': ['ucMBFrame_2895', 'ucFunctionCode_2897'], 'eMBPoll': ['i']}, (8, 9): {'eMBFuncReadInputRegister': ['pucFrame', 'usRegAddress', 'usRegCount', 'eRegStatus'], 'eMBRegInputCB': ['usNRegs', 'usAddress']}, (10, 11): {'eMBFuncReadInputRegister': ['pucFrame', 'usRegAddress', 'usRegCount', 'eRegStatus'], 'eMBRegInputCB': ['usNRegs']}}
2025-03-13 17:14:22,909 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:14:31,427 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:14:41,528 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:14:50,515 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:14:53,549 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:14:54,195 - my_text.py:645  - 0:25cc00000006ff0400300028 field_type: {'2,3': ['int'], '4,5': ['int'], '7': ['int'], '8,9': ['int'], '10,11': ['int']}
2025-03-13 17:14:54,195 - my_text.py:646  - 0:25cc00000006ff0400300028 field_func: {'2,3': ['length'], '4,5': ['length'], '7': ['length'], '8,9': ['length'], '10,11': ['length']}
2025-03-13 17:14:54,774 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:14:57,794 - my_text.py:685  - 0:25cc00000006ff0400300028 field_llm_type: {}
2025-03-13 17:14:57,794 - my_text.py:686  - 0:25cc00000006ff0400300028 field_llm_Sem: {}
2025-03-13 17:14:57,794 - my_text.py:688  - 0:25cc00000006ff0400300028 used_fields_llm: ['2,3', '4,5', '7', '8,9', '10,11']
2025-03-13 17:14:57,794 - my_text.py:689  - 0:25cc00000006ff0400300028 field_llm_type_llm: {'2,3': ['int'], '4,5': ['int'], '7': ['int'], '8,9': ['int'], '10,11': ['int']}
2025-03-13 17:14:57,794 - my_text.py:690  - 0:25cc00000006ff0400300028 field_llm_Sem_llm: {'2,3': ['length'], '4,5': ['length'], '7': ['length'], '8,9': ['length'], '10,11': ['length']}
2025-03-13 17:14:57,794 - my_text.py:435  - {'1': {4: {'xMBPortTCPPool': {'      if ( usTCPBufPos >= usLength + 6 )', '      while ( usTCPBufPos <= 6u );', '      usTCPFrameBytesLeft = usLength - usTCPBufPos + 6;', '        break;', '        while ( (fread.__fds_bits[xClientSocket / 64] & (1LL << (xClientSocket % 64))) == 0 );', '  while ( usTCPBufPos != usLength + 6 );', '      usLength = _byteswap_ushort(*(unsigned __int16 *)&aucTCPBuf[4]);', '        usTCPBufPos += ret;', '        ret = recv(xClientSocket, &aucTCPBuf[usTCPBufPos], usTCPFrameBytesLeft, 0);', '        usTCPFrameBytesLeft -= ret;'}}, 5: {'xMBPortTCPPool': {'      if ( usTCPBufPos >= usLength + 6 )', '      usTCPFrameBytesLeft = usLength - usTCPBufPos + 6;', '        break;', '        while ( (fread.__fds_bits[xClientSocket / 64] & (1LL << (xClientSocket % 64))) == 0 );', '  while ( usTCPBufPos != usLength + 6 );', '      usLength = _byteswap_ushort(*(unsigned __int16 *)&aucTCPBuf[4]);', '        usTCPBufPos += ret;', '        ret = recv(xClientSocket, &aucTCPBuf[usTCPBufPos], usTCPFrameBytesLeft, 0);', '        usTCPFrameBytesLeft -= ret;'}}, 2: {'eMBTCPReceive': {'  usPID = pucMBTCPFrame[0][2] << 8;', '  usPID |= pucMBTCPFrame[0][3];'}}, 3: {'eMBTCPReceive': {'  usPID |= pucMBTCPFrame[0][3];'}}, 7: {'eMBPoll': {'      ucFunctionCode_2897 = *ucMBFrame_2895;', '        if ( xFuncHandlers[i].ucFunctionCode == ucFunctionCode_2897 )', '          *ucMBFrame_2895 = ucFunctionCode_2897 | 0x80;'}}, 8: {'eMBFuncReadHoldingRegister': {'  eRegStatus = eMBRegHoldingCB(pucFrame + 2, usRegAddress, usRegCount, MB_REG_READ);', '  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;'}, 'eMBRegHoldingCB': {'  if ( usAddress <= 0x7CFu || usAddress + usNRegs > 2130 )', '  usNRegsa = usNRegs;'}}, 9: {'eMBFuncReadHoldingRegister': {'  eRegStatus = eMBRegHoldingCB(pucFrame + 2, usRegAddress, usRegCount, MB_REG_READ);', '  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;'}, 'eMBRegHoldingCB': {'  if ( usAddress <= 0x7CFu || usAddress + usNRegs > 2130 )', '  usNRegsa = usNRegs;'}}, 10: {'eMBFuncReadHoldingRegister': {'  usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));', '  pucFrame[1] = 2 * usRegCount;', '  eRegStatus = eMBRegHoldingCB(pucFrame + 2, usRegAddress, usRegCount, MB_REG_READ);', '  if ( !usRegCount || usRegCount > 0x7Du )'}, 'eMBRegHoldingCB': {'  usNRegsa = usNRegs;'}}, 11: {'eMBFuncReadHoldingRegister': {'  usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));', '  pucFrame[1] = 2 * usRegCount;', '  eRegStatus = eMBRegHoldingCB(pucFrame + 2, usRegAddress, usRegCount, MB_REG_READ);', '  if ( !usRegCount || usRegCount > 0x7Du )'}, 'eMBRegHoldingCB': {'  usNRegsa = usNRegs;'}}}}
2025-03-13 17:14:57,794 - my_text.py:446  - 1:011100000006ff0300020008 Updated c_taint_c_dict: {'1': {4: {'xMBPortTCPPool': {'aucTCPBuf', 'unsigned', 'usLength', '64', '6', 'recv', 'usTCPBufPos', '0', '6u', '_byteswap_ushort', '__int16', 'if', 'while', '4', 'ret', '__fds_bits', '1LL', 'fread', 'usTCPFrameBytesLeft', 'xClientSocket', 'break'}}, 5: {'xMBPortTCPPool': {'aucTCPBuf', 'unsigned', 'usLength', '64', '6', 'recv', 'usTCPBufPos', '0', '_byteswap_ushort', '__int16', 'if', 'while', '4', 'ret', '__fds_bits', '1LL', 'fread', 'usTCPFrameBytesLeft', 'xClientSocket', 'break'}}, 2: {'eMBTCPReceive': {'2', '8', 'usPID', '3', '0', 'pucMBTCPFrame'}}, 3: {'eMBTCPReceive': {'3', '0', 'usPID', 'pucMBTCPFrame'}}, 7: {'eMBPoll': {'i', '0x80', 'xFuncHandlers', 'ucFunctionCode', 'if', 'ucFunctionCode_2897', 'ucMBFrame_2895'}}, 8: {'eMBFuncReadHoldingRegister': {'_WORD', 'pucFrame', 'eRegStatus', 'usRegCount', '1', '2', '_byteswap_ushort', 'MB_REG_READ', 'usRegAddress', 'eMBRegHoldingCB'}, 'eMBRegHoldingCB': {'0x7CFu', 'usNRegsa', 'if', 'usNRegs', '2130', 'usAddress'}}, 9: {'eMBFuncReadHoldingRegister': {'_WORD', 'pucFrame', 'eRegStatus', 'usRegCount', '1', '2', '_byteswap_ushort', 'MB_REG_READ', 'usRegAddress', 'eMBRegHoldingCB'}, 'eMBRegHoldingCB': {'0x7CFu', 'usNRegsa', 'if', 'usNRegs', '2130', 'usAddress'}}, 10: {'eMBFuncReadHoldingRegister': {'_WORD', 'pucFrame', '1', 'usRegCount', 'eRegStatus', '_byteswap_ushort', '2', 'eMBRegHoldingCB', 'MB_REG_READ', 'if', '0x7Du', 'usRegAddress', '3'}, 'eMBRegHoldingCB': {'usNRegsa', 'usNRegs'}}, 11: {'eMBFuncReadHoldingRegister': {'_WORD', 'pucFrame', '1', 'usRegCount', 'eRegStatus', '_byteswap_ushort', '2', 'eMBRegHoldingCB', 'MB_REG_READ', 'if', '0x7Du', 'usRegAddress', '3'}, 'eMBRegHoldingCB': {'usNRegsa', 'usNRegs'}}}}
2025-03-13 17:14:57,795 - my_text.py:463  - 1:011100000006ff0300020008 var_flow: {'1': {4: {'global:usTCPBufPos', 'global:usTCPFrameBytesLeft', 'global:xClientSocket', 'xMBPortTCPPool:ret', 'xMBPortTCPPool:fread', 'xMBPortTCPPool:n', 'xMBPortTCPPool:usLength', 'global:aucTCPBuf'}, 5: {'global:usTCPBufPos', 'global:usTCPFrameBytesLeft', 'global:xClientSocket', 'xMBPortTCPPool:ret', 'xMBPortTCPPool:fread', 'xMBPortTCPPool:n', 'xMBPortTCPPool:usLength', 'global:aucTCPBuf'}, 2: {'eMBTCPReceive:usPID', 'eMBTCPReceive:pucMBTCPFrame'}, 3: {'eMBTCPReceive:usPID', 'eMBTCPReceive:pucMBTCPFrame'}, 7: {'global:ucMBFrame_2895', 'global:ucFunctionCode_2897', 'eMBPoll:i'}, 8: {'eMBRegHoldingCB:usAddress', 'eMBFuncReadHoldingRegister:eRegStatus', 'eMBRegHoldingCB:usNRegs', 'eMBFuncReadHoldingRegister:pucFrame', 'eMBFuncReadHoldingRegister:usRegCount', 'eMBFuncReadHoldingRegister:usRegAddress'}, 9: {'eMBRegHoldingCB:usAddress', 'eMBFuncReadHoldingRegister:eRegStatus', 'eMBRegHoldingCB:usNRegs', 'eMBFuncReadHoldingRegister:pucFrame', 'eMBFuncReadHoldingRegister:usRegCount', 'eMBFuncReadHoldingRegister:usRegAddress'}, 10: {'eMBFuncReadHoldingRegister:eRegStatus', 'eMBRegHoldingCB:usNRegs', 'eMBFuncReadHoldingRegister:usRegCount', 'eMBFuncReadHoldingRegister:pucFrame', 'eMBFuncReadHoldingRegister:usRegAddress'}, 11: {'eMBFuncReadHoldingRegister:eRegStatus', 'eMBRegHoldingCB:usNRegs', 'eMBFuncReadHoldingRegister:usRegCount', 'eMBFuncReadHoldingRegister:pucFrame', 'eMBFuncReadHoldingRegister:usRegAddress'}}}
2025-03-13 17:14:57,795 - my_text.py:481  - Key pair (4, 5): Similarity = 1.0
2025-03-13 17:14:57,795 - my_text.py:481  - Key pair (2, 3): Similarity = 1.0
2025-03-13 17:14:57,795 - my_text.py:481  - Key pair (8, 9): Similarity = 1.0
2025-03-13 17:14:57,795 - my_text.py:481  - Key pair (10, 11): Similarity = 1.0
2025-03-13 17:14:57,795 - my_text.py:485  - 1:011100000006ff0300020008 Similarity matrix: {(4, 5): 1.0, (5, 2): 0.0, (2, 3): 1.0, (3, 7): 0.0, (7, 8): 0.0, (8, 9): 1.0, (9, 10): 0.8333333333333334, (10, 11): 1.0}
2025-03-13 17:14:57,795 - my_text.py:522  - 1:011100000006ff0300020008 Merged queue: [(2, 3), (4, 5), (7,), (8, 9), (10, 11)]
2025-03-13 17:14:57,795 - my_text.py:528  - 1:011100000006ff0300020008 used_fields: ['2,3', '4,5', '7', '8,9', '10,11']
2025-03-13 17:14:57,795 - my_text.py:544  - 1:011100000006ff0300020008 data_new: {(2, 3): {'eMBTCPReceive': ['usPID', 'pucMBTCPFrame']}, (4, 5): {'global': ['usTCPBufPos', 'usTCPFrameBytesLeft', 'xClientSocket', 'aucTCPBuf'], 'xMBPortTCPPool': ['ret', 'fread', 'n', 'usLength']}, (7,): {'global': ['ucMBFrame_2895', 'ucFunctionCode_2897'], 'eMBPoll': ['i']}, (8, 9): {'eMBRegHoldingCB': ['usAddress', 'usNRegs'], 'eMBFuncReadHoldingRegister': ['eRegStatus', 'pucFrame', 'usRegCount', 'usRegAddress']}, (10, 11): {'eMBFuncReadHoldingRegister': ['eRegStatus', 'usRegCount', 'pucFrame', 'usRegAddress'], 'eMBRegHoldingCB': ['usNRegs']}}
2025-03-13 17:14:59,405 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:15:08,836 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:15:20,018 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:15:23,496 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:15:34,054 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:15:43,100 - my_text.py:645  - 1:011100000006ff0300020008 field_type: {'2,3': ['int'], '4,5': ['int'], '7': ['int'], '8,9': ['int'], '10,11': ['int']}
2025-03-13 17:15:43,101 - my_text.py:646  - 1:011100000006ff0300020008 field_func: {'2,3': ['length'], '4,5': ['length'], '7': ['function_code'], '8,9': ['length'], '10,11': ['length']}
2025-03-13 17:15:43,702 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:15:45,097 - my_text.py:685  - 1:011100000006ff0300020008 field_llm_type: {}
2025-03-13 17:15:45,097 - my_text.py:686  - 1:011100000006ff0300020008 field_llm_Sem: {}
2025-03-13 17:15:45,097 - my_text.py:688  - 1:011100000006ff0300020008 used_fields_llm: ['2,3', '4,5', '7', '8,9', '10,11']
2025-03-13 17:15:45,097 - my_text.py:689  - 1:011100000006ff0300020008 field_llm_type_llm: {'2,3': ['int'], '4,5': ['int'], '7': ['int'], '8,9': ['int'], '10,11': ['int']}
2025-03-13 17:15:45,097 - my_text.py:690  - 1:011100000006ff0300020008 field_llm_Sem_llm: {'2,3': ['length'], '4,5': ['length'], '7': ['function_code'], '8,9': ['length'], '10,11': ['length']}
2025-03-13 17:15:45,097 - my_text.py:435  - {'1': {4: {'xMBPortTCPPool': {'      if ( usTCPBufPos >= usLength + 6 )', '      while ( usTCPBufPos <= 6u );', '      usTCPFrameBytesLeft = usLength - usTCPBufPos + 6;', '        break;', '        while ( (fread.__fds_bits[xClientSocket / 64] & (1LL << (xClientSocket % 64))) == 0 );', '  while ( usTCPBufPos != usLength + 6 );', '      usLength = _byteswap_ushort(*(unsigned __int16 *)&aucTCPBuf[4]);', '        usTCPBufPos += ret;', '        ret = recv(xClientSocket, &aucTCPBuf[usTCPBufPos], usTCPFrameBytesLeft, 0);', '        usTCPFrameBytesLeft -= ret;'}}, 5: {'xMBPortTCPPool': {'      if ( usTCPBufPos >= usLength + 6 )', '      usTCPFrameBytesLeft = usLength - usTCPBufPos + 6;', '        break;', '        while ( (fread.__fds_bits[xClientSocket / 64] & (1LL << (xClientSocket % 64))) == 0 );', '  while ( usTCPBufPos != usLength + 6 );', '      usLength = _byteswap_ushort(*(unsigned __int16 *)&aucTCPBuf[4]);', '        usTCPBufPos += ret;', '        ret = recv(xClientSocket, &aucTCPBuf[usTCPBufPos], usTCPFrameBytesLeft, 0);', '        usTCPFrameBytesLeft -= ret;'}}, 2: {'eMBTCPReceive': {'  usPID = pucMBTCPFrame[0][2] << 8;', '  usPID |= pucMBTCPFrame[0][3];'}}, 3: {'eMBTCPReceive': {'  usPID |= pucMBTCPFrame[0][3];'}}, 7: {'eMBPoll': {'      ucFunctionCode_2897 = *ucMBFrame_2895;', '        if ( xFuncHandlers[i].ucFunctionCode == ucFunctionCode_2897 )', '          *ucMBFrame_2895 = ucFunctionCode_2897 | 0x80;'}}, 8: {'eMBFuncWriteMultipleHoldingRegister': {'  eRegStatus = eMBRegHoldingCB(pucFrame + 6, usRegAddress, usRegCount, MB_REG_WRITE);', '  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;'}, 'eMBRegHoldingCB': {'  if ( usAddress <= 0x7CFu || usAddress + usNRegs > 2130 )', '  usNRegsa = usNRegs;'}}, 9: {'eMBFuncWriteMultipleHoldingRegister': {'  eRegStatus = eMBRegHoldingCB(pucFrame + 6, usRegAddress, usRegCount, MB_REG_WRITE);', '  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;'}, 'eMBRegHoldingCB': {'  if ( usAddress <= 0x7CFu || usAddress + usNRegs > 2130 )', '  usNRegsa = usNRegs;'}}, 10: {'eMBFuncWriteMultipleHoldingRegister': {'  usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));', '  eRegStatus = eMBRegHoldingCB(pucFrame + 6, usRegAddress, usRegCount, MB_REG_WRITE);', '  if ( !usRegCount || usRegCount > 0x78u || 2 * (_BYTE)usRegCount != pucFrame[5] )'}, 'eMBRegHoldingCB': {'  usNRegsa = usNRegs;'}}, 11: {'eMBFuncWriteMultipleHoldingRegister': {'  usRegCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));', '  eRegStatus = eMBRegHoldingCB(pucFrame + 6, usRegAddress, usRegCount, MB_REG_WRITE);', '  if ( !usRegCount || usRegCount > 0x78u || 2 * (_BYTE)usRegCount != pucFrame[5] )'}, 'eMBRegHoldingCB': {'  usNRegsa = usNRegs;'}}, 12: {'eMBFuncWriteMultipleHoldingRegister': {'  if ( !usRegCount || usRegCount > 0x78u || 2 * (_BYTE)usRegCount != pucFrame[5] )'}}}}
2025-03-13 17:15:45,097 - my_text.py:446  - 2:000100000009ff100001000102000a Updated c_taint_c_dict: {'1': {4: {'xMBPortTCPPool': {'aucTCPBuf', 'unsigned', 'usLength', '64', '6', 'recv', 'usTCPBufPos', '0', '6u', '_byteswap_ushort', '__int16', 'if', 'while', '4', 'ret', '__fds_bits', '1LL', 'fread', 'usTCPFrameBytesLeft', 'xClientSocket', 'break'}}, 5: {'xMBPortTCPPool': {'aucTCPBuf', 'unsigned', 'usLength', '64', '6', 'recv', 'usTCPBufPos', '0', '_byteswap_ushort', '__int16', 'if', 'while', '4', 'ret', '__fds_bits', '1LL', 'fread', 'usTCPFrameBytesLeft', 'xClientSocket', 'break'}}, 2: {'eMBTCPReceive': {'2', '8', 'usPID', '3', '0', 'pucMBTCPFrame'}}, 3: {'eMBTCPReceive': {'3', '0', 'usPID', 'pucMBTCPFrame'}}, 7: {'eMBPoll': {'i', '0x80', 'xFuncHandlers', 'ucFunctionCode', 'if', 'ucFunctionCode_2897', 'ucMBFrame_2895'}}, 8: {'eMBFuncWriteMultipleHoldingRegister': {'_WORD', 'pucFrame', 'eRegStatus', 'usRegCount', '1', '_byteswap_ushort', '6', 'usRegAddress', 'MB_REG_WRITE', 'eMBRegHoldingCB'}, 'eMBRegHoldingCB': {'0x7CFu', 'usNRegsa', 'if', 'usNRegs', '2130', 'usAddress'}}, 9: {'eMBFuncWriteMultipleHoldingRegister': {'_WORD', 'pucFrame', 'eRegStatus', 'usRegCount', '1', '_byteswap_ushort', '6', 'usRegAddress', 'MB_REG_WRITE', 'eMBRegHoldingCB'}, 'eMBRegHoldingCB': {'0x7CFu', 'usNRegsa', 'if', 'usNRegs', '2130', 'usAddress'}}, 10: {'eMBFuncWriteMultipleHoldingRegister': {'_WORD', 'pucFrame', 'eRegStatus', 'usRegCount', '_byteswap_ushort', 'eMBRegHoldingCB', '0x78u', '2', 'if', '6', 'usRegAddress', 'MB_REG_WRITE', '5', '3', '_BYTE'}, 'eMBRegHoldingCB': {'usNRegsa', 'usNRegs'}}, 11: {'eMBFuncWriteMultipleHoldingRegister': {'_WORD', 'pucFrame', 'eRegStatus', 'usRegCount', '_byteswap_ushort', 'eMBRegHoldingCB', '0x78u', '2', 'if', '6', 'usRegAddress', 'MB_REG_WRITE', '5', '3', '_BYTE'}, 'eMBRegHoldingCB': {'usNRegsa', 'usNRegs'}}, 12: {'eMBFuncWriteMultipleHoldingRegister': {'pucFrame', 'usRegCount', '2', '0x78u', 'if', '5', '_BYTE'}}}}
2025-03-13 17:15:45,098 - my_text.py:463  - 2:000100000009ff100001000102000a var_flow: {'1': {4: {'global:usTCPBufPos', 'global:usTCPFrameBytesLeft', 'global:xClientSocket', 'xMBPortTCPPool:ret', 'xMBPortTCPPool:fread', 'xMBPortTCPPool:n', 'xMBPortTCPPool:usLength', 'global:aucTCPBuf'}, 5: {'global:usTCPBufPos', 'global:usTCPFrameBytesLeft', 'global:xClientSocket', 'xMBPortTCPPool:ret', 'xMBPortTCPPool:fread', 'xMBPortTCPPool:n', 'xMBPortTCPPool:usLength', 'global:aucTCPBuf'}, 2: {'eMBTCPReceive:usPID', 'eMBTCPReceive:pucMBTCPFrame'}, 3: {'eMBTCPReceive:usPID', 'eMBTCPReceive:pucMBTCPFrame'}, 7: {'global:ucMBFrame_2895', 'global:ucFunctionCode_2897', 'eMBPoll:i'}, 8: {'eMBFuncWriteMultipleHoldingRegister:pucFrame', 'eMBFuncWriteMultipleHoldingRegister:eRegStatus', 'eMBRegHoldingCB:usAddress', 'eMBRegHoldingCB:usNRegs', 'eMBFuncWriteMultipleHoldingRegister:usRegCount', 'eMBFuncWriteMultipleHoldingRegister:usRegAddress'}, 9: {'eMBFuncWriteMultipleHoldingRegister:pucFrame', 'eMBFuncWriteMultipleHoldingRegister:eRegStatus', 'eMBRegHoldingCB:usAddress', 'eMBRegHoldingCB:usNRegs', 'eMBFuncWriteMultipleHoldingRegister:usRegCount', 'eMBFuncWriteMultipleHoldingRegister:usRegAddress'}, 10: {'eMBFuncWriteMultipleHoldingRegister:pucFrame', 'eMBFuncWriteMultipleHoldingRegister:eRegStatus', 'eMBRegHoldingCB:usNRegs', 'eMBFuncWriteMultipleHoldingRegister:usRegCount', 'eMBFuncWriteMultipleHoldingRegister:usRegAddress'}, 11: {'eMBFuncWriteMultipleHoldingRegister:pucFrame', 'eMBFuncWriteMultipleHoldingRegister:eRegStatus', 'eMBRegHoldingCB:usNRegs', 'eMBFuncWriteMultipleHoldingRegister:ucRegByteCount', 'eMBFuncWriteMultipleHoldingRegister:usRegCount', 'eMBFuncWriteMultipleHoldingRegister:usRegAddress'}, 12: {'eMBFuncWriteMultipleHoldingRegister:pucFrame', 'eMBFuncWriteMultipleHoldingRegister:usRegCount', 'eMBFuncWriteMultipleHoldingRegister:ucRegByteCount'}}}
2025-03-13 17:15:45,098 - my_text.py:481  - Key pair (4, 5): Similarity = 1.0
2025-03-13 17:15:45,098 - my_text.py:481  - Key pair (2, 3): Similarity = 1.0
2025-03-13 17:15:45,098 - my_text.py:481  - Key pair (8, 9): Similarity = 1.0
2025-03-13 17:15:45,098 - my_text.py:485  - 2:000100000009ff100001000102000a Similarity matrix: {(4, 5): 1.0, (5, 2): 0.0, (2, 3): 1.0, (3, 7): 0.0, (7, 8): 0.0, (8, 9): 1.0, (9, 10): 0.8333333333333334, (10, 11): 0.8333333333333334, (11, 12): 0.5}
2025-03-13 17:15:45,098 - my_text.py:522  - 2:000100000009ff100001000102000a Merged queue: [(2, 3), (4, 5), (7,), (8, 9), (10,), (11,), (12,)]
2025-03-13 17:15:45,098 - my_text.py:528  - 2:000100000009ff100001000102000a used_fields: ['2,3', '4,5', '7', '8,9', '10', '11', '12']
2025-03-13 17:15:45,098 - my_text.py:544  - 2:000100000009ff100001000102000a data_new: {(2, 3): {'eMBTCPReceive': ['usPID', 'pucMBTCPFrame']}, (4, 5): {'global': ['usTCPBufPos', 'usTCPFrameBytesLeft', 'xClientSocket', 'aucTCPBuf'], 'xMBPortTCPPool': ['ret', 'fread', 'n', 'usLength']}, (7,): {'global': ['ucMBFrame_2895', 'ucFunctionCode_2897'], 'eMBPoll': ['i']}, (8, 9): {'eMBFuncWriteMultipleHoldingRegister': ['pucFrame', 'eRegStatus', 'usRegCount', 'usRegAddress'], 'eMBRegHoldingCB': ['usAddress', 'usNRegs']}, (10,): {'eMBFuncWriteMultipleHoldingRegister': ['pucFrame', 'eRegStatus', 'usRegCount', 'usRegAddress'], 'eMBRegHoldingCB': ['usNRegs']}, (11,): {'eMBFuncWriteMultipleHoldingRegister': ['pucFrame', 'usRegAddress', 'eRegStatus', 'usRegCount', 'ucRegByteCount'], 'eMBRegHoldingCB': ['usNRegs']}, (12,): {'eMBFuncWriteMultipleHoldingRegister': ['pucFrame', 'usRegCount', 'ucRegByteCount']}}
2025-03-13 17:15:46,826 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:15:54,627 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:16:04,485 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:16:08,025 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:16:15,338 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:16:25,483 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:16:34,095 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:16:39,670 - my_text.py:645  - 2:000100000009ff100001000102000a field_type: {'2,3': ['int'], '4,5': ['int'], '7': ['int'], '8,9': ['int'], '10': ['int'], '11': ['int'], '12': ['int']}
2025-03-13 17:16:39,670 - my_text.py:646  - 2:000100000009ff100001000102000a field_func: {'2,3': ['length'], '4,5': ['length'], '7': ['function_code'], '8,9': ['length'], '10': ['length'], '11': ['length'], '12': ['length']}
2025-03-13 17:16:40,266 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:16:44,218 - my_text.py:685  - 2:000100000009ff100001000102000a field_llm_type: {}
2025-03-13 17:16:44,218 - my_text.py:686  - 2:000100000009ff100001000102000a field_llm_Sem: {}
2025-03-13 17:16:44,218 - my_text.py:688  - 2:000100000009ff100001000102000a used_fields_llm: ['2,3', '4,5', '7', '8,9', '10', '11', '12']
2025-03-13 17:16:44,218 - my_text.py:689  - 2:000100000009ff100001000102000a field_llm_type_llm: {'2,3': ['int'], '4,5': ['int'], '7': ['int'], '8,9': ['int'], '10': ['int'], '11': ['int'], '12': ['int']}
2025-03-13 17:16:44,218 - my_text.py:690  - 2:000100000009ff100001000102000a field_llm_Sem_llm: {'2,3': ['length'], '4,5': ['length'], '7': ['function_code'], '8,9': ['length'], '10': ['length'], '11': ['length'], '12': ['length']}
2025-03-13 17:16:44,218 - my_text.py:435  - {'1': {4: {'xMBPortTCPPool': {'      if ( usTCPBufPos >= usLength + 6 )', '      while ( usTCPBufPos <= 6u );', '      usTCPFrameBytesLeft = usLength - usTCPBufPos + 6;', '        break;', '        while ( (fread.__fds_bits[xClientSocket / 64] & (1LL << (xClientSocket % 64))) == 0 );', '  while ( usTCPBufPos != usLength + 6 );', '      usLength = _byteswap_ushort(*(unsigned __int16 *)&aucTCPBuf[4]);', '        usTCPBufPos += ret;', '        ret = recv(xClientSocket, &aucTCPBuf[usTCPBufPos], usTCPFrameBytesLeft, 0);', '        usTCPFrameBytesLeft -= ret;'}}, 5: {'xMBPortTCPPool': {'      if ( usTCPBufPos >= usLength + 6 )', '      usTCPFrameBytesLeft = usLength - usTCPBufPos + 6;', '        break;', '        while ( (fread.__fds_bits[xClientSocket / 64] & (1LL << (xClientSocket % 64))) == 0 );', '  while ( usTCPBufPos != usLength + 6 );', '      usLength = _byteswap_ushort(*(unsigned __int16 *)&aucTCPBuf[4]);', '        usTCPBufPos += ret;', '        ret = recv(xClientSocket, &aucTCPBuf[usTCPBufPos], usTCPFrameBytesLeft, 0);', '        usTCPFrameBytesLeft -= ret;'}}, 2: {'eMBTCPReceive': {'  usPID = pucMBTCPFrame[0][2] << 8;', '  usPID |= pucMBTCPFrame[0][3];'}}, 3: {'eMBTCPReceive': {'  usPID |= pucMBTCPFrame[0][3];'}}, 7: {'eMBPoll': {'      ucFunctionCode_2897 = *ucMBFrame_2895;', '        if ( xFuncHandlers[i].ucFunctionCode == ucFunctionCode_2897 )', '          *ucMBFrame_2895 = ucFunctionCode_2897 | 0x80;'}}, 8: {'eMBFuncWriteCoil': {'  eRegStatus = eMBRegCoilsCB(ucBuf, usRegAddress, 1u, MB_REG_WRITE);', '  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;'}, 'eMBRegCoilsCB': {'  return 1;'}}, 9: {'eMBFuncWriteCoil': {'  eRegStatus = eMBRegCoilsCB(ucBuf, usRegAddress, 1u, MB_REG_WRITE);', '  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;'}, 'eMBRegCoilsCB': {'  return 1;'}}, 11: {'eMBFuncWriteCoil': {'  if ( pucFrame[4] || pucFrame[3] != 0xFF && pucFrame[3] )'}}, 10: {'eMBFuncWriteCoil': {'  if ( pucFrame[4] || pucFrame[3] != 0xFF && pucFrame[3] )', '  ucBuf[0] = pucFrame[3] == 0xFFu;'}}}}
2025-03-13 17:16:44,219 - my_text.py:446  - 3:000100000006ff050000ff00 Updated c_taint_c_dict: {'1': {4: {'xMBPortTCPPool': {'aucTCPBuf', 'unsigned', 'usLength', '64', '6', 'recv', 'usTCPBufPos', '0', '6u', '_byteswap_ushort', '__int16', 'if', 'while', '4', 'ret', '__fds_bits', '1LL', 'fread', 'usTCPFrameBytesLeft', 'xClientSocket', 'break'}}, 5: {'xMBPortTCPPool': {'aucTCPBuf', 'unsigned', 'usLength', '64', '6', 'recv', 'usTCPBufPos', '0', '_byteswap_ushort', '__int16', 'if', 'while', '4', 'ret', '__fds_bits', '1LL', 'fread', 'usTCPFrameBytesLeft', 'xClientSocket', 'break'}}, 2: {'eMBTCPReceive': {'2', '8', 'usPID', '3', '0', 'pucMBTCPFrame'}}, 3: {'eMBTCPReceive': {'3', '0', 'usPID', 'pucMBTCPFrame'}}, 7: {'eMBPoll': {'i', '0x80', 'xFuncHandlers', 'ucFunctionCode', 'if', 'ucFunctionCode_2897', 'ucMBFrame_2895'}}, 8: {'eMBFuncWriteCoil': {'_WORD', 'pucFrame', 'eMBRegCoilsCB', 'eRegStatus', 'ucBuf', '1', '_byteswap_ushort', '1u', 'MB_REG_WRITE', 'usRegAddress'}, 'eMBRegCoilsCB': {'1', 'return'}}, 9: {'eMBFuncWriteCoil': {'_WORD', 'pucFrame', 'eMBRegCoilsCB', 'eRegStatus', 'ucBuf', '1', '_byteswap_ushort', '1u', 'MB_REG_WRITE', 'usRegAddress'}, 'eMBRegCoilsCB': {'1', 'return'}}, 11: {'eMBFuncWriteCoil': {'4', 'pucFrame', '0xFF', 'if', '3'}}, 10: {'eMBFuncWriteCoil': {'4', 'pucFrame', 'ucBuf', '0xFF', 'if', '0xFFu', '3', '0'}}}}
2025-03-13 17:16:44,219 - my_text.py:463  - 3:000100000006ff050000ff00 var_flow: {'1': {4: {'global:usTCPBufPos', 'global:usTCPFrameBytesLeft', 'global:xClientSocket', 'xMBPortTCPPool:ret', 'xMBPortTCPPool:fread', 'xMBPortTCPPool:n', 'xMBPortTCPPool:usLength', 'global:aucTCPBuf'}, 5: {'global:usTCPBufPos', 'global:usTCPFrameBytesLeft', 'global:xClientSocket', 'xMBPortTCPPool:ret', 'xMBPortTCPPool:fread', 'xMBPortTCPPool:n', 'xMBPortTCPPool:usLength', 'global:aucTCPBuf'}, 2: {'eMBTCPReceive:usPID', 'eMBTCPReceive:pucMBTCPFrame'}, 3: {'eMBTCPReceive:usPID', 'eMBTCPReceive:pucMBTCPFrame'}, 7: {'global:ucMBFrame_2895', 'global:ucFunctionCode_2897', 'eMBPoll:i'}, 8: {'eMBFuncWriteCoil:pucFrame', 'eMBFuncWriteCoil:eRegStatus', 'eMBRegCoilsCB:usAddress', 'eMBFuncWriteCoil:ucBuf', 'eMBFuncWriteCoil:usRegAddress'}, 9: {'eMBFuncWriteCoil:pucFrame', 'eMBFuncWriteCoil:eRegStatus', 'eMBRegCoilsCB:usAddress', 'eMBFuncWriteCoil:ucBuf', 'eMBFuncWriteCoil:usRegAddress'}, 11: {'eMBFuncWriteCoil:pucFrame'}, 10: {'eMBFuncWriteCoil:pucFrame', 'eMBFuncWriteCoil:ucBuf'}}}
2025-03-13 17:16:44,219 - my_text.py:481  - Key pair (4, 5): Similarity = 1.0
2025-03-13 17:16:44,219 - my_text.py:481  - Key pair (2, 3): Similarity = 1.0
2025-03-13 17:16:44,219 - my_text.py:481  - Key pair (8, 9): Similarity = 1.0
2025-03-13 17:16:44,219 - my_text.py:485  - 3:000100000006ff050000ff00 Similarity matrix: {(4, 5): 1.0, (5, 2): 0.0, (2, 3): 1.0, (3, 7): 0.0, (7, 8): 0.0, (8, 9): 1.0, (9, 11): 0.2, (11, 10): 0.5}
2025-03-13 17:16:44,219 - my_text.py:522  - 3:000100000006ff050000ff00 Merged queue: [(2, 3), (4, 5), (7,), (8, 9), (10,), (11,)]
2025-03-13 17:16:44,219 - my_text.py:528  - 3:000100000006ff050000ff00 used_fields: ['2,3', '4,5', '7', '8,9', '10', '11']
2025-03-13 17:16:44,219 - my_text.py:544  - 3:000100000006ff050000ff00 data_new: {(2, 3): {'eMBTCPReceive': ['usPID', 'pucMBTCPFrame']}, (4, 5): {'global': ['usTCPBufPos', 'usTCPFrameBytesLeft', 'xClientSocket', 'aucTCPBuf'], 'xMBPortTCPPool': ['ret', 'fread', 'n', 'usLength']}, (7,): {'global': ['ucMBFrame_2895', 'ucFunctionCode_2897'], 'eMBPoll': ['i']}, (8, 9): {'eMBFuncWriteCoil': ['pucFrame', 'eRegStatus', 'ucBuf', 'usRegAddress'], 'eMBRegCoilsCB': ['usAddress']}, (10,): {'eMBFuncWriteCoil': ['pucFrame', 'ucBuf']}, (11,): {'eMBFuncWriteCoil': ['pucFrame']}}
2025-03-13 17:16:45,802 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:16:54,186 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:17:05,000 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:17:15,073 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:17:31,047 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:17:41,098 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:17:49,298 - my_text.py:645  - 3:000100000006ff050000ff00 field_type: {'2,3': ['int'], '4,5': ['int'], '7': ['int'], '8,9': ['int'], '10': ['int'], '11': ['int']}
2025-03-13 17:17:49,298 - my_text.py:646  - 3:000100000006ff050000ff00 field_func: {'2,3': ['length'], '4,5': ['length'], '7': ['function_code'], '8,9': ['length'], '10': ['length'], '11': ['coil_value']}
2025-03-13 17:17:49,873 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:17:51,637 - my_text.py:685  - 3:000100000006ff050000ff00 field_llm_type: {}
2025-03-13 17:17:51,638 - my_text.py:686  - 3:000100000006ff050000ff00 field_llm_Sem: {}
2025-03-13 17:17:51,638 - my_text.py:688  - 3:000100000006ff050000ff00 used_fields_llm: ['2,3', '4,5', '7', '8,9', '10', '11']
2025-03-13 17:17:51,638 - my_text.py:689  - 3:000100000006ff050000ff00 field_llm_type_llm: {'2,3': ['int'], '4,5': ['int'], '7': ['int'], '8,9': ['int'], '10': ['int'], '11': ['int']}
2025-03-13 17:17:51,638 - my_text.py:690  - 3:000100000006ff050000ff00 field_llm_Sem_llm: {'2,3': ['length'], '4,5': ['length'], '7': ['function_code'], '8,9': ['length'], '10': ['length'], '11': ['coil_value']}
2025-03-13 17:17:51,638 - my_text.py:435  - {'1': {4: {'xMBPortTCPPool': {'      if ( usTCPBufPos >= usLength + 6 )', '      while ( usTCPBufPos <= 6u );', '      usTCPFrameBytesLeft = usLength - usTCPBufPos + 6;', '        break;', '        while ( (fread.__fds_bits[xClientSocket / 64] & (1LL << (xClientSocket % 64))) == 0 );', '  while ( usTCPBufPos != usLength + 6 );', '      usLength = _byteswap_ushort(*(unsigned __int16 *)&aucTCPBuf[4]);', '        usTCPBufPos += ret;', '        ret = recv(xClientSocket, &aucTCPBuf[usTCPBufPos], usTCPFrameBytesLeft, 0);', '        usTCPFrameBytesLeft -= ret;'}}, 5: {'xMBPortTCPPool': {'      if ( usTCPBufPos >= usLength + 6 )', '      usTCPFrameBytesLeft = usLength - usTCPBufPos + 6;', '        break;', '        while ( (fread.__fds_bits[xClientSocket / 64] & (1LL << (xClientSocket % 64))) == 0 );', '  while ( usTCPBufPos != usLength + 6 );', '      usLength = _byteswap_ushort(*(unsigned __int16 *)&aucTCPBuf[4]);', '        usTCPBufPos += ret;', '        ret = recv(xClientSocket, &aucTCPBuf[usTCPBufPos], usTCPFrameBytesLeft, 0);', '        usTCPFrameBytesLeft -= ret;'}}, 2: {'eMBTCPReceive': {'  usPID = pucMBTCPFrame[0][2] << 8;', '  usPID |= pucMBTCPFrame[0][3];'}}, 3: {'eMBTCPReceive': {'  usPID |= pucMBTCPFrame[0][3];'}}, 7: {'eMBPoll': {'      ucFunctionCode_2897 = *ucMBFrame_2895;', '        if ( xFuncHandlers[i].ucFunctionCode == ucFunctionCode_2897 )', '          *ucMBFrame_2895 = ucFunctionCode_2897 | 0x80;'}}, 8: {'eMBFuncWriteMultipleCoils': {'  eRegStatus = eMBRegCoilsCB(pucFrame + 6, usRegAddress, usCoilCnt, MB_REG_WRITE);', '  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;'}, 'eMBRegCoilsCB': {'  return 1;'}}, 9: {'eMBFuncWriteMultipleCoils': {'  eRegStatus = eMBRegCoilsCB(pucFrame + 6, usRegAddress, usCoilCnt, MB_REG_WRITE);', '  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;'}, 'eMBRegCoilsCB': {'  return 1;'}}, 10: {'eMBFuncWriteMultipleCoils': {'  if ( !usCoilCnt || usCoilCnt > 0x7B0u || ucByteCountVerify != pucFrame[5] )', '    ucByteCountVerify = usCoilCnt >> 3;', '  usCoilCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));', '  eRegStatus = eMBRegCoilsCB(pucFrame + 6, usRegAddress, usCoilCnt, MB_REG_WRITE);', '    ucByteCountVerify = (usCoilCnt >> 3) + 1;', '  if ( (usCoilCnt & 7) != 0 )'}, 'eMBRegCoilsCB': {'  return 1;'}}, 11: {'eMBFuncWriteMultipleCoils': {'  if ( !usCoilCnt || usCoilCnt > 0x7B0u || ucByteCountVerify != pucFrame[5] )', '    ucByteCountVerify = usCoilCnt >> 3;', '  usCoilCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));', '  eRegStatus = eMBRegCoilsCB(pucFrame + 6, usRegAddress, usCoilCnt, MB_REG_WRITE);', '    ucByteCountVerify = (usCoilCnt >> 3) + 1;', '  if ( (usCoilCnt & 7) != 0 )'}, 'eMBRegCoilsCB': {'  return 1;'}}, 12: {'eMBFuncWriteMultipleCoils': {'  if ( !usCoilCnt || usCoilCnt > 0x7B0u || ucByteCountVerify != pucFrame[5] )'}}}}
2025-03-13 17:17:51,638 - my_text.py:446  - 4:000100000008ff0f000100010101 Updated c_taint_c_dict: {'1': {4: {'xMBPortTCPPool': {'aucTCPBuf', 'unsigned', 'usLength', '64', '6', 'recv', 'usTCPBufPos', '0', '6u', '_byteswap_ushort', '__int16', 'if', 'while', '4', 'ret', '__fds_bits', '1LL', 'fread', 'usTCPFrameBytesLeft', 'xClientSocket', 'break'}}, 5: {'xMBPortTCPPool': {'aucTCPBuf', 'unsigned', 'usLength', '64', '6', 'recv', 'usTCPBufPos', '0', '_byteswap_ushort', '__int16', 'if', 'while', '4', 'ret', '__fds_bits', '1LL', 'fread', 'usTCPFrameBytesLeft', 'xClientSocket', 'break'}}, 2: {'eMBTCPReceive': {'2', '8', 'usPID', '3', '0', 'pucMBTCPFrame'}}, 3: {'eMBTCPReceive': {'3', '0', 'usPID', 'pucMBTCPFrame'}}, 7: {'eMBPoll': {'i', '0x80', 'xFuncHandlers', 'ucFunctionCode', 'if', 'ucFunctionCode_2897', 'ucMBFrame_2895'}}, 8: {'eMBFuncWriteMultipleCoils': {'_WORD', 'pucFrame', 'eMBRegCoilsCB', 'eRegStatus', '1', '_byteswap_ushort', 'usCoilCnt', '6', 'MB_REG_WRITE', 'usRegAddress'}, 'eMBRegCoilsCB': {'1', 'return'}}, 9: {'eMBFuncWriteMultipleCoils': {'_WORD', 'pucFrame', 'eMBRegCoilsCB', 'eRegStatus', '1', '_byteswap_ushort', 'usCoilCnt', '6', 'MB_REG_WRITE', 'usRegAddress'}, 'eMBRegCoilsCB': {'1', 'return'}}, 10: {'eMBFuncWriteMultipleCoils': {'_WORD', 'pucFrame', 'eMBRegCoilsCB', 'eRegStatus', '1', '7', '_byteswap_ushort', 'usCoilCnt', '3', 'if', '6', 'usRegAddress', 'ucByteCountVerify', 'MB_REG_WRITE', '5', '0x7B0u', '0'}, 'eMBRegCoilsCB': {'1', 'return'}}, 11: {'eMBFuncWriteMultipleCoils': {'_WORD', 'pucFrame', 'eMBRegCoilsCB', 'eRegStatus', '1', '7', '_byteswap_ushort', 'usCoilCnt', '3', 'if', '6', 'usRegAddress', 'ucByteCountVerify', 'MB_REG_WRITE', '5', '0x7B0u', '0'}, 'eMBRegCoilsCB': {'1', 'return'}}, 12: {'eMBFuncWriteMultipleCoils': {'pucFrame', 'usCoilCnt', 'if', 'ucByteCountVerify', '5', '0x7B0u'}}}}
2025-03-13 17:17:51,638 - my_text.py:463  - 4:000100000008ff0f000100010101 var_flow: {'1': {4: {'global:usTCPBufPos', 'global:usTCPFrameBytesLeft', 'global:xClientSocket', 'xMBPortTCPPool:ret', 'xMBPortTCPPool:fread', 'xMBPortTCPPool:n', 'xMBPortTCPPool:usLength', 'global:aucTCPBuf'}, 5: {'global:usTCPBufPos', 'global:usTCPFrameBytesLeft', 'global:xClientSocket', 'xMBPortTCPPool:ret', 'xMBPortTCPPool:fread', 'xMBPortTCPPool:n', 'xMBPortTCPPool:usLength', 'global:aucTCPBuf'}, 2: {'eMBTCPReceive:usPID', 'eMBTCPReceive:pucMBTCPFrame'}, 3: {'eMBTCPReceive:usPID', 'eMBTCPReceive:pucMBTCPFrame'}, 7: {'global:ucMBFrame_2895', 'global:ucFunctionCode_2897', 'eMBPoll:i'}, 8: {'eMBFuncWriteMultipleCoils:usCoilCnt', 'eMBFuncWriteMultipleCoils:eRegStatus', 'eMBRegCoilsCB:usAddress', 'eMBFuncWriteMultipleCoils:pucFrame', 'eMBFuncWriteMultipleCoils:usRegAddress'}, 9: {'eMBFuncWriteMultipleCoils:usCoilCnt', 'eMBFuncWriteMultipleCoils:eRegStatus', 'eMBRegCoilsCB:usAddress', 'eMBFuncWriteMultipleCoils:pucFrame', 'eMBFuncWriteMultipleCoils:usRegAddress'}, 10: {'eMBRegCoilsCB:usNCoils', 'eMBFuncWriteMultipleCoils:usCoilCnt', 'eMBFuncWriteMultipleCoils:ucByteCountVerify', 'eMBFuncWriteMultipleCoils:eRegStatus', 'eMBFuncWriteMultipleCoils:usRegAddress', 'eMBFuncWriteMultipleCoils:pucFrame'}, 11: {'eMBRegCoilsCB:usNCoils', 'eMBFuncWriteMultipleCoils:usCoilCnt', 'eMBFuncWriteMultipleCoils:ucByteCountVerify', 'eMBFuncWriteMultipleCoils:ucByteCount', 'eMBFuncWriteMultipleCoils:eRegStatus', 'eMBFuncWriteMultipleCoils:usRegAddress', 'eMBFuncWriteMultipleCoils:pucFrame'}, 12: {'eMBFuncWriteMultipleCoils:ucByteCount', 'eMBFuncWriteMultipleCoils:ucByteCountVerify', 'eMBFuncWriteMultipleCoils:pucFrame', 'eMBFuncWriteMultipleCoils:usCoilCnt'}}}
2025-03-13 17:17:51,639 - my_text.py:481  - Key pair (4, 5): Similarity = 1.0
2025-03-13 17:17:51,639 - my_text.py:481  - Key pair (2, 3): Similarity = 1.0
2025-03-13 17:17:51,639 - my_text.py:481  - Key pair (8, 9): Similarity = 1.0
2025-03-13 17:17:51,639 - my_text.py:485  - 4:000100000008ff0f000100010101 Similarity matrix: {(4, 5): 1.0, (5, 2): 0.0, (2, 3): 1.0, (3, 7): 0.0, (7, 8): 0.0, (8, 9): 1.0, (9, 10): 0.5714285714285714, (10, 11): 0.8571428571428571, (11, 12): 0.5714285714285714}
2025-03-13 17:17:51,639 - my_text.py:522  - 4:000100000008ff0f000100010101 Merged queue: [(2, 3), (4, 5), (7,), (8, 9), (10,), (11,), (12,)]
2025-03-13 17:17:51,639 - my_text.py:528  - 4:000100000008ff0f000100010101 used_fields: ['2,3', '4,5', '7', '8,9', '10', '11', '12']
2025-03-13 17:17:51,639 - my_text.py:544  - 4:000100000008ff0f000100010101 data_new: {(2, 3): {'eMBTCPReceive': ['usPID', 'pucMBTCPFrame']}, (4, 5): {'global': ['usTCPBufPos', 'usTCPFrameBytesLeft', 'xClientSocket', 'aucTCPBuf'], 'xMBPortTCPPool': ['ret', 'fread', 'n', 'usLength']}, (7,): {'global': ['ucMBFrame_2895', 'ucFunctionCode_2897'], 'eMBPoll': ['i']}, (8, 9): {'eMBFuncWriteMultipleCoils': ['usCoilCnt', 'eRegStatus', 'usRegAddress', 'pucFrame'], 'eMBRegCoilsCB': ['usAddress']}, (10,): {'eMBFuncWriteMultipleCoils': ['pucFrame', 'usCoilCnt', 'ucByteCountVerify', 'eRegStatus', 'usRegAddress'], 'eMBRegCoilsCB': ['usNCoils']}, (11,): {'eMBFuncWriteMultipleCoils': ['pucFrame', 'usCoilCnt', 'ucByteCountVerify', 'eRegStatus', 'usRegAddress', 'ucByteCount'], 'eMBRegCoilsCB': ['usNCoils']}, (12,): {'eMBFuncWriteMultipleCoils': ['ucByteCount', 'ucByteCountVerify', 'pucFrame', 'usCoilCnt']}}
2025-03-13 17:17:53,234 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:18:00,446 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:18:08,319 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:18:11,178 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:18:21,296 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:18:28,393 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:18:38,705 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:18:44,522 - my_text.py:645  - 4:000100000008ff0f000100010101 field_type: {'2,3': ['int'], '4,5': ['int'], '7': ['int'], '8,9': ['int'], '10': ['int'], '11': ['int'], '12': ['int']}
2025-03-13 17:18:44,523 - my_text.py:646  - 4:000100000008ff0f000100010101 field_func: {'2,3': ['length'], '4,5': ['length'], '7': ['function_code'], '8,9': ['length'], '10': ['length'], '11': ['length'], '12': ['length']}
2025-03-13 17:18:45,125 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:18:49,492 - my_text.py:685  - 4:000100000008ff0f000100010101 field_llm_type: {}
2025-03-13 17:18:49,492 - my_text.py:686  - 4:000100000008ff0f000100010101 field_llm_Sem: {}
2025-03-13 17:18:49,492 - my_text.py:688  - 4:000100000008ff0f000100010101 used_fields_llm: ['2,3', '4,5', '7', '8,9', '10', '11', '12']
2025-03-13 17:18:49,492 - my_text.py:689  - 4:000100000008ff0f000100010101 field_llm_type_llm: {'2,3': ['int'], '4,5': ['int'], '7': ['int'], '8,9': ['int'], '10': ['int'], '11': ['int'], '12': ['int']}
2025-03-13 17:18:49,492 - my_text.py:690  - 4:000100000008ff0f000100010101 field_llm_Sem_llm: {'2,3': ['length'], '4,5': ['length'], '7': ['function_code'], '8,9': ['length'], '10': ['length'], '11': ['length'], '12': ['length']}
2025-03-13 17:18:49,493 - my_text.py:435  - {'1': {4: {'xMBPortTCPPool': {'      if ( usTCPBufPos >= usLength + 6 )', '      while ( usTCPBufPos <= 6u );', '      usTCPFrameBytesLeft = usLength - usTCPBufPos + 6;', '        break;', '        while ( (fread.__fds_bits[xClientSocket / 64] & (1LL << (xClientSocket % 64))) == 0 );', '  while ( usTCPBufPos != usLength + 6 );', '      usLength = _byteswap_ushort(*(unsigned __int16 *)&aucTCPBuf[4]);', '        usTCPBufPos += ret;', '        ret = recv(xClientSocket, &aucTCPBuf[usTCPBufPos], usTCPFrameBytesLeft, 0);', '        usTCPFrameBytesLeft -= ret;'}}, 5: {'xMBPortTCPPool': {'      if ( usTCPBufPos >= usLength + 6 )', '      usTCPFrameBytesLeft = usLength - usTCPBufPos + 6;', '        break;', '        while ( (fread.__fds_bits[xClientSocket / 64] & (1LL << (xClientSocket % 64))) == 0 );', '  while ( usTCPBufPos != usLength + 6 );', '      usLength = _byteswap_ushort(*(unsigned __int16 *)&aucTCPBuf[4]);', '        usTCPBufPos += ret;', '        ret = recv(xClientSocket, &aucTCPBuf[usTCPBufPos], usTCPFrameBytesLeft, 0);', '        usTCPFrameBytesLeft -= ret;'}}, 2: {'eMBTCPReceive': {'  usPID = pucMBTCPFrame[0][2] << 8;', '  usPID |= pucMBTCPFrame[0][3];'}}, 3: {'eMBTCPReceive': {'  usPID |= pucMBTCPFrame[0][3];'}}, 7: {'eMBPoll': {'      ucFunctionCode_2897 = *ucMBFrame_2895;', '        if ( xFuncHandlers[i].ucFunctionCode == ucFunctionCode_2897 )', '          *ucMBFrame_2895 = ucFunctionCode_2897 | 0x80;'}}, 8: {'eMBFuncReadCoils': {'  eRegStatus = eMBRegCoilsCB(pucFrame + 2, usRegAddress, usCoilCount, MB_REG_READ);', '  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;'}, 'eMBRegCoilsCB': {'  return 1;'}}, 9: {'eMBFuncReadCoils': {'  eRegStatus = eMBRegCoilsCB(pucFrame + 2, usRegAddress, usCoilCount, MB_REG_READ);', '  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;'}, 'eMBRegCoilsCB': {'  return 1;'}}, 10: {'eMBFuncReadCoils': {'  usCoilCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));', '  if ( !usCoilCount || usCoilCount > 0x7CFu )', '  ++*usLen;', '  if ( (usCoilCount & 7) != 0 )', '    ucNBytes = (usCoilCount >> 3) + 1;', '  eRegStatus = eMBRegCoilsCB(pucFrame + 2, usRegAddress, usCoilCount, MB_REG_READ);'}, 'eMBRegCoilsCB': {'  return 1;'}}, 11: {'eMBFuncReadCoils': {'  usCoilCount = _byteswap_ushort(*(_WORD *)(pucFrame + 3));', '  if ( !usCoilCount || usCoilCount > 0x7CFu )', '  pucFrame[1] = ucNBytes;', '  ++*usLen;', '  if ( (usCoilCount & 7) != 0 )', '    ucNBytes = (usCoilCount >> 3) + 1;', '  eRegStatus = eMBRegCoilsCB(pucFrame + 2, usRegAddress, usCoilCount, MB_REG_READ);'}, 'eMBRegCoilsCB': {'  return 1;'}}}}
2025-03-13 17:18:49,493 - my_text.py:446  - 5:320600000006ff0100000006 Updated c_taint_c_dict: {'1': {4: {'xMBPortTCPPool': {'aucTCPBuf', 'unsigned', 'usLength', '64', '6', 'recv', 'usTCPBufPos', '0', '6u', '_byteswap_ushort', '__int16', 'if', 'while', '4', 'ret', '__fds_bits', '1LL', 'fread', 'usTCPFrameBytesLeft', 'xClientSocket', 'break'}}, 5: {'xMBPortTCPPool': {'aucTCPBuf', 'unsigned', 'usLength', '64', '6', 'recv', 'usTCPBufPos', '0', '_byteswap_ushort', '__int16', 'if', 'while', '4', 'ret', '__fds_bits', '1LL', 'fread', 'usTCPFrameBytesLeft', 'xClientSocket', 'break'}}, 2: {'eMBTCPReceive': {'2', '8', 'usPID', '3', '0', 'pucMBTCPFrame'}}, 3: {'eMBTCPReceive': {'3', '0', 'usPID', 'pucMBTCPFrame'}}, 7: {'eMBPoll': {'i', '0x80', 'xFuncHandlers', 'ucFunctionCode', 'if', 'ucFunctionCode_2897', 'ucMBFrame_2895'}}, 8: {'eMBFuncReadCoils': {'_WORD', 'pucFrame', 'eMBRegCoilsCB', 'eRegStatus', '1', '2', '_byteswap_ushort', 'usCoilCount', 'MB_REG_READ', 'usRegAddress'}, 'eMBRegCoilsCB': {'1', 'return'}}, 9: {'eMBFuncReadCoils': {'_WORD', 'pucFrame', 'eMBRegCoilsCB', 'eRegStatus', '1', '2', '_byteswap_ushort', 'usCoilCount', 'MB_REG_READ', 'usRegAddress'}, 'eMBRegCoilsCB': {'1', 'return'}}, 10: {'eMBFuncReadCoils': {'_WORD', '0x7CFu', 'pucFrame', 'ucNBytes', '1', 'eRegStatus', 'eMBRegCoilsCB', '7', '_byteswap_ushort', '2', 'usCoilCount', 'if', 'MB_REG_READ', 'usLen', 'usRegAddress', '3', '0'}, 'eMBRegCoilsCB': {'1', 'return'}}, 11: {'eMBFuncReadCoils': {'_WORD', '0x7CFu', 'pucFrame', 'ucNBytes', '1', 'eRegStatus', 'eMBRegCoilsCB', '7', '_byteswap_ushort', '2', 'usCoilCount', 'if', 'MB_REG_READ', 'usLen', 'usRegAddress', '3', '0'}, 'eMBRegCoilsCB': {'1', 'return'}}}}
2025-03-13 17:18:49,493 - my_text.py:463  - 5:320600000006ff0100000006 var_flow: {'1': {4: {'global:usTCPBufPos', 'global:usTCPFrameBytesLeft', 'global:xClientSocket', 'xMBPortTCPPool:ret', 'xMBPortTCPPool:fread', 'xMBPortTCPPool:n', 'xMBPortTCPPool:usLength', 'global:aucTCPBuf'}, 5: {'global:usTCPBufPos', 'global:usTCPFrameBytesLeft', 'global:xClientSocket', 'xMBPortTCPPool:ret', 'xMBPortTCPPool:fread', 'xMBPortTCPPool:n', 'xMBPortTCPPool:usLength', 'global:aucTCPBuf'}, 2: {'eMBTCPReceive:usPID', 'eMBTCPReceive:pucMBTCPFrame'}, 3: {'eMBTCPReceive:usPID', 'eMBTCPReceive:pucMBTCPFrame'}, 7: {'global:ucMBFrame_2895', 'global:ucFunctionCode_2897', 'eMBPoll:i'}, 8: {'eMBFuncReadCoils:eRegStatus', 'eMBFuncReadCoils:pucFrame', 'eMBRegCoilsCB:usAddress', 'eMBFuncReadCoils:usCoilCount', 'eMBFuncReadCoils:usRegAddress'}, 9: {'eMBFuncReadCoils:eRegStatus', 'eMBFuncReadCoils:pucFrame', 'eMBRegCoilsCB:usAddress', 'eMBFuncReadCoils:usCoilCount', 'eMBFuncReadCoils:usRegAddress'}, 10: {'eMBFuncReadCoils:usLen', 'eMBRegCoilsCB:usNCoils', 'eMBFuncReadCoils:eRegStatus', 'eMBFuncReadCoils:pucFrame', 'eMBFuncReadCoils:ucNBytes', 'eMBFuncReadCoils:usCoilCount', 'eMBFuncReadCoils:usRegAddress'}, 11: {'eMBFuncReadCoils:usLen', 'eMBRegCoilsCB:usNCoils', 'eMBFuncReadCoils:pucFrame', 'eMBFuncReadCoils:eRegStatus', 'eMBFuncReadCoils:ucNBytes', 'eMBFuncReadCoils:usCoilCount', 'eMBFuncReadCoils:usRegAddress'}}}
2025-03-13 17:18:49,493 - my_text.py:481  - Key pair (4, 5): Similarity = 1.0
2025-03-13 17:18:49,493 - my_text.py:481  - Key pair (2, 3): Similarity = 1.0
2025-03-13 17:18:49,493 - my_text.py:481  - Key pair (8, 9): Similarity = 1.0
2025-03-13 17:18:49,493 - my_text.py:481  - Key pair (10, 11): Similarity = 1.0
2025-03-13 17:18:49,493 - my_text.py:485  - 5:320600000006ff0100000006 Similarity matrix: {(4, 5): 1.0, (5, 2): 0.0, (2, 3): 1.0, (3, 7): 0.0, (7, 8): 0.0, (8, 9): 1.0, (9, 10): 0.5, (10, 11): 1.0}
2025-03-13 17:18:49,493 - my_text.py:522  - 5:320600000006ff0100000006 Merged queue: [(2, 3), (4, 5), (7,), (8, 9), (10, 11)]
2025-03-13 17:18:49,494 - my_text.py:528  - 5:320600000006ff0100000006 used_fields: ['2,3', '4,5', '7', '8,9', '10,11']
2025-03-13 17:18:49,494 - my_text.py:544  - 5:320600000006ff0100000006 data_new: {(2, 3): {'eMBTCPReceive': ['usPID', 'pucMBTCPFrame']}, (4, 5): {'global': ['usTCPBufPos', 'usTCPFrameBytesLeft', 'xClientSocket', 'aucTCPBuf'], 'xMBPortTCPPool': ['ret', 'fread', 'n', 'usLength']}, (7,): {'global': ['ucMBFrame_2895', 'ucFunctionCode_2897'], 'eMBPoll': ['i']}, (8, 9): {'eMBFuncReadCoils': ['eRegStatus', 'pucFrame', 'usCoilCount', 'usRegAddress'], 'eMBRegCoilsCB': ['usAddress']}, (10, 11): {'eMBFuncReadCoils': ['usLen', 'eRegStatus', 'pucFrame', 'ucNBytes', 'usCoilCount', 'usRegAddress'], 'eMBRegCoilsCB': ['usNCoils']}}
2025-03-13 17:18:51,117 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:18:59,026 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:19:09,918 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:19:18,399 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:19:28,157 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:19:34,226 - my_text.py:645  - 5:320600000006ff0100000006 field_type: {'2,3': ['int'], '4,5': ['int'], '7': ['int'], '8,9': ['int'], '10,11': ['int']}
2025-03-13 17:19:34,226 - my_text.py:646  - 5:320600000006ff0100000006 field_func: {'2,3': ['length'], '4,5': ['length'], '7': ['length'], '8,9': ['length'], '10,11': ['length']}
2025-03-13 17:19:34,820 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:19:38,628 - my_text.py:685  - 5:320600000006ff0100000006 field_llm_type: {}
2025-03-13 17:19:38,628 - my_text.py:686  - 5:320600000006ff0100000006 field_llm_Sem: {}
2025-03-13 17:19:38,628 - my_text.py:688  - 5:320600000006ff0100000006 used_fields_llm: ['2,3', '4,5', '7', '8,9', '10,11']
2025-03-13 17:19:38,628 - my_text.py:689  - 5:320600000006ff0100000006 field_llm_type_llm: {'2,3': ['int'], '4,5': ['int'], '7': ['int'], '8,9': ['int'], '10,11': ['int']}
2025-03-13 17:19:38,628 - my_text.py:690  - 5:320600000006ff0100000006 field_llm_Sem_llm: {'2,3': ['length'], '4,5': ['length'], '7': ['length'], '8,9': ['length'], '10,11': ['length']}
2025-03-13 17:19:38,628 - my_text.py:435  - {'1': {4: {'xMBPortTCPPool': {'      if ( usTCPBufPos >= usLength + 6 )', '      while ( usTCPBufPos <= 6u );', '      usTCPFrameBytesLeft = usLength - usTCPBufPos + 6;', '        break;', '        while ( (fread.__fds_bits[xClientSocket / 64] & (1LL << (xClientSocket % 64))) == 0 );', '  while ( usTCPBufPos != usLength + 6 );', '      usLength = _byteswap_ushort(*(unsigned __int16 *)&aucTCPBuf[4]);', '        usTCPBufPos += ret;', '        ret = recv(xClientSocket, &aucTCPBuf[usTCPBufPos], usTCPFrameBytesLeft, 0);', '        usTCPFrameBytesLeft -= ret;'}}, 5: {'xMBPortTCPPool': {'      if ( usTCPBufPos >= usLength + 6 )', '      usTCPFrameBytesLeft = usLength - usTCPBufPos + 6;', '        break;', '        while ( (fread.__fds_bits[xClientSocket / 64] & (1LL << (xClientSocket % 64))) == 0 );', '  while ( usTCPBufPos != usLength + 6 );', '      usLength = _byteswap_ushort(*(unsigned __int16 *)&aucTCPBuf[4]);', '        usTCPBufPos += ret;', '        ret = recv(xClientSocket, &aucTCPBuf[usTCPBufPos], usTCPFrameBytesLeft, 0);', '        usTCPFrameBytesLeft -= ret;'}}, 2: {'eMBTCPReceive': {'  usPID = pucMBTCPFrame[0][2] << 8;', '  usPID |= pucMBTCPFrame[0][3];'}}, 3: {'eMBTCPReceive': {'  usPID |= pucMBTCPFrame[0][3];'}}, 7: {'eMBPoll': {'      ucFunctionCode_2897 = *ucMBFrame_2895;', '        if ( xFuncHandlers[i].ucFunctionCode == ucFunctionCode_2897 )', '          *ucMBFrame_2895 = ucFunctionCode_2897 | 0x80;'}}, 8: {'eMBFuncReadDiscreteInputs': {'  eRegStatus = eMBRegDiscreteCB(pucFrame + 2, usRegAddress, usDiscreteCnt);', '  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;'}, 'eMBRegDiscreteCB': {'  return 1;'}}, 9: {'eMBFuncReadDiscreteInputs': {'  eRegStatus = eMBRegDiscreteCB(pucFrame + 2, usRegAddress, usDiscreteCnt);', '  usRegAddress = _byteswap_ushort(*(_WORD *)(pucFrame + 1)) + 1;'}, 'eMBRegDiscreteCB': {'  return 1;'}}, 10: {'eMBFuncReadDiscreteInputs': {'  if ( (usDiscreteCnt & 7) != 0 )', '  if ( !usDiscreteCnt || usDiscreteCnt > 0x7CFu )', '  ++*usLen;', '  usDiscreteCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));', '  eRegStatus = eMBRegDiscreteCB(pucFrame + 2, usRegAddress, usDiscreteCnt);', '    ucNBytes = (usDiscreteCnt >> 3) + 1;'}, 'eMBRegDiscreteCB': {'  return 1;'}}, 11: {'eMBFuncReadDiscreteInputs': {'  if ( (usDiscreteCnt & 7) != 0 )', '  if ( !usDiscreteCnt || usDiscreteCnt > 0x7CFu )', '  pucFrame[1] = ucNBytes;', '  ++*usLen;', '  usDiscreteCnt = _byteswap_ushort(*(_WORD *)(pucFrame + 3));', '  eRegStatus = eMBRegDiscreteCB(pucFrame + 2, usRegAddress, usDiscreteCnt);', '    ucNBytes = (usDiscreteCnt >> 3) + 1;'}, 'eMBRegDiscreteCB': {'  return 1;'}}}}
2025-03-13 17:19:38,629 - my_text.py:446  - 6:320800000006ff020000000a Updated c_taint_c_dict: {'1': {4: {'xMBPortTCPPool': {'aucTCPBuf', 'unsigned', 'usLength', '64', '6', 'recv', 'usTCPBufPos', '0', '6u', '_byteswap_ushort', '__int16', 'if', 'while', '4', 'ret', '__fds_bits', '1LL', 'fread', 'usTCPFrameBytesLeft', 'xClientSocket', 'break'}}, 5: {'xMBPortTCPPool': {'aucTCPBuf', 'unsigned', 'usLength', '64', '6', 'recv', 'usTCPBufPos', '0', '_byteswap_ushort', '__int16', 'if', 'while', '4', 'ret', '__fds_bits', '1LL', 'fread', 'usTCPFrameBytesLeft', 'xClientSocket', 'break'}}, 2: {'eMBTCPReceive': {'2', '8', 'usPID', '3', '0', 'pucMBTCPFrame'}}, 3: {'eMBTCPReceive': {'3', '0', 'usPID', 'pucMBTCPFrame'}}, 7: {'eMBPoll': {'i', '0x80', 'xFuncHandlers', 'ucFunctionCode', 'if', 'ucFunctionCode_2897', 'ucMBFrame_2895'}}, 8: {'eMBFuncReadDiscreteInputs': {'_WORD', 'pucFrame', 'eRegStatus', '1', '2', '_byteswap_ushort', 'usRegAddress', 'usDiscreteCnt', 'eMBRegDiscreteCB'}, 'eMBRegDiscreteCB': {'1', 'return'}}, 9: {'eMBFuncReadDiscreteInputs': {'_WORD', 'pucFrame', 'eRegStatus', '1', '2', '_byteswap_ushort', 'usRegAddress', 'usDiscreteCnt', 'eMBRegDiscreteCB'}, 'eMBRegDiscreteCB': {'1', 'return'}}, 10: {'eMBFuncReadDiscreteInputs': {'_WORD', '0x7CFu', 'pucFrame', 'ucNBytes', 'eRegStatus', '1', '7', 'eMBRegDiscreteCB', '_byteswap_ushort', '2', 'if', 'usLen', 'usRegAddress', '3', '0', 'usDiscreteCnt'}, 'eMBRegDiscreteCB': {'1', 'return'}}, 11: {'eMBFuncReadDiscreteInputs': {'_WORD', '0x7CFu', 'pucFrame', 'ucNBytes', '1', 'eRegStatus', '7', 'eMBRegDiscreteCB', '_byteswap_ushort', '2', 'if', 'usLen', 'usRegAddress', '3', '0', 'usDiscreteCnt'}, 'eMBRegDiscreteCB': {'1', 'return'}}}}
2025-03-13 17:19:38,629 - my_text.py:463  - 6:320800000006ff020000000a var_flow: {'1': {4: {'global:usTCPBufPos', 'global:usTCPFrameBytesLeft', 'global:xClientSocket', 'xMBPortTCPPool:ret', 'xMBPortTCPPool:fread', 'xMBPortTCPPool:n', 'xMBPortTCPPool:usLength', 'global:aucTCPBuf'}, 5: {'global:usTCPBufPos', 'global:usTCPFrameBytesLeft', 'global:xClientSocket', 'xMBPortTCPPool:ret', 'xMBPortTCPPool:fread', 'xMBPortTCPPool:n', 'xMBPortTCPPool:usLength', 'global:aucTCPBuf'}, 2: {'eMBTCPReceive:usPID', 'eMBTCPReceive:pucMBTCPFrame'}, 3: {'eMBTCPReceive:usPID', 'eMBTCPReceive:pucMBTCPFrame'}, 7: {'global:ucMBFrame_2895', 'global:ucFunctionCode_2897', 'eMBPoll:i'}, 8: {'eMBFuncReadDiscreteInputs:usDiscreteCnt', 'eMBRegDiscreteCB:usAddress', 'eMBFuncReadDiscreteInputs:pucFrame', 'eMBFuncReadDiscreteInputs:usRegAddress', 'eMBFuncReadDiscreteInputs:eRegStatus'}, 9: {'eMBFuncReadDiscreteInputs:usDiscreteCnt', 'eMBRegDiscreteCB:usAddress', 'eMBFuncReadDiscreteInputs:pucFrame', 'eMBFuncReadDiscreteInputs:usRegAddress', 'eMBFuncReadDiscreteInputs:eRegStatus'}, 10: {'eMBFuncReadDiscreteInputs:usDiscreteCnt', 'eMBFuncReadDiscreteInputs:usLen', 'eMBFuncReadDiscreteInputs:pucFrame', 'eMBRegDiscreteCB:usNDiscrete', 'eMBFuncReadDiscreteInputs:usRegAddress', 'eMBFuncReadDiscreteInputs:ucNBytes', 'eMBFuncReadDiscreteInputs:eRegStatus'}, 11: {'eMBFuncReadDiscreteInputs:usDiscreteCnt', 'eMBFuncReadDiscreteInputs:usLen', 'eMBFuncReadDiscreteInputs:pucFrame', 'eMBRegDiscreteCB:usNDiscrete', 'eMBFuncReadDiscreteInputs:usRegAddress', 'eMBFuncReadDiscreteInputs:ucNBytes', 'eMBFuncReadDiscreteInputs:eRegStatus'}}}
2025-03-13 17:19:38,629 - my_text.py:481  - Key pair (4, 5): Similarity = 1.0
2025-03-13 17:19:38,629 - my_text.py:481  - Key pair (2, 3): Similarity = 1.0
2025-03-13 17:19:38,629 - my_text.py:481  - Key pair (8, 9): Similarity = 1.0
2025-03-13 17:19:38,629 - my_text.py:481  - Key pair (10, 11): Similarity = 1.0
2025-03-13 17:19:38,629 - my_text.py:485  - 6:320800000006ff020000000a Similarity matrix: {(4, 5): 1.0, (5, 2): 0.0, (2, 3): 1.0, (3, 7): 0.0, (7, 8): 0.0, (8, 9): 1.0, (9, 10): 0.5, (10, 11): 1.0}
2025-03-13 17:19:38,629 - my_text.py:522  - 6:320800000006ff020000000a Merged queue: [(2, 3), (4, 5), (7,), (8, 9), (10, 11)]
2025-03-13 17:19:38,629 - my_text.py:528  - 6:320800000006ff020000000a used_fields: ['2,3', '4,5', '7', '8,9', '10,11']
2025-03-13 17:19:38,629 - my_text.py:544  - 6:320800000006ff020000000a data_new: {(2, 3): {'eMBTCPReceive': ['usPID', 'pucMBTCPFrame']}, (4, 5): {'global': ['usTCPBufPos', 'usTCPFrameBytesLeft', 'xClientSocket', 'aucTCPBuf'], 'xMBPortTCPPool': ['ret', 'fread', 'n', 'usLength']}, (7,): {'global': ['ucMBFrame_2895', 'ucFunctionCode_2897'], 'eMBPoll': ['i']}, (8, 9): {'eMBFuncReadDiscreteInputs': ['usDiscreteCnt', 'pucFrame', 'usRegAddress', 'eRegStatus'], 'eMBRegDiscreteCB': ['usAddress']}, (10, 11): {'eMBFuncReadDiscreteInputs': ['usDiscreteCnt', 'usLen', 'pucFrame', 'usRegAddress', 'ucNBytes', 'eRegStatus'], 'eMBRegDiscreteCB': ['usNDiscrete']}}
2025-03-13 17:19:40,242 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:19:50,857 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:19:58,410 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:20:01,101 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:20:10,690 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:20:18,143 - my_text.py:645  - 6:320800000006ff020000000a field_type: {'2,3': ['int'], '4,5': ['int'], '7': ['int'], '8,9': ['int'], '10,11': ['int']}
2025-03-13 17:20:18,143 - my_text.py:646  - 6:320800000006ff020000000a field_func: {'2,3': ['length'], '4,5': ['length'], '7': ['length'], '8,9': ['length'], '10,11': ['length']}
2025-03-13 17:20:18,864 - _client.py:1038  - HTTP Request: POST http://localhost:11434/api/generate "HTTP/1.1 200 OK"
2025-03-13 17:20:20,614 - my_text.py:685  - 6:320800000006ff020000000a field_llm_type: {}
2025-03-13 17:20:20,614 - my_text.py:686  - 6:320800000006ff020000000a field_llm_Sem: {}
2025-03-13 17:20:20,614 - my_text.py:688  - 6:320800000006ff020000000a used_fields_llm: ['2,3', '4,5', '7', '8,9', '10,11']
2025-03-13 17:20:20,614 - my_text.py:689  - 6:320800000006ff020000000a field_llm_type_llm: {'2,3': ['int'], '4,5': ['int'], '7': ['int'], '8,9': ['int'], '10,11': ['int']}
2025-03-13 17:20:20,614 - my_text.py:690  - 6:320800000006ff020000000a field_llm_Sem_llm: {'2,3': ['length'], '4,5': ['length'], '7': ['length'], '8,9': ['length'], '10,11': ['length']}
2025-03-13 17:20:20,614 - my_text.py:760  - Analysis completed successfully.
2025-03-13 17:20:20,614 - my_text.py:770  - Closing IDA Pro...
